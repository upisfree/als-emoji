(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={"ru":{"names":{"женский символ":"♀","мужской символ":"♂","медицинский символ":"⚕","танцующий мужчина":"🕺","черное сердце":"🖤","позвони мне":"🤙","поднятая ладонь":"🤚","кулак влево":"🤛","кулак вправо":"🤜","рукопожатие":"🤝","скрещенные пальцы":"🤞","голова ковбоя":"🤠","клоунское лицо":"🤡","тошнит":"🤢","катается от хохота":"🤣","пускает слюни":"🤤","лгущее лицо":"🤥","жест “нет слов”":"🤦","женщина потеряла дар речи":"🤦‍♀","мужчина потерял дар речи":"🤦‍♂","чихает":"🤧","беременная женщина":"🤰","селфи":"🤳","принц":"🤴","мужчина в смокинге":"🤵","миссис клаус":"🤶","пожимает плечами":"🤷","женщина пожимает плечами":"🤷‍♀","мужчина пожимает плечами":"🤷‍♂","акробатический трюк":"🤸","женщина-акробат":"🤸‍♀","акробат":"🤸‍♂","жонглер":"🤹","женщина-жонглер":"🤹‍♀","мужчина-жонглер":"🤹‍♂","фехтовальщик":"🤺","борцы":"🤼","борчихи":"🤼‍♀","мужчины-борцы":"🤼‍♂","водное поло":"🤽","женщина играет в водное поло":"🤽‍♀","мужчина играет в водное поло":"🤽‍♂","гандбол":"🤾","гандболистка":"🤾‍♀","гандболист":"🤾‍♂","увядший цветок":"🥀","барабан":"🥁","чокающиеся бокалы":"🥂","стакан для вина":"🥃","ложка":"🥄","спортивные ворота":"🥅","золотая медаль":"🥇","серебряная медаль":"🥈","бронзовая медаль":"🥉","перчатка для бокса":"🥊","спортивное кимоно":"🥋","круассан":"🥐","авокадо":"🥑","огурец":"🥒","бекон":"🥓","картофель":"🥔","морковь":"🥕","багет":"🥖","овощной салат":"🥗","рагу в сковороде":"🥘","шаверма":"🥙","яйцо":"🥚","стакан молока":"🥛","арахис":"🥜","киви":"🥝","блины":"🥞","орел":"🦅","утка":"🦆","летучая мышь":"🦇","акула":"🦈","сова":"🦉","лисица":"🦊","бабочка":"🦋","олень":"🦌","горилла":"🦍","ящерица":"🦎","носорог":"🦏","креветка":"🦐","кальмар":"🦑","улыбающееся лицо":"😀","лицо с ухмылкой":"😁","смех до слез":"😂","смех":"😃","широкая улыбка":"😄","нервный смех":"😅","смех c закрытыми глазами":"😆","подмигивание":"😉","улыбка":"😊","вкусно":"😋","лицо в очках":"😎","влюблен":"😍","воздушный поцелуй":"😘","целую":"😗","счастливый поцелуй":"😙","поцелуй с закрытыми глазами":"😚","смайлик":"☺","легкая улыбка":"🙂","обнимаю":"🤗","нимб":"😇","думаю":"🤔","все равно":"😐","без эмоций":"😑","лицо без рта":"😶","заведенные глаза":"🙄","ухмылка":"😏","упорство":"😣","обошлось":"😥","изумлен":"😮","рот на замке":"🤐","неприятно удивлен":"😯","хочу спать":"😪","очень устал":"😫","сплю":"😴","облегчение":"😌","очкарик":"🤓","высовываю язык":"😛","высовываю язык и подмигиваю":"😜","гадость":"😝","хмурюсь":"☹","немного хмурюсь":"🙁","скучно":"😒","холодный пот":"😓","задумчивость":"😔","смущение":"😕","сбит с толку":"😖","вверх тормашками":"🙃","в медицинской маске":"😷","градусник":"🤒","повязка":"🤕","деньги":"🤑","шок":"😲","разочарование":"😞","тревожно":"😟","гордость":"😤","плачу":"😢","слезы рекой":"😭","изумление":"😦","страдаю":"😧","боюсь":"😨","усталость":"😩","гримаса":"😬","сильно беспокоюсь":"😰","ужас":"😱","краснею":"😳","головокружение":"😵","злость":"😡","сержусь":"😠","чертенок":"😈","бесенок":"👿","нечисть":"👹","носатое чудище":"👺","череп":"💀","череп и кости":"☠","привидение":"👻","инопланетянин":"👽","космический монстр":"👾","робот":"🤖","какашка":"💩","кот с широкой улыбкой":"😺","кот с улыбкой":"😸","кот смеется":"😹","влюбленный кот":"😻","кот с ухмылкой":"😼","кот целует":"😽","кот волнуется":"🙀","кот плачет":"😿","кот в гневе":"😾","ничего не вижу":"🙈","ничего не слышу":"🙉","ничего никому не скажу":"🙊","мальчик":"👦","девочка":"👧","мужчина":"👨","врач":"👨‍⚕","студент":"👨‍🎓","фермер":"👨‍🌾","повар":"👨‍🍳","учитель":"👨‍🏫","рабочий":"👨‍🏭","художник":"👨‍🎨","пожарный":"👨‍🚒","пилот":"👨‍✈","космонавт":"👨‍🚀","певец":"👨‍🎤","технарь":"👨‍💻","ученый":"👨‍🔬","офисный работник":"👨‍💼","механик":"👨‍🔧","судья":"👨‍⚖","женщина":"👩","женщина-врач":"👩‍⚕","студентка":"👩‍🎓","женщина-фермер":"👩‍🌾","повариха":"👩‍🍳","учительница":"👩‍🏫","работница":"👩‍🏭","художница":"👩‍🎨","женщина-пожарный":"👩‍🚒","женщина-пилот":"👩‍✈","женщина-космонавт":"👩‍🚀","певица":"👩‍🎤","женщина-технарь":"👩‍💻","ученая":"👩‍🔬","офисная работница":"👩‍💼","женщина-механик":"👩‍🔧","женщина-судья":"👩‍⚖","пожилой мужчина":"👴","пожилая женщина":"👵","младенец":"👶","блондин":"👱","блондинка":"👱‍♀","мужчина блондин":"👱‍♂","полицейский":"👮","женщина-полицейский":"👮‍♀","мужчина-полицейский":"👮‍♂","китайский мальчик":"👲","индус":"👳","женщина в тюрбане":"👳‍♀","мужчина в тюрбане":"👳‍♂","строитель":"👷","женщина-инженер":"👷‍♀","инженер":"👷‍♂","шлем с белым крестом":"⛑","принцесса":"👸","гвардеец":"💂","охранница":"💂‍♀","охранник":"💂‍♂","сыщик":"🕵","женщина-детектив":"🕵‍♀","детектив":"🕵‍♂","Дед Мороз":"🎅","ангелочек":"👼","танцовщицы":"👯","женщины в кордебалете":"👯‍♀","мужчины в кордебалете":"👯‍♂","массаж лица":"💆","женщине массируют лицо":"💆‍♀","мужчине массируют лицо":"💆‍♂","стрижка":"💇","женщина у парикмахера":"💇‍♀","мужчина у парикмахера":"💇‍♂","невеста":"👰","хмурится":"🙍","сердитая женщина":"🙍‍♀","сердитый мужчина":"🙍‍♂","обида":"🙎","расстроенная женщина":"🙎‍♀","расстроенный мужчина":"🙎‍♂","нет":"🙅","женщина против":"🙅‍♀","мужчина против":"🙅‍♂","все в порядке":"🙆","женщина за":"🙆‍♀","мужчина за":"🙆‍♂","информация":"💁","женщина тянет руку":"💁‍♀","мужчина тянет руку":"💁‍♂","радуется":"🙋","женщина с поднятой рукой":"🙋‍♀","мужчина с поднятой рукой":"🙋‍♂","поклон":"🙇","женщина кланяется":"🙇‍♀","мужчина кланяется":"🙇‍♂","ура":"🙌","сложенные руки":"🙏","говорящая голова":"🗣","силуэт человека":"👤","два силуэта":"👥","пешеход":"🚶","женщина гуляет":"🚶‍♀","мужчина гуляет":"🚶‍♂","бегун":"🏃","женщина бежит":"🏃‍♀","мужчина бежит":"🏃‍♂","танцовщица":"💃","бизнесмен в воздухе":"🕴","поцелуй":"💏","влюбленная пара":"💑","семья":"👪","мужчина и женщина":"👫","двое мужчин":"👬","две женщины":"👭","цвет кожи 1–2":"🏻","цвет кожи 3":"🏼","цвет кожи 4":"🏽","цвет кожи 5":"🏾","цвет кожи 6":"🏿","бицепс":"💪","влево":"👈","вправо":"👉","указательный палец вверх":"☝","вверх":"👆","средний палец":"🖕","вниз":"👇","виктория":"✌","долгих лет и процветания":"🖖","рокерский жест":"🤘","раскрытая ладонь":"🖐","поднятый кулак":"✊","поднятая рука":"✋","кулак":"👊","жест «все хорошо»":"👌","большой палец вверх":"👍","большой палец вниз":"👎","машу рукой":"👋","аплодисменты":"👏","руки в стороны":"👐","пишущая рука":"✍","лак для ногтей":"💅","ухо":"👂","нос":"👃","следы":"👣","глаза":"👀","глаз":"👁","значок свидетеля":"👁‍🗨","язык":"👅","рот":"👄","значок поцелуя":"💋","сердце":"💘","алое сердце":"❤","пульсирующее сердце":"💓","разбитое сердце":"💔","два сердца":"💕","сверкающее сердце":"💖","растущее сердце":"💗","синее сердце":"💙","зеленое сердце":"💚","желтое сердце":"💛","фиолетовое сердце":"💜","сердце с лентой":"💝","вращающиеся сердца":"💞","значок сердце":"💟","сердце в виде восклицательного знака":"❣","любовное письмо":"💌","сон":"💤","значок «гнев»":"💢","бомба":"💣","взрыв":"💥","брызги пота":"💦","исчезновение":"💨","кружащаяся звезда":"💫","облачко с многоточием":"💬","черное облачко":"🗨","гневное облачко":"🗯","мысли":"💭","дыра":"🕳","очки":"👓","темные очки":"🕶","галстук":"👔","футболка":"👕","джинсы":"👖","платье":"👗","кимоно":"👘","бикини":"👙","блузка":"👚","кошелек":"👛","сумка":"👜","мешок":"👝","пакеты":"🛍","ранец":"🎒","ботинок":"👞","кроссовки":"👟","туфли на каблуке":"👠","сандалии на каблуке":"👡","сапог":"👢","корона":"👑","шляпка":"👒","цилиндр":"🎩","шапочка выпускника":"🎓","четки":"📿","помада":"💄","обручальное кольцо":"💍","драгоценный камень":"💎","морда обезьяны":"🐵","обезьяна":"🐒","морда собаки":"🐶","собака":"🐕","пудель":"🐩","волк":"🐺","морда кошки":"🐱","кошка":"🐈","лев":"🦁","морда тигра":"🐯","тигр":"🐅","леопард":"🐆","морда лошади":"🐴","лошадь":"🐎","единорог":"🦄","морда коровы":"🐮","бык":"🐂","буйвол":"🐃","корова":"🐄","морда свиньи":"🐷","свинья":"🐖","кабан":"🐗","свиной пятачок":"🐽","баран":"🐏","овца":"🐑","коза":"🐐","одногорбый верблюд":"🐪","двугорбый верблюд":"🐫","слон":"🐘","морда мыши":"🐭","мышь":"🐁","крыса":"🐀","хомяк":"🐹","морда кролика":"🐰","кролик":"🐇","бурундук":"🐿","морда медведя":"🐻","морда коалы":"🐨","морда панды":"🐼","следы животного":"🐾","индейка":"🦃","курица":"🐔","петух":"🐓","цыпленок в яйце":"🐣","голова цыпленка":"🐤","цыпленок":"🐥","птица":"🐦","пингвин":"🐧","голубь":"🕊","лягушка":"🐸","крокодил":"🐊","черепаха":"🐢","змея":"🐍","морда дракона":"🐲","дракон":"🐉","кит с фонтанчиком":"🐳","кит":"🐋","дельфин":"🐬","рыба":"🐟","тропическая рыба":"🐠","рыба-еж":"🐡","осьминог":"🐙","раковина":"🐚","краб":"🦀","улитка":"🐌","гусеница":"🐛","муравей":"🐜","пчела":"🐝","божья коровка":"🐞","паук":"🕷","паутина":"🕸","скорпион":"🦂","букет":"💐","цветок вишни":"🌸","белый цветок":"💮","розетка":"🏵","роза":"🌹","гибискус":"🌺","подсолнух":"🌻","цветок":"🌼","тюльпан":"🌷","трилистник":"☘","росток":"🌱","елка":"🌲","дерево":"🌳","пальма":"🌴","кактус":"🌵","колос":"🌾","листья":"🌿","четырехлистный клевер":"🍀","кленовый лист":"🍁","падающие листья":"🍂","листья на ветру":"🍃","виноград":"🍇","дыня":"🍈","арбуз":"🍉","мандарин":"🍊","лимон":"🍋","банан":"🍌","ананас":"🍍","красное яблоко":"🍎","зеленое яблоко":"🍏","груша":"🍐","персик":"🍑","вишня":"🍒","клубника":"🍓","помидор":"🍅","баклажан":"🍆","кукурузный початок":"🌽","острый перец":"🌶","гриб":"🍄","каштан":"🌰","хлеб":"🍞","сыр":"🧀","мясо на косточке":"🍖","куриная ножка":"🍗","гамбургер":"🍔","картофель фри":"🍟","пицца":"🍕","хот-дог":"🌭","тако":"🌮","буррито":"🌯","попкорн":"🍿","тарелка с горячей едой":"🍲","коробка с суши и рисом":"🍱","рисовый крекер":"🍘","онигири":"🍙","рис":"🍚","рис с карри":"🍛","лапша":"🍜","спагетти":"🍝","жареный картофель":"🍠","шашлычок из морепродуктов":"🍢","суши":"🍣","жареная креветка":"🍤","рыбная котлета":"🍥","мороженое на палочке":"🍡","мороженое в стаканчике":"🍦","мороженое в креманке":"🍧","мороженое":"🍨","пончик":"🍩","печенье":"🍪","торт ко дню рождения":"🎂","кусочек торта":"🍰","шоколад":"🍫","конфета":"🍬","леденец":"🍭","пудинг":"🍮","мед":"🍯","бутылочка с соской":"🍼","горячий напиток":"☕","чашка без ручки":"🍵","бутылка саке":"🍶","шампанское":"🍾","бокал вина":"🍷","коктейль":"🍸","тропический коктейль":"🍹","кружка пива":"🍺","тост":"🍻","тарелка":"🍽","вилка и нож":"🍴","яичница на сковороде":"🍳","амфора":"🏺","Европа и Африка на земном шаре":"🌍","Америка на земном шаре":"🌎","Азия и Австралия на земном шаре":"🌏","меридианы":"🌐","карта мира":"🗺","гора со снежной шапкой":"🏔","гора":"⛰","вулкан":"🌋","Фудзияма":"🗻","кемпинг":"🏕","пляжный зонтик":"🏖","пустыня":"🏜","остров":"🏝","национальный парк":"🏞","стадион":"🏟","античное здание":"🏛","стройка":"🏗","дома":"🏘","ночной город":"🏙","заброшенный дом":"🏚","дом":"🏠","дом с садом":"🏡","церковь":"⛪","Кааба":"🕋","мечеть":"🕌","синагога":"🕍","синтоистский храм":"⛩","офисное здание":"🏢","здание":"🏣","почта":"🏤","больница":"🏥","банк":"🏦","гостиница":"🏨","гостиница для свиданий":"🏩","круглосуточный магазин":"🏪","школа":"🏫","супермаркет":"🏬","завод":"🏭","японский замок":"🏯","замок":"🏰","свадьба":"💒","Токийская башня":"🗼","статуя Свободы":"🗽","Япония":"🗾","фонтан":"⛲","палатка":"⛺","туман":"🌁","звездная ночь":"🌃","восход солнца над горами":"🌄","восход":"🌅","закат в городе":"🌆","закат":"🌇","мост ночью":"🌉","горячие источники":"♨","Млечный Путь":"🌌","карусель":"🎠","колесо обозрения":"🎡","американские горки":"🎢","парикмахерская":"💈","цирковой шатер":"🎪","маски":"🎭","картина":"🖼","палитра с красками":"🎨","игровой автомат":"🎰","локомотив":"🚂","вагон":"🚃","скоростной поезд":"🚄","поезд-пуля":"🚅","поезд":"🚆","метро":"🚇","легкий рельсовый транспорт":"🚈","железнодорожный вокзал":"🚉","трамвай":"🚊","монорельс":"🚝","поезд в горах":"🚞","трамвайный вагон":"🚋","автобус":"🚌","автобус спереди":"🚍","троллейбус":"🚎","автобусная остановка":"🚏","микроавтобус":"🚐","машина скорой помощи":"🚑","пожарная машина":"🚒","полицейская машина":"🚓","полицейская машина спереди":"🚔","такси":"🚕","такси спереди":"🚖","автомобиль":"🚗","автомобиль спереди":"🚘","дом на колесах":"🚙","грузовик":"🚚","фура":"🚛","трактор":"🚜","велосипед":"🚲","заправка":"⛽","шоссе":"🛣","железная дорога":"🛤","мигалка":"🚨","горизонтальный светофор":"🚥","вертикальный светофор":"🚦","строительные работы":"🚧","якорь":"⚓","парусник":"⛵","лодка":"🚣","гребчиха":"🚣‍♀","гребец":"🚣‍♂","катер":"🚤","пассажирский лайнер":"🛳","паром":"⛴","моторная лодка":"🛥","корабль":"🚢","самолет":"✈","маленький самолет":"🛩","взлет":"🛫","посадка":"🛬","кресло":"💺","вертолет":"🚁","подвесная железная дорога":"🚟","вагон фуникулера":"🚠","канатная дорога":"🚡","ракета":"🚀","спутник":"🛰","гостиничный звонок":"🛎","дверь":"🚪","номер в гостинице":"🛌","кровать":"🛏","диван и торшер":"🛋","унитаз":"🚽","душ":"🚿","человек в ванне":"🛀","ванна":"🛁","песочные часы":"⌛","время пошло":"⏳","часы":"⌚","будильник":"⏰","секундомер":"⏱","таймер":"⏲","каминные часы":"🕰","время двенадцать часов":"🕛","полпервого":"🕧","время час":"🕐","полвторого":"🕜","время два часа":"🕑","полтретьего":"🕝","время три часа":"🕒","полчетвертого":"🕞","время четыре часа":"🕓","полпятого":"🕟","время пять часов":"🕔","полшестого":"🕠","время шесть часов":"🕕","полседьмого":"🕡","время семь часов":"🕖","полвосьмого":"🕢","время восемь часов":"🕗","полдевятого":"🕣","время девять часов":"🕘","полдесятого":"🕤","время десять часов":"🕙","пол-одиннадцатого":"🕥","время одиннадцать часов":"🕚","полдвенадцатого":"🕦","новолуние":"🌑","молодая луна":"🌒","луна в первой четверти":"🌓","прибывающая луна":"🌔","полная луна":"🌕","убывающая луна":"🌖","луна в последней четверти":"🌗","старая луна":"🌘","полумесяц":"🌙","молодая луна с лицом":"🌚","луна в первой четверти с лицом":"🌛","луна в последней четверти с лицом":"🌜","термометр":"🌡","солнце":"☀","луна с лицом":"🌝","солнце с лицом":"🌞","желтая звезда":"⭐","сияющая звезда":"🌟","падающая звезда":"🌠","туча":"☁","солнце за облаками":"⛅","гроза":"⛈","солнце за облачком":"🌤","солнце за облаком":"🌥","солнце за тучей":"🌦","дождь":"🌧","снег":"🌨","молния":"🌩","торнадо":"🌪","густой туман":"🌫","дует ветер":"🌬","циклон":"🌀","радуга":"🌈","закрытый зонт":"🌂","зонт":"☂","зонт под дождем":"☔","пляжный зонт":"⛱","высокое напряжение":"⚡","снежинка":"❄","снеговик под снегом":"☃","снеговик":"⛄","комета":"☄","огонь":"🔥","капля":"💧","волна":"🌊","тыква":"🎃","Новогодняя елка":"🎄","фейерверк":"🎆","бенгальский огонь":"🎇","звезды":"✨","воздушный шар":"🎈","хлопушка":"🎉","конфетти":"🎊","дерево с бумажными лентами":"🎋","два японских флага":"🎌","бамбук":"🎍","японские куклы":"🎎","игрушка с рыбками на палочке":"🎏","музыка ветра":"🎐","праздник луны":"🎑","бантик":"🎀","подарок":"🎁","военная медаль":"🎖","памятная лента":"🎗","пленка":"🎞","билеты":"🎟","билет":"🎫","бирка":"🏷","футбольный мяч":"⚽","бейсбольный мяч":"⚾","баскетбол":"🏀","американский футбол":"🏈","регби":"🏉","теннисная ракетка":"🎾","бильярд":"🎱","боулинг":"🎳","гольф":"⛳","гольфист":"🏌","женщина играет в гольф":"🏌‍♀","мужчина играет в гольф":"🏌‍♂","коньки":"⛸","удочка с рыбой":"🎣","футболка для бега":"🎽","лыжи":"🎿","горные лыжи":"⛷","сноуборд":"🏂","серфинг":"🏄","серфингистка":"🏄‍♀","серфингист":"🏄‍♂","скачки":"🏇","плавание":"🏊","пловчиха":"🏊‍♀","пловец":"🏊‍♂","баскетболист":"⛹","женщина с мячом":"⛹‍♀","мужчина с мячом":"⛹‍♂","тяжелоатлет":"🏋","тяжелоатлетка":"🏋‍♀","мужчина тяжелоатлет":"🏋‍♂","велосипедист":"🚴","велосипедистка":"🚴‍♀","мужчина велосипедист":"🚴‍♂","горный велосипед":"🚵","женщина на горном велосипеде":"🚵‍♀","мужчина на горном велосипеде":"🚵‍♂","гоночный автомобиль":"🏎","мотоцикл":"🏍","спортивная медаль":"🏅","кубок":"🏆","крикет":"🏏","волейбол":"🏐","хоккей на траве":"🏑","клюшка и шайба":"🏒","настольный теннис":"🏓","бадминтон":"🏸","мишень":"🎯","видеоигры":"🎮","джойстик":"🕹","игральные кости":"🎲","пики":"♠","червы":"♥","бубны":"♦","трефы":"♣","джокер":"🃏","маджонг":"🀄","карта с цветком":"🎴","без звука":"🔇","динамик":"🔈","тихо":"🔉","громко":"🔊","громкоговоритель":"📢","мегафон":"📣","почтовый рожок":"📯","колокольчик":"🔔","перечеркнутый колокольчик":"🔕","нотный стан":"🎼","нота":"🎵","ноты":"🎶","студийный микрофон":"🎙","слайдер":"🎚","регуляторы":"🎛","микрофон":"🎤","наушники":"🎧","саксофон":"🎷","гитара":"🎸","клавишные":"🎹","труба":"🎺","скрипка":"🎻","радио":"📻","мобильный телефон":"📱","входящий вызов":"📲","телефон":"☎","телефонная трубка":"📞","пейджер":"📟","факс":"📠","батарейка":"🔋","вилка":"🔌","ноутбук":"💻","компьютер":"🖥","принтер":"🖨","клавиатура":"⌨","мышка":"🖱","трекбол":"🖲","мини-диск":"💽","дискета":"💾","CD":"💿","DVD":"📀","кинокамера":"🎥","нумератор с хлопушкой":"🎬","кинопроектор":"📽","телевизор":"📺","фотоаппарат":"📷","фотоаппарат со вспышкой":"📸","видеокамера":"📹","видеокассета":"📼","увеличительное стекло":"🔍","лупа":"🔎","микроскоп":"🔬","телескоп":"🔭","спутниковая антенна":"📡","свеча":"🕯","лампочка":"💡","фонарик":"🔦","японский фонарик":"🏮","записная книжка":"📔","закрытая книга":"📕","открытая книга":"📖","зеленая книга":"📗","синяя книга":"📘","оранжевая книга":"📙","книги":"📚","тетрадка":"📓","блокнот":"📒","страница с загибом":"📃","свиток":"📜","страница":"📄","газета":"📰","свернутая газета":"🗞","закладки":"📑","закладка":"🔖","мешок денег":"💰","банкнота иены":"💴","банкнота доллар":"💵","банкнота евро":"💶","банкнота фунт":"💷","банкнота с крылышками":"💸","кредитная карта":"💳","биржа":"💹","конверт":"✉","электронная почта":"📧","входящее письмо":"📨","исходящее письмо":"📩","исходящие":"📤","входящие":"📥","посылка":"📦","заткрытый почтовый ящик с поднятым флажком":"📫","закрытый почтовый ящик с опущенным флажком":"📪","открытый почтовый ящик с поднятым флажкгом":"📬","открытый почтовый ящик с опущенным флажком":"📭","почтовый ящик":"📮","избирательная урна":"🗳","карандаш":"✏","перо":"✒","перьевая ручка":"🖋","шариковая ручка":"🖊","кисточка":"🖌","маркер":"🖍","заметка":"📝","портфель":"💼","папка":"📁","открытая папка":"📂","маркированные папки":"🗂","календарь с датой":"📅","отрывной календарь":"📆","перекидной блокнот":"🗒","перекидной календарь":"🗓","органайзер":"📇","диаграмма роста":"📈","диаграмма падения":"📉","гистограмма":"📊","планшет с зажимом":"📋","канцелярская кнопка":"📌","канцелярская кнопка с шариком":"📍","скрепка":"📎","скрепки":"🖇","линейка":"📏","линейка-треугольник":"📐","ножницы":"✂","картотека":"🗃","архивный шкаф":"🗄","корзина для мусора":"🗑","закрытый замок":"🔒","открытый замок":"🔓","закрытый замок с перьевой ручкой":"🔏","закрытый замок с ключом":"🔐","ключ":"🔑","старинный ключ":"🗝","молоток":"🔨","кирка":"⛏","кирка и молот":"⚒","молот и гаечный ключ":"🛠","гаечный ключ":"🔧","болт и гайка":"🔩","шестеренка":"⚙","компрессор":"🗜","перегонный сосуд":"⚗","весы":"⚖","гиперссылка":"🔗","цепь":"⛓","шприц":"💉","пилюля":"💊","кинжал":"🗡","нож":"🔪","скрещенные мечи":"⚔","пистолет":"🔫","щит":"🛡","лук":"🏹","клетчатый флаг":"🏁","белый флаг":"🏳","радужный флаг":"🏳‍🌈","черный флаг":"🏴","красный флаг":"🚩","сигарета":"🚬","гроб":"⚰","урна с прахом":"⚱","остров Пасхи":"🗿","бочка":"🛢","хрустальный шар":"🔮","значок банкомата":"🏧","бросайте мусор в урну":"🚮","питьевая вода":"🚰","значок «для инвалидов»":"♿","мужской туалет":"🚹","женский туалет":"🚺","уборная":"🚻","пеленальная":"🚼","туалет":"🚾","паспортный контроль":"🛂","таможня":"🛃","получение багажа":"🛄","забытый багаж":"🛅","значок предупреждения":"⚠","знак «дети»":"🚸","нет входа":"⛔","вход воспрещен":"🚫","перечеркнутый велосипед":"🚳","курение запрещено":"🚭","не мусорьте":"🚯","не питьевая вода":"🚱","переход запрещен":"🚷","радиация":"☢","биологическая угроза":"☣","стрелка вверх":"⬆","стрелка вправо-вверх":"↗","стрелка вправо":"➡","стрелка вправо-вниз":"↘","стрелка вниз":"⬇","стрелка влево-вниз":"↙","стрелка влево":"⬅","стрелка влево-вверх":"↖","стрелка вверх-вниз":"↕","стрелка влево-вправо":"↔","стрелка вправо с поворотом влево":"↩","стрелка влево с поворотом вправо":"↪","стрелка вправо с поворотом вверх":"⤴","стрелка вправо с поворотом вниз":"⤵","перезагрузка":"🔃","против часовой стрелки":"🔄","стрелка «назад»":"🔙","стрелка «конец»":"🔚","стрелка «активно»":"🔛","стрелка «скоро»":"🔜","стрелка «вверх»":"🔝","религия":"🛐","символ атома":"⚛","ом":"🕉","звезда давида":"✡","колесо дхармы":"☸","инь-ян":"☯","латинский крест":"✝","православный крест":"☦","звезда и полумесяц":"☪","пацифик":"☮","подсвечник для хануки":"🕎","шестиконечная звезда":"🔯","утилизация":"♻","бейдж":"📛","геральдическая лилия":"⚜","символ новичка":"🔰","трезубец":"🔱","красный круг":"⭕","белая галочка":"✅","бюллетень с галочкой":"☑","галочка":"✔","значок умножения":"✖","крестик":"❌","кнопка крестик":"❎","плюс":"➕","минус":"➖","значок деления":"➗","петля":"➰","двойная петля":"➿","вступает другой голос":"〽","восьмиконечная звездочка":"✳","четырехконечная звезда":"✴","искра":"❇","обмен валюты":"💱","доллар":"💲","два восклицательных знака":"‼","восклицательный и вопросительный знаки":"⁉","вопросительный знак":"❓","белый вопросительный знак":"❔","белый восклицательный знак":"❕","восклицательный знак":"❗","волнистая линия":"〰","Значок защиты авторского права":"©","зарегистрированный товарный знак":"®","товарный знак":"™","знак зодиака Овен":"♈","знак зодиака Телец":"♉","знак зодиака Близнецы":"♊","знак зодиака Рак":"♋","знак зодиака Лев":"♌","знак зодиака Дева":"♍","знак зодиака Весы":"♎","знак зодиака Скорпион":"♏","знак зодиака Стрелец":"♐","знак зодиака Козерог":"♑","знак зодиака Водолей":"♒","знак зодиака Рыбы":"♓","знак зодиака Змееносец":"⛎","случайный выбор":"🔀","повтор":"🔁","повтор одной песни":"🔂","воспроизведение":"▶","перемотка вперед":"⏩","следующий трек":"⏭","воспроизведение/пауза":"⏯","воспроизведение в обратном направлении":"◀","перемотка назад":"⏪","предыдущий трек":"⏮","кнопка треугольник острием вверх":"🔼","стрелки вверх":"⏫","кнопка треугольник острием вниз":"🔽","стрелки вниз":"⏬","пауза":"⏸","стоп":"⏹","запись":"⏺","выброс":"⏏","кино":"🎦","низкая яркость":"🔅","высокая яркость":"🔆","сигнал сети":"📶","звонки не принимаются":"📵","режим вибрации":"📳","выключенный телефон":"📴","кнопка «решетка»":"#⃣","кнопка «звездочка»":"*⃣","кнопка «десять»":"🔟","сто очков":"💯","для людей старше восемнадцати лет":"🔞","ввод прописными":"🔠","ввод строчными":"🔡","ввод цифр":"🔢","ввод символов":"🔣","латинский алфавит":"🔤","группа крови А":"🅰","группа крови AB":"🆎","группа крови В":"🅱","значок «понятно»":"🆑","значок «круто»":"🆒","значок «бесплатно»":"🆓","значок информации":"ℹ","значок «идентификация»":"🆔","буква «м» в кружке":"Ⓜ","значок «новинка»":"🆕","значок «ничего хорошего»":"🆖","группа крови O":"🅾","значок «ОК»":"🆗","автостоянка":"🅿","значок SOS":"🆘","значок «обновление»":"🆙","значок «против»":"🆚","здесь":"🈁","са":"🈂","месяц":"🈷","наличие":"🈶","указание пальцем":"🈯","удачная сделка":"🉐","скидка":"🈹","отсутствие":"🈚","запрет":"🈲","принятие":"🉑","запрос":"🈸","согласие":"🈴","доступно":"🈳","поздравление":"㊗","секрет":"㊙","работа":"🈺","недоступно":"🈵","черный квадратик":"▪","белый квадратик":"▫","белый квадрат":"◻","черный квадрат":"◼","небольшой белый квадрат":"◽","небольшой черный квадрат":"◾","большой черный квадрат":"⬛","большой белый квадрат":"⬜","большой оранжевый ромб":"🔶","большой голубой ромб":"🔷","небольшой оранжевый ромб":"🔸","небольшой голубой ромб":"🔹","треугольник вершиной вверх":"🔺","треугольник вершиной вниз":"🔻","алмаз":"💠","кнопка":"🔘","черная квадратная кнопка":"🔲","белая квадратная кнопка":"🔳","белый шар":"⚪","черный шар":"⚫","красный шар":"🔴","синий шар":"🔵","знак стоп":"🛑","тележка для покупок":"🛒","самокат":"🛴","мопед":"🛵","каноэ":"🛶","кнопка «ноль»":"0⃣","кнопка «один»":"1⃣","кнопка «два»":"2⃣","кнопка «три»":"3⃣","кнопка «четыре»":"4⃣","кнопка «пять»":"5⃣","кнопка «шесть»":"6⃣","кнопка «семь»":"7⃣","кнопка «восемь»":"8⃣","кнопка «девять»":"9⃣"},"keywords":{"женщина":["♀","🤦‍♀","🤰","🤷‍♀","🤸‍♀","🤹‍♀","🤼‍♀","🤽‍♀","🤾‍♀","👩‍⚕","👩‍🎓","👩‍🌾","👩‍🍳","👩‍🏫","👩‍🏭","👩‍🎨","👩‍🚒","👩‍✈","👩‍🚀","👩‍🎤","👩‍💻","👩‍🔬","👩‍💼","👩‍🔧","👩‍⚖","👵","👱‍♀","👮‍♀","👳‍♀","👷‍♀","💂‍♀","🕵‍♀","💆‍♀","💇‍♀","🙍‍♀","🙎‍♀","🙅‍♀","🙆‍♀","💁‍♀","🙋‍♀","🙇‍♀","🚶‍♀","🏃‍♀","💃","👫","👚","👠","👡","👒","🚣‍♀","🏌‍♀","🏄‍♀","🏊‍♀","⛹‍♀","🏋‍♀","🚴‍♀","🚵‍♀"],"символ":["♀","♂","🔱"],"венера":["♀"],"мужчина":["♂","🕺","🤦‍♂","🤵","🤷‍♂","🤸‍♂","🤹‍♂","🤼‍♂","🤽‍♂","🤾‍♂","👨‍⚕","👨‍🎓","👨‍🌾","👨‍🍳","👨‍🏫","👨‍🏭","👨‍🎨","👨‍🚒","👨‍✈","👨‍🚀","👨‍🎤","👨‍💻","👨‍🔬","👨‍💼","👨‍🔧","👨‍⚖","👴","👱‍♂","👮‍♂","👳‍♂","👷‍♂","💂‍♂","🕵‍♂","💆‍♂","💇‍♂","🙍‍♂","🙎‍♂","🙅‍♂","🙆‍♂","💁‍♂","🙋‍♂","🙇‍♂","🚶‍♂","🏃‍♂","👫","👞","🚣‍♂","🏌‍♂","🏄‍♂","🏊‍♂","⛹‍♂","🏋‍♂","🚴‍♂","🚵‍♂"],"марс":["♂"],"медицина":["⚕","💉"],"асклепий":["⚕"],"посох":["⚕"],"танец":["🕺","👯","👯‍♀","👯‍♂"],"черное":["🖤","🗨"],"сердце":["🖤","😍","💑","❤","💓","💔","💖","💗","💙","💚","💛","💜","💝","💟","❣"],"злоба":["🖤"],"жест":["🤙","🙅","🙅‍♀","🙅‍♂","🙆","🙆‍♀","🙆‍♂","💁‍♀","💁‍♂","🙋","🙋‍♀","🙋‍♂","🙌","🖕","👇","🖖","🤘","👌","👏"],"позвони":["🤙"],"рука":["🤙","🤦","🤦‍♀","🤦‍♂","🙋","☝","🖕","✌","🖖","🤘","🖐","✊","✋","👊","👌","👍","👎","👋","👏","👐","✍","⌚"],"поднятая":["🤚"],"ладонь":["🤚","🖐"],"кулак":["🤛","🤜","✊"],"влево":["🤛","◀","⏪","⏮"],"вправо":["🤜","🗯","▶","⏩","⏭"],"рукопожатие":["🤝"],"договорились":["🤝"],"встреча":["🤝"],"удача":["🤞","🍀"],"скрещенные пыльцы":["🤞"],"ковбой":["🤠"],"шляпа":["🤠","🎩"],"клоун":["🤡"],"лицо":["🤡","🤢","🤤","🤥","🤦","🤧","😀","😁","😂","😃","😄","😅","😉","😊","😋","😎","😍","😗","😙","😚","☺","🙂","🤗","😇","🤔","😐","😑","😶","🙄","😏","😣","😥","😮","🤐","😯","😪","😫","😴","😌","🤓","😛","😜","😝","☹","🙁","😒","😓","😔","😕","😖","🙃","😷","🤒","🤕","🤑","😲","😞","😟","😤","😢","😭","😦","😧","😨","😩","😬","😰","😱","😳","😵","😡","😠","😈","👿","👹","👺","👻","👾","🤖","💩","👮","👷","⛑","💆","💆‍♀","💆‍♂","🙍","👤","👥","🌚","🌛","🌜","🌝","🌞","🌬","🗿"],"тошнит":["🤢"],"болезнь":["🤢","😓","🤒"],"катается":["🤣"],"хохот":["🤣"],"слюни":["🤤"],"ложь":["🤥"],"пиноккио":["🤥"],"фейспалм":["🤦","🤦‍♀","🤦‍♂"],"не могу поверить":["🤦"],"раздражение":["🤦","🤦‍♀","🤦‍♂"],"нет слов":["🤦","🤦‍♀","🤦‍♂"],"чихает":["🤧"],"беременная":["🤰"],"селфи":["🤳"],"снимок":["🤳"],"телефон":["🤳","📞","📶","📳","📴"],"принц":["🤴"],"жених":["🤵"],"смокинг":["🤵"],"рождество":["🤶"],"миссис клаус":["🤶"],"снегурочка":["🤶"],"пожимает плечами":["🤷","🤷‍♀","🤷‍♂"],"сомнение":["🤷"],"равнодушие":["🤷","🤷‍♀","🤷‍♂","😐"],"не знаю":["🤷","🤷‍♀","🤷‍♂"],"все равно":["🤷‍♀","🤷‍♂"],"колесо":["🤸","🎡","⚙","☸"],"гимнастика":["🤸","🤸‍♀","🤸‍♂"],"акробатика":["🤸","🤸‍♀","🤸‍♂"],"человек":["🤸","🤺","🤼","🤽","🤾","👨","👩","👴","👵","👱","👮","👲","🙍","🙎","🙅","🙋","🙇","👤","🚶","🏃","💃","🕴","👂","👃","👣","👀","👁","🛌","🛀","☃","⛄","⛷"],"спорт":["🤸","🤸‍♀","🤸‍♂","🤺","🤼","🤼‍♀","🤼‍♂","🤽","🤽‍♀","🤽‍♂","🤾","🤾‍♀","🤾‍♂","🥅","🥊","🥋","🏃‍♀","🏃‍♂","👟","🚣‍♀","🚣‍♂","🏌‍♀","🏌‍♂","🎽","🎿","🏄‍♀","🏄‍♂","🏊‍♀","🏊‍♂","⛹‍♀","⛹‍♂","🏋‍♀","🏋‍♂","🚴‍♀","🚴‍♂","🚵‍♀","🚵‍♂","🏅","🏏","🏐","🏸"],"акробатический трюк":["🤸‍♀","🤸‍♂"],"жонглер":["🤹","🤹‍♀","🤹‍♂"],"многозадачность":["🤹","🤹‍♀","🤹‍♂"],"равновесие":["🤹"],"навык":["🤹"],"фехтовальщик":["🤺"],"фехтование":["🤺"],"рапира":["🤺"],"борцы":["🤼"],"борьба":["🤼","🤼‍♀","🤼‍♂"],"поло":["🤽"],"вода":["🤽","🐳","🐬","⛲","🚣","🚤","🛥","🚿","🛀","🛁","☂","🏄","🏊","🚰"],"водное поло":["🤽‍♀","🤽‍♂"],"гандбол":["🤾","🤾‍♀","🤾‍♂"],"мяч":["🤾","⚽","⚾","🏀","🏈","🎾","⛹","⛹‍♀","⛹‍♂","🏏","🏐","🏓"],"увядший":["🥀"],"цветок":["🥀","🌸","💮","🌹","🌺","🌻","🌼","🌷"],"барабан":["🥁"],"палочки":["🥁"],"музыка":["🥁","🎼","🎵","🎶","🎙","🎚","🎛","🎧","🎷","🎸","🎹","🎺","🎻"],"звон":["🥂","🎐"],"бокал":["🥂","🍷","🍸"],"напиток":["🥂","🥛","☕","🍸"],"праздник":["🥂","🎆","🎇","🎈","🎎","🎑","🎀"],"стакан":["🥃","🥛","🍿"],"вино":["🥃","🍾","🍷"],"виски":["🥃"],"ликер":["🥃"],"коктейль":["🥃"],"ложка":["🥄"],"столовый прибор":["🥄"],"гол":["🥅"],"ворота":["🥅"],"первое место":["🥇"],"золото":["🥇"],"медаль":["🥇","🥈","🥉","🎖","🏅"],"второе место":["🥈"],"серебро":["🥈"],"третье место":["🥉"],"бронза":["🥉"],"бокс":["🥊"],"перчатка":["🥊"],"дзюдо":["🥋"],"карате":["🥋"],"тхэквондо":["🥋"],"боевые искусства":["🥋"],"спортивная форма":["🥋"],"круассан":["🥐"],"рогалик":["🥐"],"французский":["🥐","🥖"],"еда":["🥐","🥑","🥒","🥓","🥔","🥕","🥖","🥗","🥘","🥙","🥚","🥜","🥝","🥞","🦐","🦑","😋"],"хлеб":["🥐","🥖"],"авокадо":["🥑"],"фрукт":["🥑","🥝","🍇","🍋","🍌","🍍","🍐","🍑"],"огурец":["🥒"],"соленье":["🥒"],"овощ":["🥒","🥔","🥕","🥜","🍅","🍆"],"бекон":["🥓"],"мясо":["🥓","🍖"],"картофель":["🥔","🍟","🍠"],"морковь":["🥕"],"багет":["🥖"],"овощи":["🥗"],"салат":["🥗"],"паэлья":["🥘"],"рагу":["🥘"],"сковорода":["🥘","🍳"],"шаверма":["🥙"],"фалафель":["🥙"],"кебаб":["🥙"],"лаваш":["🥙"],"яйцо":["🥚","🐣","🐥"],"молоко":["🥛","🍼","🌌"],"арахис":["🥜"],"орех":["🥜"],"киви":["🥝"],"блины":["🥞"],"орел":["🦅"],"птица":["🦅","🦆","🦉","🦃","🐔","🐓"],"утка":["🦆"],"летучая":["🦇"],"мышь":["🦇","🐭","🖱"],"вампир":["🦇"],"животное":["🦇","🦊","🦌","🦍","🦏","🐵","🐒","🐶","🐩","🐺","🐱","🐈","🦁","🐯","🐅","🐆","🐎","🦄","🐮","🐂","🐃","🐄","🐷","🐖","🐗","🐑","🐐","🐘","🐰","🐇","🐿","🐨","🐼","🐾"],"акула":["🦈"],"рыба":["🦈","🐠","🐡","🍥"],"сова":["🦉"],"мудрость":["🦉"],"мордочка":["🦊"],"лисица":["🦊"],"бабочка":["🦋"],"насекомое":["🦋","🐜","🐝","🕷"],"красота":["🦋","💃"],"олень":["🦌"],"горилла":["🦍"],"ящерица":["🦎"],"рептилия":["🦎"],"носорог":["🦏"],"креветка":["🦐","🍤"],"маленькая":["🦐","👧"],"морепродукты":["🦐"],"кальмар":["🦑"],"моллюск":["🦑"],"улыбка":["😀","😁","😃","😄","😅","😆","😎","😙","☺","🙂","😈","😺","😸","😻","😼"],"радость":["😀","😂","😃","😄","😆","🙂","😹","💖"],"счастье":["😀","☺","😹","😻"],"глаза":["😁","😄","😅","😆","😊","😍","😙","😚","🙄","😸","😽","🙈","👓"],"зубы":["😁","😄","😬","😺","👄"],"смех":["😂","😆","💩"],"слезы":["😂","😢","😹","😿"],"рот":["😃","😶","😮","🤐","🤒","🤑","😦","😨","😰","🙊","👅"],"пот":["😅","😓","😰","💦","💧"],"холодный":["😅","😰"],"облегчение":["😅","😥"],"закрытые":["😆","😚"],"подмигивает":["😉"],"прищур":["😉"],"щеки":["😊","😳"],"приятно":["😋"],"пища":["😋"],"вкус":["😋"],"отлично":["😋","🙆","🙌"],"смак":["😋"],"очки":["😎","🤓","🕶"],"солнечные":["😎"],"солнцезащитные":["😎"],"защита":["😎","😷","👓","🕶","☔","🔏","🛡"],"круто":["😎"],"клево":["😎"],"свет":["😎","🚥","🚦","🌟","🎆","✨","🕯","💡","🔦","🏮"],"любовь":["😍","😘","😗","💏","💑","💘","💌","💐"],"чувства":["😍","💏","💑","💋","❤"],"поцелуй":["😘","😗","😙","😚","💋"],"целую":["😘"],"сердечко":["😘"],"воздушный":["😘"],"довольный":["☺"],"хорошо":["☺","🙂","🙋","👌","👍"],"объятие":["🤗"],"руки":["🤗","🙅","🙆","🙌","👫","👭","💅"],"сказка":["😇","😈","👺","👸","🐲","🐉"],"ангел":["😇","👼"],"святость":["😇"],"невинность":["😇"],"задумчивость":["🤔"],"размышления":["🤔","😔"],"пальцы":["🤔","✌","🤘","🖐","✊","✋","💅"],"ничего":["😐","😑"],"безразличие":["😑"],"эмоции":["😑"],"нет":["😑","😶"],"тихо":["😶","🔇"],"тишина":["😶","🔇"],"молчание":["😶","🤐","😯","🙊","🔇"],"пусто":["😶"],"заведенные":["🙄"],"скука":["🙄","😒"],"досада":["🙄"],"хитрый":["😏","😛"],"задумал":["😏"],"зажмурился":["😣"],"настойчивость":["😣"],"фу":["😥"],"разочарование":["😥","💔"],"прошло":["😥"],"удивление":["😮","😯","😲","😦","🙀"],"открытый":["😮","🔓"],"закрытый":["🤐","🔒","🔐"],"секрет":["🤐"],"сюрприз":["😯"],"неприятно":["😯"],"сон":["😪","😴","🛌"],"сонливость":["😪"],"усталость":["😪","😫","🙀"],"мало":["😪"],"спать":["😫"],"отдых":["😫","😴","🚙"],"работа":["😫"],"дрема":["😴"],"минуло":["😌"],"обошло":["😌"],"стороной":["😌"],"спокойствие":["😌"],"заучка":["🤓"],"всезнайка":["🤓"],"отличник":["🤓"],"язык":["😛","😜","😝"],"дразнит":["😛"],"подмигивание":["😜"],"розыгрыш":["😜"],"подтрунивание":["😜"],"отвращение":["😝"],"невкусно":["😝"],"тьфу":["😝"],"хмурый":["☹","🙁","😦","🙍"],"грусть":["☹","😢","😭"],"печаль":["☹","😢","😿"],"плохо":["☹","🙁","🤕","😧","👎","🆖"],"недовольный":["🙁","😒","😠","😾"],"тоска":["😒","😧"],"страх":["😓","😨","😱","👹","💀","👻","🤖"],"нервы":["😓"],"беспокойство":["😓","😟","😰"],"мысли":["😔","💬"],"стеснение":["😕"],"конфуз":["😕"],"тупик":["😖"],"толк":["😖"],"сбит":["😖"],"растерянность":["😖"],"перевернутое":["🙃"],"вверх":["🙃","🙌","☝","✋","👍","📈","🔼","⏫","🔺"],"ногами":["🙃"],"врач":["😷","👨‍⚕","👩‍⚕"],"маска":["😷"],"медик":["😷"],"больной":["😷"],"недуг":["🤒"],"лоб":["🤕"],"боль":["🤕","😧"],"прибыль":["🤑"],"жадный":["🤑"],"потрясение":["😲"],"фрустрация":["😞"],"недоволен":["😞"],"расстройство":["😟"],"пар":["😤","🍜","☕","♨"],"нос":["😤"],"гордый":["😤"],"победа":["😤","🙌","✌","🏅"],"достижение":["😤","🏅"],"плач":["😭","😿"],"рев":["😭"],"всхлипы":["😭"],"громко":["😭"],"открыт":["😦","😰","📬","📭"],"муки":["😧"],"страдание":["😧"],"испуг":["😨","😱"],"жуть":["😨"],"устал":["😩"],"истощен":["😩"],"рожа":["😬"],"крик":["😱"],"вопль":["😱"],"визг":["😱"],"смущение":["😳"],"красный":["😳","😡","🌶","🏮","🚩","❓","❗","🔺","🔻","🔴"],"злой":["😡","😠","😾"],"сердитый":["😡","😠"],"рассерженный":["😡"],"фэнтези":["😈","👸","👼","🦄","🐲","🐉"],"рога":["😈"],"демон":["👿"],"фольклор":["👿","👺"],"мифология":["👿","👹"],"сказки":["👿","👻"],"существо":["👿","👹","👺","👻","👽"],"вредное":["👿"],"монстр":["👹","👺","🤖"],"япония":["👺","👘","🍙","🍣","🍶","🏣","🏯","🗾","🎋","🎌","🎍","🏮","💴","〽","🈁","🈂","🈷","🈶","🈯","🉐","🈹","🈚","🈲"],"смерть":["💀","☠","⚰","⚱"],"опасность":["💀","☠","👊","💣","🐍","⚡","🏍","☢","☣"],"голова":["💀","🗣","👑","🐤","🐦","🐧","🗿"],"кости":["☠"],"череп":["☠"],"пришелец":["👽","👾"],"фантастика":["👽"],"космос":["👽","👾","👨‍🚀","👩‍🚀","🌌","🚀","🛰","☄"],"чужой":["👽","👾"],"нло":["👾"],"фнтастика":["👾"],"фекалии":["💩"],"шутка":["💩"],"кот":["😺","😸","😹","😻","😼","😽","🙀","😿","😾","🐈"],"котик":["😺","😸","😹","😻","😼","😽","🙀","😿","😾","🐈"],"кошечка":["😺","😸","😹","😻","😼","😽","🙀","😿","😾","🐈"],"морда":["😺","😸","😻","😿","😾","🐵","🐶","🐺","🐱","🐯","🐴","🐮","🐷","🐖","🐭","🐹","🐰","🐻","🐼","🐸","🐲","🐉"],"морды":["😹","😽","🙀"],"сердечки":["😻"],"ухмылка":["😼"],"хитрость":["😼"],"губы":["😽","👄","💄"],"обезьяна":["🙈","🙉","🙊","🐵"],"нельзя":["🙈","🙉","🙅","🚫","🚳","🚭","🚯","🚱","🔞"],"запрещено":["🙈","🙉","🙊","🙅","⛔","🚫","🚳","🚭","🚯","🚱"],"зрение":["🙈"],"слух":["🙉"],"лапы":["🙉","🙊","🐾"],"уши":["🙉","👯"],"закрыт":["🙊","📫","📪"],"ребенок":["👦","👶","👪"],"дитя":["👦","👧","👶","👼"],"малышка":["👧"],"усы":["👨"],"взрослый":["👨"],"доктор":["👨‍⚕","👩‍⚕"],"медбрат":["👨‍⚕"],"терапевт":["👨‍⚕"],"студент":["👨‍🎓"],"выпускник":["👨‍🎓"],"фермер":["👨‍🌾","👩‍🌾"],"садовник":["👨‍🌾","👩‍🌾"],"повар":["👨‍🍳","👩‍🍳"],"учитель":["👨‍🏫"],"преподаватель":["👨‍🏫","👩‍🏫"],"рабочий":["👨‍🏭","👩‍🏭","👷","👷‍♀","👷‍♂"],"завод":["👨‍🏭","👩‍🏭"],"промышленность":["👨‍🏭","👩‍🏭","🏭"],"художник":["👨‍🎨"],"кисти":["👨‍🎨","👩‍🎨"],"пожарный":["👨‍🚒","👩‍🚒"],"пилот":["👨‍✈","👩‍✈"],"космонавт":["👨‍🚀","👩‍🚀"],"пение":["👨‍🎤","👩‍🎤","🎙","🎤"],"рок":["👨‍🎤","👩‍🎤","🤘"],"рок-н-ролл":["👨‍🎤","👩‍🎤","🤘"],"развлечение":["👨‍🎤"],"звезда":["👨‍🎤","👩‍🎤","⭐","🌟","🌠","✨","✡","☪","✳","✴"],"программист":["👨‍💻","👩‍💻"],"технарь":["👨‍💻","👩‍💻"],"ноутбук":["👨‍💻","👩‍💻"],"разработчик":["👨‍💻","👩‍💻"],"биология":["👨‍🔬","👩‍🔬"],"химия":["👨‍🔬","👩‍🔬","⚗"],"наука":["👨‍🔬","👩‍🔬"],"офис":["👨‍💼","👩‍💼","🏢"],"бизнес":["👨‍💼","👩‍💼","🕴"],"менеджер":["👨‍💼","👩‍💼"],"белый воротничок":["👨‍💼","👩‍💼"],"механик":["👨‍🔧","👩‍🔧"],"сантехник":["👨‍🔧","👩‍🔧"],"судья":["👨‍⚖","👩‍⚖"],"закон":["👨‍⚖","👩‍⚖"],"волосы":["👩","👱","💈","🎀"],"длинные":["👩"],"взрослая":["👩"],"медсестра":["👩‍⚕"],"студентка":["👩‍🎓"],"выпускница":["👩‍🎓"],"учительница":["👩‍🏫"],"художница":["👩‍🎨"],"развлечения":["👩‍🎤"],"пожилой":["👴"],"старый":["👴","🗝"],"годы":["👴"],"пожилая":["👵"],"старая":["👵","🌘"],"маленький":["👶","🐤","🐥","🛩"],"карапуз":["👶"],"светлые":["👱"],"блондинка":["👱‍♀"],"блондин":["👱‍♂"],"полиция":["👮","👮‍♀","👮‍♂","🚓","🚔","🚨"],"охрана":["👮","💂","💂‍♀"],"полицейский":["👮‍♀","👮‍♂"],"китай":["👲","🉑","🈸","🈴","🈳","㊗","㊙","🈺","🈵"],"шапка":["👲"],"человек в тюрбане":["👳"],"тюрбан":["👳‍♀","👳‍♂"],"стройка":["👷"],"каска":["👷"],"инженер":["👷‍♀","👷‍♂"],"строительство":["👷‍♀","👷‍♂","🏗"],"спасатель":["⛑"],"крест":["⛑","✝","☦"],"шлем":["⛑"],"головной убор":["⛑"],"притча":["👸"],"королевство":["👸"],"гвардия":["💂","💂‍♀","💂‍♂"],"солдат":["💂"],"охрара":["💂‍♂"],"почетный караул":["💂‍♂"],"детектив":["🕵","🕵‍♀","🕵‍♂"],"шпион":["🕵","🕵‍♂"],"ищейка":["🕵"],"шпионка":["🕵‍♀"],"расследование":["🕵‍♀","🕵‍♂"],"сыщик":["🕵‍♀","🕵‍♂"],"новый год":["🎅","🎄"],"крылья":["👼","🦃","✈","🛩","💸"],"лик":["👼"],"нимб":["👼"],"кролик":["👯","🐰"],"девушка":["👯"],"женщины":["👯‍♀","👭","🚺"],"заячьи уши":["👯‍♀","👯‍♂"],"вечеринка":["👯‍♀","👯‍♂","🎉","🎊"],"кордебалет":["👯‍♀","👯‍♂"],"мужчины":["👯‍♂","👬","🚹"],"спа":["💆"],"процедура":["💆"],"массаж":["💆","💆‍♀","💆‍♂"],"салон":["💆","💇","💈"],"парикмахер":["💇","💇‍♀","💇‍♂"],"ножницы":["💇","💇‍♀","💇‍♂"],"прическа":["💇"],"стрижка":["💇‍♀","💇‍♂","💈"],"свадьба":["👰","💍"],"расстроен":["🙍"],"хмурится":["🙍‍♀","🙍‍♂"],"сердится":["🙍‍♀","🙍‍♂"],"недовольство":["🙎"],"обида":["🙎‍♀","🙎‍♂"],"расстроенная":["🙎‍♀"],"расстроенный":["🙎‍♂"],"против":["🙅‍♀","🙅‍♂","🆚"],"несогласие":["🙅‍♀","🙅‍♂"],"окей":["🙆","👌"],"ок":["🙆","👌"],"да":["🙆‍♀","🙆‍♂"],"согласие":["🙆‍♀","🙆‍♂"],"помощь":["💁","🚑"],"дерзость":["💁‍♀","💁‍♂"],"счастливый":["🙋"],"поднятая рука":["🙋‍♀","🙋‍♂"],"извинение":["🙇"],"прощение":["🙇"],"просьба":["🙇"],"поклон":["🙇‍♀","🙇‍♂"],"уважение":["🙇‍♀","🙇‍♂"],"класс":["🙌"],"молитва":["🙏","📿"],"силуэт":["🗣","👤","👥"],"речь":["🗣","🗨"],"бюст":["👤","👥"],"темный":["👤","👥","🏽","🏾","🏿"],"люди":["👥","💑"],"двое":["👥"],"дорога":["🚶","🚆","🚞","🚎","🛣","🚟","🚸"],"тротуар":["🚶"],"ходьба":["🚶‍♀","🚶‍♂"],"прогулка":["🚶‍♀","🚶‍♂"],"бег":["🏃","🏃‍♀","🏃‍♂","👟","🎽","🏑"],"марафон":["🏃","🏃‍♀","🏃‍♂"],"трусца":["🏃"],"танцы":["💃"],"движения":["💃"],"костюм":["🕴"],"полет":["🕴","🕊"],"пара":["💏","💑","👪","👫","👬","👭"],"секс":["💏","💑","👫","👬","👭","💋"],"романтика":["💏","💋"],"отец":["👪"],"мать":["👪"],"близнецы":["👬","♊"],"братья":["👬"],"двойняшки":["👬"],"сестры":["👭"],"кожа":["🏻","🏼","🏽","🏾","🏿"],"цвет":["🏻","🏼","🏽","🏾","🏿","🖍"],"оттенок":["🏻","🏼","🏽","🏾","🏿"],"светлый":["🏻","🏼"],"тело":["🏻","🏼","🏽","🏾","🏿","👂","👃","👀","👁"],"мышцы":["💪"],"указательный":["👈","👉","☝","👆","👇"],"палец":["👈","👉","☝","👆","🖕","👇","👍","👎"],"налево":["👈"],"направо":["👉"],"направление":["☝","⬆","↗","➡","↘","⬇","↙","⬅","↖"],"наверх":["👆"],"средний":["🖕"],"триумф":["✌"],"спок":["🖖"],"нимой":["🖖"],"приветствие":["🖖","👋"],"вулканский салют":["🖖"],"коза":["🤘"],"фанат":["🤘"],"раскрытая":["🖐"],"удар":["✊","👊","🏌","🔨"],"одобрение":["👍"],"вниз":["👎","📉","🔽","⏬","🔻"],"порицание":["👎"],"взмах":["👋"],"привет":["👋"],"хлопать":["👏"],"овация":["👏"],"движение":["👏","💋","🚸"],"врозь":["👐"],"открытые":["👐"],"ладони":["👐"],"письмо":["✍","💌","✉","✒","🖋"],"ручка":["✍","🎛","✒","🖋","🖊","🔏"],"бумага":["✍","📠","🖨","📜","🗞","📋","📌","📍"],"ногти":["💅"],"лак":["💅"],"маникюр":["💅"],"уход":["💅"],"кисть":["💅","🖌"],"след":["👣"],"нога":["👣"],"подошва":["👣"],"рельеф":["👣"],"два":["👀","💞","🕑","🕝","🎌","⚔","2⃣"],"зрачок":["👁"],"свидетель":["👁‍🗨"],"против преследования":["👁‍🗨"],"глаз":["👁‍🗨"],"розовый":["👅","💟"],"алые":["👄"],"красные":["👄"],"стрела":["💘"],"купидон":["💘"],"лук":["💘"],"красное":["❤"],"алое":["❤"],"бьется":["💓"],"розовое":["💓"],"разбитое":["💔"],"части":["💔"],"влюбленные":["💕"],"блеск":["💖"],"звездочки":["💖"],"размер":["💗"],"больше":["💗"],"биение":["💗"],"ритм":["💗"],"валентин":["💝"],"лента":["💝","🎋","🎗","🛄"],"перевязано":["💝"],"сердца":["💞"],"круги":["💞"],"вращение":["💞"],"квадрат":["💟","❎","❇","◻","◼","🔲","🔳"],"куб":["💟","⚗"],"белое":["💟","🍧"],"восклицание":["❣","‼","⁉","❕","❗"],"препинания":["❣"],"знак":["❣","🦁","🐂","🐏","🐐","🐟","🦀","🦂","🚏","🏹","✅","〽","‼","⁉","❓","❔","❕","❗","〰","♈","♉","♊","♋","♌","♍","♎","♏","♐","♑","♒","♓","⛎","🛑"],"записка":["💌"],"тайна":["💌"],"почта":["💌","🏣","📯","📤","📥","📫","📪","📬","📭","📮"],"храп":["💤"],"злость":["💢"],"ярость":["💢","🗯"],"гнев":["💢","🗯"],"черная":["💣","🕳","🔲"],"взрыв":["💣"],"столкновение":["💥"],"облачко пыли":["💨"],"головокружение":["💫"],"облачко":["🗨","🗯","💭","🌤"],"слева":["🗨"],"мнение":["🗨"],"негатив":["🗯"],"отверстие":["🕳"],"пропасть":["🕳"],"одежда":["👓","👔","👕","👗","👘","👚","🎀","🎖"],"аксессуар":["👓","🕶","👛"],"темные":["🕶"],"рубашка":["👔","👕"],"узел":["👔"],"завязывать":["👔"],"рукава":["👕"],"короткие":["👕"],"брюки":["👖"],"женское":["👗"],"традиции":["👘"],"купальник":["👙"],"платье":["👚"],"сумочка":["👛"],"сумка":["👛"],"ручки":["👜"],"хозяйство":["👝","🚜"],"вещи":["👝"],"покупки":["🛍","🏪","🛒"],"магазины":["🛍"],"новое":["🛍"],"школа":["🎒"],"обувь":["👞","👟","👠","👡","👢"],"туфли":["👞"],"кеды":["👟"],"стиль":["👠","🏛"],"каблук":["👠","👡","👢"],"лето":["👡"],"холодно":["👢"],"высокая":["👢","🔊"],"монарх":["👑"],"царство":["👑"],"король":["👑"],"солома":["👒"],"бант":["👒"],"выпускной":["🎓"],"ожерелье":["📿"],"бусы":["📿"],"религия":["📿","⛪","🕋","🕌","🕍","🕉","✡","☸","☯","☦","🕎"],"косметика":["💄"],"макияж":["💄"],"кольцо":["💍"],"бриллиант":["💍"],"камень":["💎"],"цена":["💎"],"драгоценность":["💎"],"алмаз":["💎"],"собака":["🐶","🐩"],"щенок":["🐕"],"порода":["🐩"],"кошка":["🐱"],"зодиак":["🦁","🐂","🐏","🐐","🐟","🦀","🦂","🏹","♈","♉","♊","♋","♌","♍","♎","♏","♐","♑","♒","♓","⛎"],"тигр":["🐯"],"зверь":["🐯","🐅"],"лошадь":["🐴"],"конь":["🐴","🐎"],"рог":["🦄"],"корова":["🐮"],"свинья":["🐷","🐽"],"дикий":["🐗"],"овен":["🐏","♈"],"баран":["🐑"],"козерог":["🐐","♑"],"верблюд":["🐪","🐫"],"горб":["🐪","🐫"],"пустыня":["🐪","🐫","🏝"],"грызун":["🐭","🐁","🐀"],"домашнее":["🐰","🐇"],"белый":["🐇","🕊","💮","🎌","🏳","❔","❕","▫","◻","◽","⚪"],"медведь":["🐻","🐨"],"коала":["🐨"],"панда":["🐼"],"следы":["🐾"],"отпечатки":["🐾"],"цыпленок":["🐔","🐣","🐤"],"вылупился":["🐣"],"желтый":["🐣","🧀"],"курица":["🐥","🍗"],"мир":["🕊","🗺","☮"],"зеленая":["🐸","🐢"],"зеленый":["🐊"],"яд":["🐍"],"дракон":["🐲"],"кит":["🐳"],"брызги":["🐳"],"океан":["🐋","🐬","🌊"],"тропики":["🐠"],"экзотическая":["🐠"],"щупальца":["🐙"],"спираль":["🐚"],"рак":["🦀","♋"],"раковина":["🐌"],"жук":["🐛"],"желто-черная":["🐝"],"коровка":["🐞"],"божья":["🐞"],"красная":["🐞","🚨"],"паук":["🕸"],"сеть":["🕸"],"цветы":["💐"],"растение":["🏵","🌼","☘","🌱","🌳","🌵","🍈","🍉","🌶","🍄","🌰","🎍"],"Ирландия":["☘"],"вечнозеленое дерево":["🌲"],"дерево":["🌲","🌴","🍒","🎋"],"зеленое":["🌳","🌵"],"колючки":["🌵"],"рис":["🌾","🍘","🍙","🍛"],"трава":["🌿","🏑"],"клевер":["🍀"],"лист":["🍁","📃","📄","📋"],"листья":["🍂","🍃"],"сок":["🍇"],"апельсин":["🍊"],"яблоко":["🍎","🍏"],"кустарник":["🍒"],"плоды":["🍒"],"ягода":["🍓"],"кукуруза":["🌽","🍿"],"острый":["🌶","🗡"],"перец":["🌶"],"съедобный":["🍄"],"буханка":["🍞"],"батон":["🍞"],"уголок":["🧀"],"дырки":["🧀"],"кость":["🍖"],"фастфуд":["🍔","🍟"],"картошка":["🍟"],"фри":["🍟"],"кусок":["🍕"],"сыр":["🍕"],"тесто":["🍕","🌭"],"сосиска":["🌭"],"мексика":["🌮","🌯"],"кухня":["🌮","🍣"],"тортилья":["🌯"],"горячая еда":["🍲"],"бенто":["🍱"],"крекер":["🍘"],"шарик":["🍙","🖊","📍"],"вареный рис":["🍚"],"карри":["🍛"],"чашка":["🍜"],"миска":["🍜"],"макароны":["🍝"],"закуска":["🍢"],"сладости":["🍡"],"вафельный стаканчик":["🍦"],"мороженое":["🍧"],"сладкое":["🍧","🍨","🍪"],"холодное":["🍧","🗡","🔪"],"десерт":["🍧","🍨","🍮"],"пирожок":["🍩"],"выпечка":["🍪","🍰"],"день рождения":["🎂","🎁"],"торт":["🍰"],"крем":["🍰"],"сладкая":["🍰","🍬"],"плитка шоколада":["🍫"],"сладкий":["🍭","🍮","🍯"],"горшок":["🍯"],"бутылка":["🍼","🍾"],"соска":["🍼"],"дети":["🍼","🚼","🚸"],"чай":["☕"],"кофе":["☕"],"горячий":["☕"],"чашка чая":["🍵"],"саке":["🍶"],"водка":["🍶"],"горячее":["🍶"],"пробка":["🍾"],"игристое":["🍾"],"прохладительный напиток":["🍹"],"пиво":["🍺","🍻"],"пивные кружки":["🍻"],"вилка":["🍽"],"нож":["🍽","🗡"],"прибор":["🍽","🔬","🔭","⚖"],"стол":["🍽","🏓","🚼"],"значок ресторана":["🍴"],"сосуд":["🏺","⚗"],"земной шар":["🌍","🌎","🌏","🌐"],"карта":["🗺","🗾","💳"],"гора":["🏔","🗻"],"снег":["🏔","❄","☃","⛄","🎿","🏂"],"вершина":["🏔"],"пик":["⛰"],"извержение вулкана":["🌋"],"лагерь":["🏕"],"палатка":["🏕"],"пляж":["🏖"],"зонт":["🏖","☔","⛱"],"море":["🏖","🚣","🌊"],"песок":["🏜","⌛"],"необитаемый":["🏝"],"парк":["🏞"],"заповедник":["🏞"],"чаша":["🏟"],"матч":["🏟"],"здание":["🏛","🏠","⛪","🕌","🕍","🏢","🏤","🏥","🏦","🏨","🏩","🏪","🏫","🏯"],"классический":["🏛"],"кран":["🏗"],"здания":["🏘"],"много":["🏘","📚","💰"],"пейзаж":["🏙","🖼"],"городской":["🏙"],"темно":["🏙","🔅"],"вечер":["🏙"],"ночь":["🏙","🌃","🌉"],"дом":["🏚","🏡"],"заброшенный":["🏚"],"упадок":["🏚"],"крыша":["🏠","🏡"],"стены":["🏠","🏡"],"сад":["🏡"],"христианство":["⛪"],"ислам":["🕋","🕌","☪"],"иудаизм":["🕍"],"евреи":["🕍"],"храм":["⛩"],"дзиндзя":["⛩"],"синтоизм":["⛩"],"бизнес-центр":["🏢"],"европа":["🏤"],"врачи":["🏥","🚑"],"больные":["🏥"],"отель":["🏨","🛎","🛌","🛏"],"гостиница":["🏩","🛎","🛌","🛏"],"свидания":["🏩"],"на час":["🏩"],"магазин":["🏪","🏬"],"учебное":["🏫"],"обучение":["🏫"],"школьники":["🏫"],"фабрика":["🏭"],"предприятие":["🏭"],"замок":["🏯","🔒","🔓","🔏","🔐","🗝"],"башни":["🏰"],"венчание":["💒"],"токио":["🗼"],"башня":["🗼"],"статуя":["🗽","🗿"],"нью-йорк":["🗽"],"свобода":["🗽"],"кемпинг":["⛺"],"туманно":["🌁"],"звезды":["🌃"],"солнце":["🌄","🌅","🌆","🌇","⛅","🌤","🌥","🌦","⛱"],"восход":["🌄"],"мост":["🌉"],"источники":["♨"],"горячие":["♨"],"поток":["♨"],"путь":["🌌"],"лошадка":["🎠"],"обозрение":["🎡"],"чертово":["🎡"],"горки":["🎢"],"американские":["🎢"],"цирк":["🎪"],"театр":["🎭","🎫"],"рама":["🖼"],"краски":["🎨"],"азартные игры":["🎰"],"поезд":["🚂","🚃","🚄","🚅","🚇"],"трамвай":["🚃","🚈","🚋","🚡"],"транспорт":["🚃","🚆","🚈","🚊","🚞","🚌","🚎","🚕","🚖","🚚","🚛","⛴","🎟"],"железная":["🚆","🚞","🚟"],"подземка":["🚇"],"станция":["🚇","🚉","⛽"],"электричка":["🚈"],"вокзал":["🚉"],"рельсы":["🚉","🚊","🚝","🚋","🛤"],"легкое":["🚝"],"метро":["🚝"],"горы":["🚞","🚠","🚵"],"вагон":["🚋","🚟","🚠"],"электричество":["🚋","🚎","⚡","🔌"],"автобус":["🚍","🚏"],"спереди":["🚍","🚖"],"лобовое":["🚍"],"стекло":["🚍","🔍","🔎"],"остановка":["🚏","⏹"],"газель":["🚐"],"маршрутка":["🚐"],"скорая":["🚑"],"машина":["🚑","🚕","🚖","🚗","🚘"],"больница":["🚑"],"пожарные":["🚒"],"такси":["🚖"],"фургон":["🚙"],"жилой":["🚙"],"грузовой":["🚚"],"кузов":["🚚"],"перевозка":["🚛"],"сельское":["🚜"],"колеса":["🚲"],"руль":["🚲"],"бензин":["⛽"],"топливо":["⛽"],"дизель":["⛽"],"автострада":["🛣"],"разметка":["🛣"],"светофор":["🚥","🚦"],"заграждение":["🚧"],"барьер":["🚧"],"препятствие":["🚧"],"корабль":["⚓"],"лодка":["⛵","🚣‍♀","🚣‍♂","🛥","🛶"],"весла":["🚣"],"гребля":["🚣‍♀","🚣‍♂"],"мотор":["🚤","🛥"],"двигатель":["🚤","🛥"],"судно":["🛳","🚢"],"лайнер":["🛳"],"пассажиры":["🛳"],"перевозки":["🛳","⛴","🚢","✈","🛩"],"круиз":["🛳"],"пароход":["🚢"],"воздух":["✈","🛩","🚁","🎈"],"самолет":["🛩","🛫","🛬"],"регистрация":["🛫"],"посадка":["🛫"],"отправление":["🛫"],"прибытие":["🛬"],"садится":["🛬"],"стул":["💺"],"место":["💺","🏅","🛐"],"лопасти":["🚁"],"винт":["🚁","🔩"],"подвесная":["🚟"],"тросы":["🚠"],"звук":["🛎","🔇","🔈","📢","🎵","🎙","🎛","🎤","🎧"],"портье":["🛎"],"проем":["🚪"],"закрытая":["🚪"],"кровать":["🛌"],"пустая":["🛏"],"диван":["🛋"],"лампа":["🛋","💡"],"торшер":["🛋"],"туалет":["🚽","🚹","🚺","🚻"],"бачок":["🚽"],"чистота":["🚿"],"ванна":["🛀"],"ванная":["🛀"],"часы":["⌛","⏳","⏲","🕰"],"время":["⌛","⏰"],"песочные":["⏳"],"запястье":["⌚"],"сигнал":["⏰","⏲","📻"],"звенит":["⏰"],"точность":["⏱"],"стрелки":["⏱"],"кнопка":["⏱","📌","📍","❎","🔂","▶","⏩","⏭","⏯","◀","⏪","⏮","🔼","⏫","🔽","⏬","⏸","⏹","⏺","⏏","#⃣","*⃣","🔟","🔲","🔳","0⃣","1⃣","2⃣","3⃣","4⃣","5⃣","6⃣","7⃣","8⃣","9⃣"],"отсчет":["⏲"],"камин":["🕰"],"украшение":["🕰"],"полночь":["🕛"],"полдень":["🕛"],"двенадцать":["🕛","🕧"],"тридцать":["🕧","🕞","🕟","🕠","🕡","🕢","🕣","🕤","🕥","🕦"],"половина":["🕧","🕜","🕞","🕟","🕠","🕡","🕢","🕣","🕤","🕥","🕦"],"первого":["🕧"],"час":["🕐","🕜","🕑","🕝","🕒","🕞","🕓","🕟","🕔","🕠","🕕","🕡","🕖","🕢","🕗","🕣","🕘","🕤","🕙","🕥","🕚","🕦"],"один":["🕐","1⃣"],"дня":["🕐"],"ночи":["🕐"],"ровно":["🕑","🕒","🕓","🕔","🕕","🕖","🕗","🕘","🕙","🕚"],"три":["🕝","🕒","3⃣"],"четыре":["🕞","🕓","🕟","4⃣"],"пять":["🕔","🕠","5⃣"],"шесть":["🕕","🕡","6⃣"],"семь":["🕖","🕢","7⃣"],"восемь":["🕗","🕣","8⃣"],"девять":["🕘","🕤","9⃣"],"десять":["🕙","🕥","🔟"],"одиннадцать":["🕚","🕦"],"луна":["🌑","🌓","🌔","🌕","🌖","🌗","🌘","🌚","🌛","🌜","🌝","🎑"],"месяц":["🌒","🌙"],"небо":["🌓","🌔","🌕","🌖","🌗","🌘","🌛","🌜","🌞","🌠","☁","❄","☄"],"четверть":["🌓","🌗","🌛","🌜"],"прибывающая":["🌔"],"полная":["🌕"],"убывающая":["🌖"],"темная":["🌚"],"градусник":["🌡"],"температура":["🌡"],"измерение":["🌡","📏","📐"],"лучи":["☀"],"планета":["☀"],"жарко":["☀"],"погода":["☀","☂","☔"],"круглая":["🌝","🔘"],"солнцу":["🌞"],"сияние":["🌟"],"падающая":["🌠"],"желание":["🌠"],"облачно":["⛅"],"облако":["⛈","🌥","🌩"],"туча":["⛈","🌤","🌥","🌦","🌧","🌨","🌩"],"дождь":["⛈","🌈","🌂","☂","⛱"],"гром":["⛈","🌩"],"молния":["⛈","⚡"],"осадки":["🌦","🌧","🌨","🌈"],"смерч":["🌪"],"вихрь":["🌪"],"катастрофа":["🌪"],"туман":["🌫"],"низкая":["🌫","🔉"],"видимость":["🌫"],"ветер":["🌬","🎐"],"дует":["🌬"],"завихрение":["🌀"],"цвета":["🌈"],"капли":["☔","🎧"],"сухость":["☔"],"напряжение":["⚡"],"рисунок":["❄"],"холод":["❄"],"фигура":["☃","⛄","⚜","▪","▫","◻","◼","◽","◾","⬛","⬜","🔶","🔷","🔸","🔹","🔺","🔻","⚪","⚫","🔴","🔵"],"пламя":["🔥"],"Хэллоуин":["🎃"],"пиротехника":["🎆"],"шум":["🎆"],"огонь":["🎇","🕯"],"искры":["🎇","✨"],"веревочка":["🎈"],"традиция":["🎋"],"флаг":["🎌","📫","📪","📬","📭","🏳","🏳‍🌈","🏴","🚩"],"кукла":["🎎"],"две":["🎎","🖇","➿"],"фестиваль":["🎎"],"палочка":["🎏"],"рыбки":["🎏"],"бубенчик":["🎐"],"церемония":["🎑"],"заслуги":["🎖"],"война":["🎖"],"память":["🎗"],"кино":["🎞","🎥","🎬","📽"],"кинематограф":["🎞"],"кадр":["🎞"],"фильм":["🎞","🎥","🎦"],"билет":["🎟"],"квиток":["🎟"],"пропуск":["🎟"],"услуги":["🎟"],"концерт":["🎫"],"вход":["🎫"],"этикетка":["🏷"],"ярлык":["🏷"],"сведения":["🏷","🗃","🗄"],"футбол":["⚽","🏈"],"бейсбол":["⚾"],"игра":["🏀","🏈","🏉","🎳","⛹","🏏","🏐","🏑","🏒","🏸","🕹","🎲","♠","♥","♦","♣","🀄","🎴"],"американский":["🏈"],"теннис":["🎾","🏓"],"ракетка":["🎾","🏓","🏸"],"шар восьмерка":["🎱"],"флажок":["⛳"],"лунка":["⛳"],"поле":["⛳"],"игрок":["🏌"],"гольф":["🏌","🏌‍♀","🏌‍♂"],"клюшка":["🏌","🏑","🏒"],"катание":["⛸"],"лезвие":["⛸"],"скорость":["⛸","⛷","🏎","🏍"],"ботинок":["⛸"],"рыбалка":["🎣"],"футболка":["🎽"],"атлетика":["🎽","🏋"],"трасса":["🎿"],"спортсмен":["⛷","🏂","🚴"],"склон":["⛷","🏂"],"лыжи":["⛷"],"доска":["🏄","🎯"],"волны":["🏄"],"серфинг":["🏄‍♀","🏄‍♂"],"лошади":["🏇"],"жокей":["🏇"],"бега":["🏇"],"пловец":["🏊"],"бассейн":["🏊"],"плаванье":["🏊‍♀","🏊‍♂"],"баскетбол":["⛹","⛹‍♀","⛹‍♂"],"ведение":["⛹"],"атлет":["🏋"],"тяжелая":["🏋"],"штанга":["🏋"],"вес":["🏋","⚖"],"помост":["🏋"],"тяжелая атлетика":["🏋‍♀","🏋‍♂"],"пауэрлифтинг":["🏋‍♀","🏋‍♂"],"велосипед":["🚴","🚴‍♀","🚴‍♂","🚵","🚵‍♀","🚵‍♂","🚳"],"педали":["🚴","🚵"],"соревнование":["🚵"],"горный велосипед":["🚵‍♀","🚵‍♂"],"автомобиль":["🏎"],"гонки":["🏎","🏍"],"приз":["🏆"],"бита":["🏏"],"хоккей":["🏑","🏒"],"лед":["🏒"],"шайба":["🏒"],"пинг-понг":["🏓"],"волан":["🏸"],"попадание":["🎯"],"дротик":["🎯"],"дартс":["🎯"],"компьютерные игры":["🎮"],"компьютер":["🕹","💻"],"видео":["🕹","📽"],"масть":["♠","♥","♦","♣"],"карты":["♠","♥","♦","♣"],"Джокер":["🃏"],"громкость":["🔇","🔉","🔊"],"динамик":["🔉","🔊"],"уровень":["🔉","🔊","🎚","🎛","🔅","🔆"],"рупор":["📢"],"объявление":["📢"],"обращение":["📢","📣"],"громкоговоритель":["📣"],"рожок":["📯"],"будильник":["🔔"],"будильник отключен":["🔕"],"микрофон":["🎙"],"вокал":["🎙"],"регулятор":["🎛"],"караоке":["🎤"],"вкладыши":["🎧"],"приемник":["📻"],"передача":["📻"],"смартфон":["📱","📳","📴"],"айфон":["📱","📳","📴"],"мобильный телефон":["📲","📵"],"линия":["☎"],"трубка":["☎"],"аппарат":["☎"],"сообщение":["📟","📠","✉","📧","📨","📩"],"строка":["📟"],"экран":["📟"],"батарея":["🔋"],"аккумулятор":["🔋"],"штекер":["🔌"],"розетка":["🔌"],"портативный":["💻"],"настольный":["🖥"],"печать":["🖨","📰","🛂"],"периферия":["⌨","🖱"],"клавиши":["⌨"],"устройство":["🖱"],"кнопки":["🖱"],"шар":["🖲","🔮","⚪","⚫","🔴","🔵"],"диск":["💽","📀"],"носитель":["💾"],"компакт-диск":["💿"],"формат":["📀"],"камера":["🎥","🎦"],"проектор":["📽"],"показ":["📽"],"телевидение":["📺"],"фотокамера":["📷","📸"],"съемка":["📷","📸","📹"],"фотоаппарат":["📸"],"вспышка":["📸"],"запись":["📹","📒","📝"],"кассета":["📼"],"пленка":["📼"],"увеличительное":["🔍","🔎"],"лупа":["🔍"],"инструмент":["🔬","🔭","✂","🔨","⛏","⚒","🛠","🔧","🔩"],"антенна":["📡","📶"],"свечка":["🕯"],"тепло":["🕯"],"фонарь":["🏮"],"блокнот":["📔","📓","🗒"],"записная":["📔"],"книжка":["📔"],"красивая":["📔"],"обложка":["📔"],"книга":["📕","📖","📗","📘","📙"],"разные":["📚"],"записная книжка":["📓"],"учет":["📒","🗃"],"делопроизводство":["📒"],"страница":["📃"],"документ":["📃"],"вертикально":["📄"],"издание":["📰"],"новости":["📰","🗞"],"известия":["📰"],"газета":["🗞"],"свернутая":["🗞"],"отметки":["📑"],"наклейки":["📑"],"отметка":["🔖"],"мешок":["💰"],"деньги":["💰","💴","💵","💶","💷","💸","💳","💹","🏧","💱","💲"],"банкноты":["💰"],"валюта":["💴","💵","💶","💷","💹"],"иена":["💴"],"банкнота":["💴","💵","💶","💷","💸"],"доллар":["💵"],"сша":["💵"],"канада":["💵"],"австралия":["💵"],"евро":["💶"],"евросоюз":["💶"],"фунт":["💷"],"стерлингов":["💷"],"великобритания":["💷"],"летающая":["💸"],"банковская":["💳"],"кредитная":["💳"],"рынок":["💹"],"рост":["💹","📈"],"тенденция":["💹","📈","📉"],"электронное":["✉","📨","📩"],"входящее":["📨"],"конверт":["📨"],"получение":["📨"],"исходящее":["📩"],"отправка":["📩"],"стрелка":["📩"],"ящик":["📤","📥","📫","📪","📬","📭","📮","🗃"],"почтовый":["📤","📥","📫","📪","📬","📭","📮"],"отправленная":["📤"],"полученная":["📥"],"коробка":["📦"],"поднятый":["📫","📬"],"опущенный":["📪","📭"],"корреспонденция":["📮"],"урна":["🗳","⚱","🚮"],"выборы":["🗳"],"бюллетень":["🗳","☑"],"грифель":["✏"],"перьевая":["🖋"],"чернила":["🖋","🖊"],"шариковая":["🖊"],"рисование":["🖌"],"щетина":["🖌"],"выделение":["🖍"],"дипломат":["💼"],"документы":["💼","📁","📂"],"бумаги":["💼","📁","📂","📎","🖇","🗑"],"файл":["📁"],"папка":["📂"],"открытая":["📂"],"карточки":["🗂","🗃"],"разделители":["🗂"],"оглавление":["🗂"],"календарь":["📅","📆","🗓"],"даты":["📅"],"числа":["📅"],"отрывной":["📆"],"листы":["📆","🗒","🗓"],"откидной":["🗒"],"пружина":["🗒","🗓"],"перекидной":["🗓"],"картотека":["📇"],"указатели":["📇"],"диаграмма":["📈","📉","📊"],"схема":["📈","📉"],"падение":["📉"],"планшет":["📋"],"зажим":["📋","🗜"],"канцелярия":["📎","🖇"],"прямая":["📏"],"линейка":["📐"],"треугольная":["📐"],"резать":["✂"],"файлы":["🗃"],"шкаф":["🗄"],"архив":["🗄"],"данные":["🗄"],"корзина":["🗑"],"мусор":["🗑","🚮"],"затвор":["🔒","🔓"],"конфиденциальность":["🔏"],"ключ":["🔐","🗝"],"безопасность":["🔐","🛡"],"пароль":["🔑"],"старинный":["🗝"],"молот":["🔨","🛠"],"шахта":["⛏","⚒"],"кирка":["⚒"],"заечный ключ":["🛠"],"болт":["🔩"],"гайка":["🔩"],"шуруп":["🔩"],"деталь":["⚙"],"шестерня":["⚙"],"зубчатое":["⚙"],"тиски":["🗜"],"взвешивание":["⚖"],"правосудие":["⚖"],"справедливость":["⚖"],"связь":["🔗"],"связывание":["🔗"],"ссылка":["🔗"],"цепочка":["⛓"],"звенья":["⛓"],"наркотик":["💉","💊"],"укол":["💉"],"инъекция":["💉"],"препарат":["💉","💊"],"таблетка":["💊"],"лекарство":["💊"],"оружие":["🗡","🔪","⚔","🔫","🏹"],"кухонный":["🔪"],"мечи":["⚔"],"скрещенные":["⚔"],"револьвер":["🔫"],"огнестрельное":["🔫"],"снаряжение":["🛡"],"стрелы":["🏹"],"стрелец":["🏹","♐"],"формула 1":["🏁"],"реет":["🏳","🏴"],"радуга":["🏳‍🌈"],"черный":["🏴","▪","◼","◾","⬛","⬜","⚫"],"треугольный":["🚩"],"курение":["🚬","🚭"],"курить":["🚬"],"можно":["🚬"],"разрешено":["🚬"],"гибель":["⚰"],"погребение":["⚰"],"похороны":["⚰","⚱"],"останки":["⚱"],"пепел":["⚱"],"остров":["🗿"],"пасхи":["🗿"],"нефть":["🛢"],"емкость":["🛢"],"предсказание":["🔮"],"хрусталь":["🔮"],"магия":["🔮"],"волшебство":["🔮"],"банкомат":["🏧"],"терминал":["🏧"],"наличные":["🏧"],"выдача":["🏧"],"мусорить запрещено":["🚮"],"доступ":["♿"],"инвалид":["♿"],"условия":["♿"],"возможность":["♿"],"уборная":["🚹","🚺","🚾"],"кабинки":["🚹","🚺"],"младенцы":["🚼"],"пеленки":["🚼"],"общественный":["🚾"],"контроль":["🛂"],"паспортный":["🛂"],"проверка":["🛂","🛃"],"таможенник":["🛃"],"багаж":["🛃","🛄","🛅"],"потерянный":["🛅"],"кабинка":["🛅"],"предупреждение":["⚠"],"оповещение":["⚠"],"переход":["🚸","🚷"],"пешеход":["🚸","🚷"],"входа нет":["🚫"],"въезда нет":["🚳"],"мусорить":["🚯"],"воду не пить":["🚱"],"опасно":["🚱","🚷"],"вредно":["🚱"],"запрещен":["🚷"],"радиоактивность":["☢"],"биологическая":["☣"],"химическая":["☣"],"угроза":["☣"],"север":["⬆"],"стрелка вправо вверх":["↗"],"северо-восток":["↗"],"восток":["➡"],"стрелка вправо вниз":["↘"],"юго-восток":["↘"],"юг":["⬇"],"стрелка влево вниз":["↙"],"юго-запад":["↙"],"запад":["⬅"],"стрелка влево вверх":["↖"],"северо-запад":["↖"],"стрелка вверх вниз":["↕"],"двойная":["↕","↔","➿"],"стрелка влево вправо":["↔"],"стрелка вправо":["↩","⤴","⤵"],"поворот влево":["↩"],"стрелка влево":["↪"],"поворот вправо":["↪"],"поворот вверх":["⤴"],"поворот вниз":["⤵"],"замкнутые вертикальные стрелки":["🔃"],"круглые стрелки":["🔄"],"стрелка назад":["🔙"],"стрелка конец":["🔚"],"стрелка активно":["🔛"],"стрелка скоро":["🔜"],"стрелка вверх":["🔝"],"регилия":["🛐","✝"],"поклонение":["🛐"],"атеизм":["⚛"],"атом":["⚛"],"аум":["🕉"],"мантра":["🕉"],"давид":["✡"],"еврей":["✡"],"вера":["✡"],"буддизм":["☸"],"дхарма":["☸"],"тао":["☯"],"инь":["☯"],"ян":["☯"],"христрианство":["✝"],"православие":["☦"],"мусульманство":["☪"],"полумесяц":["☪"],"пацифизм":["☮"],"подсвечник":["🕎"],"ханука":["🕎"],"ханукия":["🕎"],"свечи":["🕎"],"звезда Давида":["🔯"],"переработка отходов":["♻"],"значок с именем":["📛"],"флер-де-лис":["⚜"],"герб":["⚜"],"новичок":["🔰"],"эмблема":["🔱"],"круг":["⭕","⏺","⚪","⚫","🔴","🔵"],"большой":["⭕"],"галочка":["✅","☑"],"белая":["✅","🔳"],"значок":["✔","✖","❌","➕","➖","➗","➰"],"умножение":["✖","❌"],"х":["✖"],"отмена":["❌"],"закрытие":["❌"],"крестик":["❎"],"сложение":["➕"],"вычитание":["➖"],"деление":["➗","🈹"],"петелька":["➰"],"петля":["➿"],"звездочка":["✳","*⃣"],"восьмиконечная":["✳"],"четырехконечная":["✴"],"пункт":["💱"],"касса":["💱"],"пунктуация":["‼","⁉","❓","❔","❕","❗","〰"],"вопрос":["⁉","❓","❔"],"авторское право":["©"],"зарегистрировано":["®"],"товарная марка":["™"],"ТМ":["™"],"телец":["♉"],"лев":["♌"],"дева":["♍"],"весы":["♎"],"скорпион":["♏"],"водолей":["♒"],"рыбы":["♓"],"змееносец":["⛎"],"скрещенные стрелки":["🔀"],"замкнутые стрелки":["🔁"],"повтор":["🔂"],"две стрелки":["🔂"],"одна песня":["🔂"],"проигрывание":["▶"],"треугольник":["▶","⏯","◀","🔼","🔽","🔺","🔻"],"два треугольника":["⏩","⏭","⏪","⏮","⏫","⏬"],"черта":["⏭","⏮"],"воспроизвещение":["⏯"],"пауза":["⏯"],"две черты":["⏯","⏸"],"воспроизведение":["◀"],"обратно":["◀"],"яркость":["🔅","🔆"],"низкий":["🔅"],"высокий":["🔆"],"светло":["🔆"],"уровень сигнала":["📶"],"мобильник":["📳","📴"],"режим":["📳"],"вибрация":["📳"],"выключено":["📴"],"клавиша":["#⃣","*⃣","🔟","0⃣","1⃣","2⃣","3⃣","4⃣","5⃣","6⃣","7⃣","8⃣","9⃣"],"решетка":["#⃣"],"сто":["💯"],"18 лет":["🔞"],"запрет":["🔞"],"несовершеннолетним запрещено":["🔞"],"ввод":["🔠","🔡","🔢","🔣","🔤"],"алфавит":["🔠","🔡","🔤"],"латинские буквы":["🔠","🔡","🔤"],"верхний регистр":["🔠"],"нижний регистр":["🔡"],"цифры":["🔢"],"символы":["🔣"],"группа крови":["🅰","🅱","🅾"],"буква А":["🅰"],"буквы АВ":["🆎"],"буква В":["🅱"],"ясно":["🆑"],"здорово":["🆒"],"бесплатно":["🆓"],"информация":["ℹ"],"справки":["ℹ"],"идентификатор":["🆔"],"идентификация":["🆔"],"кружок":["Ⓜ"],"буква":["Ⓜ"],"м":["Ⓜ"],"новый":["🆕"],"нехорошо":["🆖"],"буква О":["🅾"],"ОК":["🆗"],"стоянка":["🅿"],"парковка":["🅿"],"SOS":["🆘"],"обновление":["🆙"],"выгода":["🉐"],"нет в наличии":["🈚"],"вход запрещен":["🈲"],"подача":["🈸"],"доступность":["🈳"],"пустота":["🈳"],"недоступность":["🈵"],"заполненность":["🈵"],"геометрия":["▪","▫","◻","◼","◽","◾","⬛","⬜","🔶","🔷","🔸","🔹","🔺","🔻","⚪","⚫","🔴","🔵"],"маленький квадрат":["▪","▫"],"небольшой квадрат":["◽","◾"],"большой квадрат":["⬛","⬜"],"большой ромб":["🔶","🔷"],"оранжевый":["🔶","🔸"],"голубой":["🔷","🔹"],"небольшой ромб":["🔸","🔹"],"точка":["💠"],"серая":["🔘"],"синий":["🔵"],"восьмиугольник":["🛑"],"стоп":["🛑"],"тележка":["🛒"],"самокат":["🛴"],"мопед":["🛵"],"каноэ":["🛶"],"ноль":["0⃣"]}},"en":{"names":{"female sign":"♀","male sign":"♂","medical symbol":"⚕","man dancing":"🕺","black heart":"🖤","call me hand":"🤙","raised back of hand":"🤚","left-facing fist":"🤛","right-facing fist":"🤜","handshake":"🤝","crossed fingers":"🤞","cowboy hat face":"🤠","clown face":"🤡","nauseated face":"🤢","rolling on the floor laughing":"🤣","drooling face":"🤤","lying face":"🤥","person facepalming":"🤦","woman facepalming":"🤦‍♀","man facepalming":"🤦‍♂","sneezing face":"🤧","pregnant woman":"🤰","selfie":"🤳","prince":"🤴","man in tuxedo":"🤵","Mrs. Claus":"🤶","person shrugging":"🤷","woman shrugging":"🤷‍♀","man shrugging":"🤷‍♂","person cartwheeling":"🤸","woman cartwheeling":"🤸‍♀","man cartwheeling":"🤸‍♂","person juggling":"🤹","woman juggling":"🤹‍♀","man juggling":"🤹‍♂","person fencing":"🤺","people wrestling":"🤼","women wrestling":"🤼‍♀","men wrestling":"🤼‍♂","person playing water polo":"🤽","woman playing water polo":"🤽‍♀","man playing water polo":"🤽‍♂","person playing handball":"🤾","woman playing handball":"🤾‍♀","man playing handball":"🤾‍♂","wilted flower":"🥀","drum":"🥁","clinking glasses":"🥂","tumbler glass":"🥃","spoon":"🥄","goal net":"🥅","1st place medal":"🥇","2nd place medal":"🥈","3rd place medal":"🥉","boxing glove":"🥊","martial arts uniform":"🥋","croissant":"🥐","avocado":"🥑","cucumber":"🥒","bacon":"🥓","potato":"🥔","carrot":"🥕","baguette bread":"🥖","green salad":"🥗","shallow pan of food":"🥘","stuffed flatbread":"🥙","egg":"🥚","glass of milk":"🥛","peanuts":"🥜","kiwi fruit":"🥝","pancakes":"🥞","eagle":"🦅","duck":"🦆","bat":"🦇","shark":"🦈","owl":"🦉","fox face":"🦊","butterfly":"🦋","deer":"🦌","gorilla":"🦍","lizard":"🦎","rhinoceros":"🦏","shrimp":"🦐","squid":"🦑","grinning face":"😀","grinning face with smiling eyes":"😁","face with tears of joy":"😂","smiling face with open mouth":"😃","smiling face with open mouth & smiling eyes":"😄","smiling face with open mouth & cold sweat":"😅","smiling face with open mouth & closed eyes":"😆","winking face":"😉","smiling face with smiling eyes":"😊","face savouring delicious food":"😋","smiling face with sunglasses":"😎","smiling face with heart-eyes":"😍","face blowing a kiss":"😘","kissing face":"😗","kissing face with smiling eyes":"😙","kissing face with closed eyes":"😚","smiling face":"☺","slightly smiling face":"🙂","hugging face":"🤗","smiling face with halo":"😇","thinking face":"🤔","neutral face":"😐","expressionless face":"😑","face without mouth":"😶","face with rolling eyes":"🙄","smirking face":"😏","persevering face":"😣","disappointed but relieved face":"😥","face with open mouth":"😮","zipper-mouth face":"🤐","hushed face":"😯","sleepy face":"😪","tired face":"😫","sleeping face":"😴","relieved face":"😌","nerd face":"🤓","face with stuck-out tongue":"😛","face with stuck-out tongue & winking eye":"😜","face with stuck-out tongue & closed eyes":"😝","frowning face":"☹","slightly frowning face":"🙁","unamused face":"😒","face with cold sweat":"😓","pensive face":"😔","confused face":"😕","confounded face":"😖","upside-down face":"🙃","face with medical mask":"😷","face with thermometer":"🤒","face with head-bandage":"🤕","money-mouth face":"🤑","astonished face":"😲","disappointed face":"😞","worried face":"😟","face with steam from nose":"😤","crying face":"😢","loudly crying face":"😭","frowning face with open mouth":"😦","anguished face":"😧","fearful face":"😨","weary face":"😩","grimacing face":"😬","face with open mouth & cold sweat":"😰","face screaming in fear":"😱","flushed face":"😳","dizzy face":"😵","pouting face":"😡","angry face":"😠","smiling face with horns":"😈","angry face with horns":"👿","ogre":"👹","goblin":"👺","skull":"💀","skull and crossbones":"☠","ghost":"👻","alien":"👽","alien monster":"👾","robot face":"🤖","pile of poo":"💩","smiling cat face with open mouth":"😺","grinning cat face with smiling eyes":"😸","cat face with tears of joy":"😹","smiling cat face with heart-eyes":"😻","cat face with wry smile":"😼","kissing cat face with closed eyes":"😽","weary cat face":"🙀","crying cat face":"😿","pouting cat face":"😾","see-no-evil monkey":"🙈","hear-no-evil monkey":"🙉","speak-no-evil monkey":"🙊","boy":"👦","girl":"👧","man":"👨","man health worker":"👨‍⚕","man student":"👨‍🎓","man farmer":"👨‍🌾","man cook":"👨‍🍳","man teacher":"👨‍🏫","man factory worker":"👨‍🏭","man artist":"👨‍🎨","man firefighter":"👨‍🚒","man pilot":"👨‍✈","man astronaut":"👨‍🚀","man singer":"👨‍🎤","man technologist":"👨‍💻","man scientist":"👨‍🔬","man office worker":"👨‍💼","man mechanic":"👨‍🔧","man judge":"👨‍⚖","woman":"👩","woman health worker":"👩‍⚕","woman student":"👩‍🎓","woman farmer":"👩‍🌾","woman cook":"👩‍🍳","woman teacher":"👩‍🏫","woman factory worker":"👩‍🏭","woman artist":"👩‍🎨","woman firefighter":"👩‍🚒","woman pilot":"👩‍✈","woman astronaut":"👩‍🚀","woman singer":"👩‍🎤","woman technologist":"👩‍💻","woman scientist":"👩‍🔬","woman office worker":"👩‍💼","woman mechanic":"👩‍🔧","woman judge":"👩‍⚖","old man":"👴","old woman":"👵","baby":"👶","blond-haired person":"👱","blond-haired woman":"👱‍♀","blond-haired man":"👱‍♂","police officer":"👮","woman police officer":"👮‍♀","man police officer":"👮‍♂","man with Chinese cap":"👲","person wearing turban":"👳","woman wearing turban":"👳‍♀","man wearing turban":"👳‍♂","construction worker":"👷","woman construction worker":"👷‍♀","man construction worker":"👷‍♂","rescue worker’s helmet":"⛑","princess":"👸","guard":"💂","woman guard":"💂‍♀","man guard":"💂‍♂","detective":"🕵","woman detective":"🕵‍♀","man detective":"🕵‍♂","Santa Claus":"🎅","baby angel":"👼","people with bunny ears partying":"👯","women with bunny ears partying":"👯‍♀","men with bunny ears partying":"👯‍♂","person getting massage":"💆","woman getting massage":"💆‍♀","man getting massage":"💆‍♂","person getting haircut":"💇","woman getting haircut":"💇‍♀","man getting haircut":"💇‍♂","bride with veil":"👰","person frowning":"🙍","woman frowning":"🙍‍♀","man frowning":"🙍‍♂","person pouting":"🙎","woman pouting":"🙎‍♀","man pouting":"🙎‍♂","person gesturing NO":"🙅","woman gesturing NO":"🙅‍♀","man gesturing NO":"🙅‍♂","person gesturing OK":"🙆","woman gesturing OK":"🙆‍♀","man gesturing OK":"🙆‍♂","person tipping hand":"💁","woman tipping hand":"💁‍♀","man tipping hand":"💁‍♂","person raising hand":"🙋","woman raising hand":"🙋‍♀","man raising hand":"🙋‍♂","person bowing":"🙇","woman bowing":"🙇‍♀","man bowing":"🙇‍♂","raising hands":"🙌","folded hands":"🙏","speaking head":"🗣","bust in silhouette":"👤","busts in silhouette":"👥","person walking":"🚶","woman walking":"🚶‍♀","man walking":"🚶‍♂","person running":"🏃","woman running":"🏃‍♀","man running":"🏃‍♂","woman dancing":"💃","man in business suit levitating":"🕴","kiss":"💏","couple with heart":"💑","family":"👪","man and woman holding hands":"👫","two men holding hands":"👬","two women holding hands":"👭","light skin tone":"🏻","medium-light skin tone":"🏼","medium skin tone":"🏽","medium-dark skin tone":"🏾","dark skin tone":"🏿","flexed biceps":"💪","backhand index pointing left":"👈","backhand index pointing right":"👉","index pointing up":"☝","backhand index pointing up":"👆","middle finger":"🖕","backhand index pointing down":"👇","victory hand":"✌","vulcan salute":"🖖","sign of the horns":"🤘","raised hand with fingers splayed":"🖐","raised fist":"✊","raised hand":"✋","oncoming fist":"👊","OK hand":"👌","thumbs up":"👍","thumbs down":"👎","waving hand":"👋","clapping hands":"👏","open hands":"👐","writing hand":"✍","nail polish":"💅","ear":"👂","nose":"👃","footprints":"👣","eyes":"👀","eye":"👁","eye in speech bubble":"👁‍🗨","tongue":"👅","mouth":"👄","kiss mark":"💋","heart with arrow":"💘","red heart":"❤","beating heart":"💓","broken heart":"💔","two hearts":"💕","sparkling heart":"💖","growing heart":"💗","blue heart":"💙","green heart":"💚","yellow heart":"💛","purple heart":"💜","heart with ribbon":"💝","revolving hearts":"💞","heart decoration":"💟","heavy heart exclamation":"❣","love letter":"💌","zzz":"💤","anger symbol":"💢","bomb":"💣","collision":"💥","sweat droplets":"💦","dashing away":"💨","dizzy":"💫","speech balloon":"💬","left speech bubble":"🗨","right anger bubble":"🗯","thought balloon":"💭","hole":"🕳","glasses":"👓","sunglasses":"🕶","necktie":"👔","t-shirt":"👕","jeans":"👖","dress":"👗","kimono":"👘","bikini":"👙","woman’s clothes":"👚","purse":"👛","handbag":"👜","clutch bag":"👝","shopping bags":"🛍","school backpack":"🎒","man’s shoe":"👞","running shoe":"👟","high-heeled shoe":"👠","woman’s sandal":"👡","woman’s boot":"👢","crown":"👑","woman’s hat":"👒","top hat":"🎩","graduation cap":"🎓","prayer beads":"📿","lipstick":"💄","ring":"💍","gem stone":"💎","monkey face":"🐵","monkey":"🐒","dog face":"🐶","dog":"🐕","poodle":"🐩","wolf face":"🐺","cat face":"🐱","cat":"🐈","lion face":"🦁","tiger face":"🐯","tiger":"🐅","leopard":"🐆","horse face":"🐴","horse":"🐎","unicorn face":"🦄","cow face":"🐮","ox":"🐂","water buffalo":"🐃","cow":"🐄","pig face":"🐷","pig":"🐖","boar":"🐗","pig nose":"🐽","ram":"🐏","ewe":"🐑","goat":"🐐","camel":"🐪","two-hump camel":"🐫","elephant":"🐘","mouse face":"🐭","mouse":"🐁","rat":"🐀","hamster face":"🐹","rabbit face":"🐰","rabbit":"🐇","chipmunk":"🐿","bear face":"🐻","koala":"🐨","panda face":"🐼","paw prints":"🐾","turkey":"🦃","chicken":"🐔","rooster":"🐓","hatching chick":"🐣","baby chick":"🐤","front-facing baby chick":"🐥","bird":"🐦","penguin":"🐧","dove":"🕊","frog face":"🐸","crocodile":"🐊","turtle":"🐢","snake":"🐍","dragon face":"🐲","dragon":"🐉","spouting whale":"🐳","whale":"🐋","dolphin":"🐬","fish":"🐟","tropical fish":"🐠","blowfish":"🐡","octopus":"🐙","spiral shell":"🐚","crab":"🦀","snail":"🐌","bug":"🐛","ant":"🐜","honeybee":"🐝","lady beetle":"🐞","spider":"🕷","spider web":"🕸","scorpion":"🦂","bouquet":"💐","cherry blossom":"🌸","white flower":"💮","rosette":"🏵","rose":"🌹","hibiscus":"🌺","sunflower":"🌻","blossom":"🌼","tulip":"🌷","shamrock":"☘","seedling":"🌱","evergreen tree":"🌲","deciduous tree":"🌳","palm tree":"🌴","cactus":"🌵","sheaf of rice":"🌾","herb":"🌿","four leaf clover":"🍀","maple leaf":"🍁","fallen leaf":"🍂","leaf fluttering in wind":"🍃","grapes":"🍇","melon":"🍈","watermelon":"🍉","tangerine":"🍊","lemon":"🍋","banana":"🍌","pineapple":"🍍","red apple":"🍎","green apple":"🍏","pear":"🍐","peach":"🍑","cherries":"🍒","strawberry":"🍓","tomato":"🍅","eggplant":"🍆","ear of corn":"🌽","hot pepper":"🌶","mushroom":"🍄","chestnut":"🌰","bread":"🍞","cheese wedge":"🧀","meat on bone":"🍖","poultry leg":"🍗","hamburger":"🍔","french fries":"🍟","pizza":"🍕","hot dog":"🌭","taco":"🌮","burrito":"🌯","popcorn":"🍿","pot of food":"🍲","bento box":"🍱","rice cracker":"🍘","rice ball":"🍙","cooked rice":"🍚","curry rice":"🍛","steaming bowl":"🍜","spaghetti":"🍝","roasted sweet potato":"🍠","oden":"🍢","sushi":"🍣","fried shrimp":"🍤","fish cake with swirl":"🍥","dango":"🍡","soft ice cream":"🍦","shaved ice":"🍧","ice cream":"🍨","doughnut":"🍩","cookie":"🍪","birthday cake":"🎂","shortcake":"🍰","chocolate bar":"🍫","candy":"🍬","lollipop":"🍭","custard":"🍮","honey pot":"🍯","baby bottle":"🍼","hot beverage":"☕","teacup without handle":"🍵","sake":"🍶","bottle with popping cork":"🍾","wine glass":"🍷","cocktail glass":"🍸","tropical drink":"🍹","beer mug":"🍺","clinking beer mugs":"🍻","fork and knife with plate":"🍽","fork and knife":"🍴","cooking":"🍳","amphora":"🏺","globe showing Europe-Africa":"🌍","globe showing Americas":"🌎","globe showing Asia-Australia":"🌏","globe with meridians":"🌐","world map":"🗺","snow-capped mountain":"🏔","mountain":"⛰","volcano":"🌋","mount fuji":"🗻","camping":"🏕","beach with umbrella":"🏖","desert":"🏜","desert island":"🏝","national park":"🏞","stadium":"🏟","classical building":"🏛","building construction":"🏗","house":"🏠","cityscape":"🏙","derelict house":"🏚","house with garden":"🏡","church":"⛪","kaaba":"🕋","mosque":"🕌","synagogue":"🕍","shinto shrine":"⛩","office building":"🏢","Japanese post office":"🏣","post office":"🏤","hospital":"🏥","bank":"🏦","hotel":"🏨","love hotel":"🏩","convenience store":"🏪","school":"🏫","department store":"🏬","factory":"🏭","Japanese castle":"🏯","castle":"🏰","wedding":"💒","Tokyo tower":"🗼","Statue of Liberty":"🗽","map of Japan":"🗾","fountain":"⛲","tent":"⛺","foggy":"🌁","night with stars":"🌃","sunrise over mountains":"🌄","sunrise":"🌅","cityscape at dusk":"🌆","sunset":"🌇","bridge at night":"🌉","hot springs":"♨","milky way":"🌌","carousel horse":"🎠","ferris wheel":"🎡","roller coaster":"🎢","barber pole":"💈","circus tent":"🎪","performing arts":"🎭","framed picture":"🖼","artist palette":"🎨","slot machine":"🎰","locomotive":"🚂","railway car":"🚃","high-speed train":"🚄","high-speed train with bullet nose":"🚅","train":"🚆","metro":"🚇","light rail":"🚈","station":"🚉","tram":"🚊","monorail":"🚝","mountain railway":"🚞","tram car":"🚋","bus":"🚌","oncoming bus":"🚍","trolleybus":"🚎","bus stop":"🚏","minibus":"🚐","ambulance":"🚑","fire engine":"🚒","police car":"🚓","oncoming police car":"🚔","taxi":"🚕","oncoming taxi":"🚖","automobile":"🚗","oncoming automobile":"🚘","sport utility vehicle":"🚙","delivery truck":"🚚","articulated lorry":"🚛","tractor":"🚜","bicycle":"🚲","fuel pump":"⛽","motorway":"🛣","railway track":"🛤","police car light":"🚨","horizontal traffic light":"🚥","vertical traffic light":"🚦","construction":"🚧","anchor":"⚓","sailboat":"⛵","person rowing boat":"🚣","woman rowing boat":"🚣‍♀","man rowing boat":"🚣‍♂","speedboat":"🚤","passenger ship":"🛳","ferry":"⛴","motor boat":"🛥","ship":"🚢","airplane":"✈","small airplane":"🛩","airplane departure":"🛫","airplane arrival":"🛬","seat":"💺","helicopter":"🚁","suspension railway":"🚟","mountain cableway":"🚠","aerial tramway":"🚡","rocket":"🚀","satellite":"🛰","bellhop bell":"🛎","door":"🚪","person in bed":"🛌","bed":"🛏","couch and lamp":"🛋","toilet":"🚽","shower":"🚿","person taking bath":"🛀","bathtub":"🛁","hourglass":"⌛","hourglass with flowing sand":"⏳","watch":"⌚","alarm clock":"⏰","stopwatch":"⏱","timer clock":"⏲","mantelpiece clock":"🕰","twelve o’clock":"🕛","twelve-thirty":"🕧","one o’clock":"🕐","one-thirty":"🕜","two o’clock":"🕑","two-thirty":"🕝","three o’clock":"🕒","three-thirty":"🕞","four o’clock":"🕓","four-thirty":"🕟","five o’clock":"🕔","five-thirty":"🕠","six o’clock":"🕕","six-thirty":"🕡","seven o’clock":"🕖","seven-thirty":"🕢","eight o’clock":"🕗","eight-thirty":"🕣","nine o’clock":"🕘","nine-thirty":"🕤","ten o’clock":"🕙","ten-thirty":"🕥","eleven o’clock":"🕚","eleven-thirty":"🕦","new moon":"🌑","waxing crescent moon":"🌒","first quarter moon":"🌓","waxing gibbous moon":"🌔","full moon":"🌕","waning gibbous moon":"🌖","last quarter moon":"🌗","waning crescent moon":"🌘","crescent moon":"🌙","new moon face":"🌚","first quarter moon with face":"🌛","last quarter moon with face":"🌜","thermometer":"🌡","sun":"☀","full moon with face":"🌝","sun with face":"🌞","white medium star":"⭐","glowing star":"🌟","shooting star":"🌠","cloud":"☁","sun behind cloud":"⛅","cloud with lightning and rain":"⛈","sun behind small cloud":"🌤","sun behind large cloud":"🌥","sun behind rain cloud":"🌦","cloud with rain":"🌧","cloud with snow":"🌨","cloud with lightning":"🌩","tornado":"🌪","fog":"🌫","wind face":"🌬","cyclone":"🌀","rainbow":"🌈","closed umbrella":"🌂","umbrella":"☂","umbrella with rain drops":"☔","umbrella on ground":"⛱","high voltage":"⚡","snowflake":"❄","snowman":"☃","snowman without snow":"⛄","comet":"☄","fire":"🔥","droplet":"💧","water wave":"🌊","jack-o-lantern":"🎃","Christmas tree":"🎄","fireworks":"🎆","sparkler":"🎇","sparkles":"✨","balloon":"🎈","party popper":"🎉","confetti ball":"🎊","tanabata tree":"🎋","crossed flags":"🎌","pine decoration":"🎍","Japanese dolls":"🎎","carp streamer":"🎏","wind chime":"🎐","moon viewing ceremony":"🎑","ribbon":"🎀","wrapped gift":"🎁","military medal":"🎖","reminder ribbon":"🎗","film frames":"🎞","admission tickets":"🎟","ticket":"🎫","label":"🏷","soccer ball":"⚽","baseball":"⚾","basketball":"🏀","american football":"🏈","rugby football":"🏉","tennis":"🎾","pool 8 ball":"🎱","bowling":"🎳","flag in hole":"⛳","person golfing":"🏌","woman golfing":"🏌‍♀","man golfing":"🏌‍♂","ice skate":"⛸","fishing pole":"🎣","running shirt":"🎽","skis":"🎿","skier":"⛷","snowboarder":"🏂","person surfing":"🏄","woman surfing":"🏄‍♀","man surfing":"🏄‍♂","horse racing":"🏇","person swimming":"🏊","woman swimming":"🏊‍♀","man swimming":"🏊‍♂","person bouncing ball":"⛹","woman bouncing ball":"⛹‍♀","man bouncing ball":"⛹‍♂","person lifting weights":"🏋","woman lifting weights":"🏋‍♀","man lifting weights":"🏋‍♂","person biking":"🚴","woman biking":"🚴‍♀","man biking":"🚴‍♂","person mountain biking":"🚵","woman mountain biking":"🚵‍♀","man mountain biking":"🚵‍♂","racing car":"🏎","motorcycle":"🏍","sports medal":"🏅","trophy":"🏆","cricket":"🦗","volleyball":"🏐","field hockey":"🏑","ice hockey":"🏒","ping pong":"🏓","badminton":"🏸","direct hit":"🎯","video game":"🎮","joystick":"🕹","game die":"🎲","spade suit":"♠","heart suit":"♥","diamond suit":"♦","club suit":"♣","joker":"🃏","mahjong red dragon":"🀄","flower playing cards":"🎴","muted speaker":"🔇","speaker low volume":"🔈","speaker medium volume":"🔉","speaker high volume":"🔊","loudspeaker":"📢","megaphone":"📣","postal horn":"📯","bell":"🔔","bell with slash":"🔕","musical score":"🎼","musical note":"🎵","musical notes":"🎶","studio microphone":"🎙","level slider":"🎚","control knobs":"🎛","microphone":"🎤","headphone":"🎧","saxophone":"🎷","guitar":"🎸","musical keyboard":"🎹","trumpet":"🎺","violin":"🎻","radio":"📻","mobile phone":"📱","mobile phone with arrow":"📲","telephone":"☎","telephone receiver":"📞","pager":"📟","fax machine":"📠","battery":"🔋","electric plug":"🔌","laptop computer":"💻","desktop computer":"🖥","printer":"🖨","keyboard":"⌨","computer mouse":"🖱","trackball":"🖲","computer disk":"💽","floppy disk":"💾","optical disk":"💿","dvd":"📀","movie camera":"🎥","clapper board":"🎬","film projector":"📽","television":"📺","camera":"📷","camera with flash":"📸","video camera":"📹","videocassette":"📼","left-pointing magnifying glass":"🔍","right-pointing magnifying glass":"🔎","microscope":"🔬","telescope":"🔭","satellite antenna":"📡","candle":"🕯","light bulb":"💡","flashlight":"🔦","red paper lantern":"🏮","notebook with decorative cover":"📔","closed book":"📕","open book":"📖","green book":"📗","blue book":"📘","orange book":"📙","books":"📚","notebook":"📓","ledger":"📒","page with curl":"📃","scroll":"📜","page facing up":"📄","newspaper":"📰","rolled-up newspaper":"🗞","bookmark tabs":"📑","bookmark":"🔖","money bag":"💰","yen banknote":"💴","dollar banknote":"💵","euro banknote":"💶","pound banknote":"💷","money with wings":"💸","credit card":"💳","chart increasing with yen":"💹","envelope":"✉","e-mail":"📧","incoming envelope":"📨","envelope with arrow":"📩","outbox tray":"📤","inbox tray":"📥","package":"📦","closed mailbox with raised flag":"📫","closed mailbox with lowered flag":"📪","open mailbox with raised flag":"📬","open mailbox with lowered flag":"📭","postbox":"📮","ballot box with ballot":"🗳","pencil":"✏","black nib":"✒","fountain pen":"🖋","pen":"🖊","paintbrush":"🖌","crayon":"🖍","memo":"📝","briefcase":"💼","file folder":"📁","open file folder":"📂","card index dividers":"🗂","calendar":"📅","tear-off calendar":"📆","spiral notepad":"🗒","spiral calendar":"🗓","card index":"📇","chart increasing":"📈","chart decreasing":"📉","bar chart":"📊","clipboard":"📋","pushpin":"📌","round pushpin":"📍","paperclip":"📎","linked paperclips":"🖇","straight ruler":"📏","triangular ruler":"📐","scissors":"✂","card file box":"🗃","file cabinet":"🗄","wastebasket":"🗑","locked":"🔒","unlocked":"🔓","locked with pen":"🔏","locked with key":"🔐","key":"🔑","old key":"🗝","hammer":"🔨","pick":"⛏","hammer and pick":"⚒","hammer and wrench":"🛠","wrench":"🔧","nut and bolt":"🔩","gear":"⚙","clamp":"🗜","alembic":"⚗","balance scale":"⚖","link":"🔗","chains":"⛓","syringe":"💉","pill":"💊","dagger":"🗡","kitchen knife":"🔪","crossed swords":"⚔","pistol":"🔫","shield":"🛡","bow and arrow":"🏹","chequered flag":"🏁","white flag":"🏳","rainbow flag":"🏳‍🌈","black flag":"🏴","triangular flag":"🚩","cigarette":"🚬","coffin":"⚰","funeral urn":"⚱","moai":"🗿","oil drum":"🛢","crystal ball":"🔮","ATM sign":"🏧","litter in bin sign":"🚮","potable water":"🚰","wheelchair symbol":"♿","men’s room":"🚹","women’s room":"🚺","restroom":"🚻","baby symbol":"🚼","water closet":"🚾","passport control":"🛂","customs":"🛃","baggage claim":"🛄","left luggage":"🛅","warning":"⚠","children crossing":"🚸","no entry":"⛔","prohibited":"🚫","no bicycles":"🚳","no smoking":"🚭","no littering":"🚯","non-potable water":"🚱","no pedestrians":"🚷","radioactive":"☢","biohazard":"☣","up arrow":"⬆","up-right arrow":"↗","right arrow":"➡","down-right arrow":"↘","down arrow":"⬇","down-left arrow":"↙","left arrow":"⬅","up-left arrow":"↖","up-down arrow":"↕","left-right arrow":"↔","right arrow curving left":"↩","left arrow curving right":"↪","right arrow curving up":"⤴","right arrow curving down":"⤵","clockwise vertical arrows":"🔃","anticlockwise arrows button":"🔄","BACK arrow":"🔙","END arrow":"🔚","ON! arrow":"🔛","SOON arrow":"🔜","TOP arrow":"🔝","place of worship":"🛐","atom symbol":"⚛","om":"🕉","star of David":"✡","wheel of dharma":"☸","yin yang":"☯","latin cross":"✝","orthodox cross":"☦","star and crescent":"☪","peace symbol":"☮","menorah":"🕎","dotted six-pointed star":"🔯","recycling symbol":"♻","name badge":"📛","fleur-de-lis":"⚜","Japanese symbol for beginner":"🔰","trident emblem":"🔱","heavy large circle":"⭕","white heavy check mark":"✅","ballot box with check":"☑","heavy check mark":"✔","heavy multiplication x":"✖","cross mark":"❌","cross mark button":"❎","heavy plus sign":"➕","heavy minus sign":"➖","heavy division sign":"➗","curly loop":"➰","double curly loop":"➿","part alternation mark":"〽","eight-spoked asterisk":"✳","eight-pointed star":"✴","sparkle":"❇","currency exchange":"💱","heavy dollar sign":"💲","double exclamation mark":"‼","exclamation question mark":"⁉","question mark":"❓","white question mark":"❔","white exclamation mark":"❕","exclamation mark":"❗","wavy dash":"〰","copyright":"©","registered":"®","trade mark":"™","Aries":"♈","Taurus":"♉","Gemini":"♊","Cancer":"♋","Leo":"♌","Virgo":"♍","Libra":"♎","Scorpius":"♏","Sagittarius":"♐","Capricorn":"♑","Aquarius":"♒","Pisces":"♓","Ophiuchus":"⛎","shuffle tracks button":"🔀","repeat button":"🔁","repeat single button":"🔂","play button":"▶","fast-forward button":"⏩","next track button":"⏭","play or pause button":"⏯","reverse button":"◀","fast reverse button":"⏪","last track button":"⏮","up button":"🔼","fast up button":"⏫","down button":"🔽","fast down button":"⏬","pause button":"⏸","stop button":"⏹","record button":"⏺","eject button":"⏏","cinema":"🎦","dim button":"🔅","bright button":"🔆","antenna bars":"📶","no mobile phones":"📵","vibration mode":"📳","mobile phone off":"📴","keycap 10":"🔟","hundred points":"💯","no one under eighteen":"🔞","input latin uppercase":"🔠","input latin lowercase":"🔡","input numbers":"🔢","input symbols":"🔣","input latin letters":"🔤","A button (blood type)":"🅰","AB button (blood type)":"🆎","B button (blood type)":"🅱","CL button":"🆑","COOL button":"🆒","FREE button":"🆓","information":"ℹ","ID button":"🆔","circled M":"Ⓜ","NEW button":"🆕","NG button":"🆖","O button (blood type)":"🅾","OK button":"🆗","P button":"🅿","SOS button":"🆘","UP! button":"🆙","VS button":"🆚","Japanese “here” button":"🈁","Japanese “service charge” button":"🈂","Japanese “monthly amount” button":"🈷","Japanese “not free of charge” button":"🈶","Japanese “reserved” button":"🈯","Japanese “bargain” button":"🉐","Japanese “discount” button":"🈹","Japanese “free of charge” button":"🈚","Japanese “prohibited” button":"🈲","Japanese “acceptable” button":"🉑","Japanese “application” button":"🈸","Japanese “passing grade” button":"🈴","Japanese “vacancy” button":"🈳","Japanese “congratulations” button":"㊗","Japanese “secret” button":"㊙","Japanese “open for business” button":"🈺","Japanese “no vacancy” button":"🈵","black small square":"▪","white small square":"▫","white medium square":"◻","black medium square":"◼","white medium-small square":"◽","black medium-small square":"◾","black large square":"⬛","white large square":"⬜","large orange diamond":"🔶","large blue diamond":"🔷","small orange diamond":"🔸","small blue diamond":"🔹","red triangle pointed up":"🔺","red triangle pointed down":"🔻","diamond with a dot":"💠","radio button":"🔘","black square button":"🔲","white square button":"🔳","white circle":"⚪","black circle":"⚫","red circle":"🔴","blue circle":"🔵","stop sign":"🛑","shopping cart":"🛒","kick scooter":"🛴","motor scooter":"🛵","canoe":"🛶","face with raised eyebrow":"🤨","star-struck":"🤩","crazy face":"🤪","shushing face":"🤫","face with symbols over mouth":"🤬","face with hand over mouth":"🤭","face with monocle":"🧐","exploding head":"🤯","face vomiting":"🤮","child":"🧒","adult":"🧑","older adult":"🧓","breast-feeding":"🤱","bearded person":"🧔","woman with headscarf":"🧕","mage":"🧙","woman mage":"🧙‍♀️","man mage":"🧙‍♂️","fairy":"🧚","woman fairy":"🧚‍♀️","man fairy":"🧚‍♂️","vampire":"🧛","woman vampire":"🧛‍♀️","man vampire":"🧛‍♂️","merperson":"🧜","mermaid":"🧜‍♀️","merman":"🧜‍♂️","elf":"🧝","woman elf":"🧝‍♀️","man elf":"🧝‍♂️","genie":"🧞","woman genie":"🧞‍♀️","man genie":"🧞‍♂️","zombie":"🧟","woman zombie":"🧟‍♀️","man zombie":"🧟‍♂️","person in steamy room":"🧖","woman in steamy room":"🧖‍♀️","man in steamy room":"🧖‍♂️","person climbing":"🧗","woman climbing":"🧗‍♀️","man climbing":"🧗‍♂️","person in lotus position":"🧘","woman in lotus position":"🧘‍♀️","man in lotus position":"🧘‍♂️","love-you gesture":"🤟","palms up together":"🤲","brain":"🧠","orange heart":"🧡","scarf":"🧣","gloves":"🧤","coat":"🧥","socks":"🧦","billed cap":"🧢","zebra":"🦓","giraffe":"🦒","hedgehog":"🦔","sauropod":"🦕","T-Rex":"🦖","coconut":"🥥","broccoli":"🥦","bowl with spoon":"🥣","pretzel":"🥨","cut of meat":"🥩","sandwich":"🥪","canned food":"🥫","dumpling":"🥟","fortune cookie":"🥠","takeout box":"🥡","pie":"🥧","cup with straw":"🥤","chopsticks":"🥢","flying saucer":"🛸","sled":"🛷","curling stone":"🥌"},"keywords":{"1":["🕐","🕜"],"2":["🕑","🕝"],"3":["🕒","🕞"],"4":["🍀","🕓","🕟"],"5":["🕔","🕠"],"6":["🕕","🕡"],"7":["🕖","🕢"],"8":["🕗","🕣","🎱"],"9":["🕘","🕤"],"10":["🕙","🕥"],"11":["🕚","🕦"],"12":["🕛","🕧"],"18":["🔞"],"30":["🕧","🕜","🕝","🕞","🕟","🕠","🕡","🕢","🕣","🕤","🕥","🕦"],"100":["💯"],"1234":["🔢"],"woman":["♀","🤦‍♀","🤰","🤷‍♀","🤸‍♀","🤹‍♀","🤽‍♀","🤾‍♀","👩","👩‍⚕","👩‍🎓","👩‍🌾","👩‍🍳","👩‍🏫","👩‍🏭","👩‍🎨","👩‍🚒","👩‍✈","👩‍🚀","👩‍🎤","👩‍💻","👩‍🔬","👩‍💼","👩‍🔧","👩‍⚖","👵","👱‍♀","👮‍♀","👳‍♀","👷‍♀","💂‍♀","🕵‍♀","💆‍♀","💇‍♀","🙍‍♀","🙎‍♀","🙅‍♀","🙆‍♀","💁‍♀","🙋‍♀","🙇‍♀","🚶‍♀","🏃‍♀","💃","👫","👭","👚","👠","👡","👢","👒","🚣‍♀","🏌‍♀","🏄‍♀","🏊‍♀","⛹‍♀","🏋‍♀","🚴‍♀","🚵‍♀","🚺"],"man":["♂","🕺","🤦‍♂","🤵","🤷‍♂","🤸‍♂","🤹‍♂","🤽‍♂","🤾‍♂","👨","👨‍⚕","👨‍🎓","👨‍🌾","👨‍🍳","👨‍🏫","👨‍🏭","👨‍🎨","👨‍🚒","👨‍✈","👨‍🚀","👨‍🎤","👨‍💻","👨‍🔬","👨‍💼","👨‍🔧","👨‍⚖","👴","👱‍♂","👮‍♂","👲","👳‍♂","👷‍♂","💂‍♂","🕵‍♂","💆‍♂","💇‍♂","🙍‍♂","🙎‍♂","🙅‍♂","🙆‍♂","💁‍♂","🙋‍♂","🙇‍♂","🚶‍♂","🏃‍♂","🕴","👫","👬","👞","🚣‍♂","🏌‍♂","🏄‍♂","🏊‍♂","⛹‍♂","🏋‍♂","🚴‍♂","🚵‍♂","🚹"],"staff":["⚕"],"medicine":["⚕","😷","🏥","💉","💊"],"aesculapius":["⚕"],"dance":["🕺"],"black":["🖤"],"evil":["🖤","🙈","🙉","🙊"],"wicked":["🖤"],"call":["🤙","📲"],"hand":["🤙","🤝","🤞","🙅","🙅‍♀","🙅‍♂","🙆","🙆‍♀","🙆‍♂","💁","🙋","🙌","🙏","👫","👬","👭","👈","👉","☝","👆","🖕","👇","✌","🖖","🤘","🖐","✊","✋","👊","👌","👍","👎","👋","👏","👐","✍","🤟"],"backhand":["🤚","👈","👉","👆","👇"],"raised":["🤚","🙋","🙌"],"fist":["🤛","🤜","✊","👊"],"leftwards":["🤛"],"rightwards":["🤜"],"handshake":["🤝"],"agreement":["🤝"],"meeting":["🤝"],"shake":["🤝"],"cross":["🤞","⛑","⛪","🎌","✝","☦"],"finger":["🤞","👈","👉","☝","👆","🖕","👇","🖖","🤘","🖐"],"luck":["🤞"],"cowboy":["🤠"],"face":["🤠","🤡","🤢","🤣","🤤","🤥","🤦","🤧","🦊","😀","😁","😂","😃","😄","😅","😆","😉","😊","😋","😎","😍","😘","😗","😙","😚","☺","🙂","🤗","😇","🤔","😐","😑","😶","🙄","😏","😣","😥","😮","🤐","😯","😪","😫","😴","😌","🤓","😛","😜","😝","☹","🙁","😒","😓","😔","😕","😖","🙃","😷","🤒","🤕","🤑","😲","😞","😟","😤","😢","😭","😦","😧","😨","😩","😬","😰","😱","😳","😵","😡","😠","😈","👿","👹","👺","💀","☠","👻","👽","👾","🤖","💩","😺","😸","😹","😻","😼","😽","🙀","😿","😾","🙈","🙉","🙊","⛑","👼","💆","💆‍♀","💆‍♂","🗣","👀","🐵","🐶","🐺","🐱","🦁","🐯","🐴","🦄","🐮","🐷","🐽","🐭","🐹","🐰","🐻","🐼","🐸","🐲","🐳","🌚","🌛","🌜","🌝","🌞","🌬","🗿","🤩"],"hat":["🤠","👲","👷","⛑","👒","🎩","🎓"],"cowgirl":["🤠"],"clown":["🤡"],"nauseated":["🤢"],"vomit":["🤢","🤮"],"floor":["🤣"],"laugh":["🤣","😂","😆"],"rolling":["🤣","🙄"],"drooling":["🤤"],"lie":["🤥"],"pinocchio":["🤥"],"palm":["🤦","🌴"],"disbelief":["🤦","🤦‍♀","🤦‍♂"],"exasperation":["🤦","🤦‍♀","🤦‍♂"],"facepalm":["🤦‍♀","🤦‍♂"],"gesundheit":["🤧"],"sneeze":["🤧"],"pregnant":["🤰"],"selfie":["🤳"],"camera":["🤳","🎥","📸","📹","🎦"],"phone":["🤳","📱","📲","☎","📞","📶","📵","📳","📴"],"prince":["🤴"],"groom":["🤵"],"tuxedo":["🤵"],"Christmas":["🤶","🎅","🎄"],"celebration":["🤶","🎅","🙌","🎓","🎂","🎃","🎄","🎆","🎇","🎈","🎉","🎊","🎋","🎌","🎍","🎎","🎏","🎐","🎑","🎀","🎁","🎖","🎗"],"mother":["🤶"],"Mrs.":["🤶"],"claus":["🤶","🎅"],"shrug":["🤷","🤷‍♀","🤷‍♂"],"doubt":["🤷","🤷‍♀","🤷‍♂"],"ignorance":["🤷","🤷‍♀","🤷‍♂"],"indifference":["🤷","🤷‍♀","🤷‍♂"],"cartwheel":["🤸","🤸‍♀","🤸‍♂"],"gymnastics":["🤸","🤸‍♀","🤸‍♂"],"juggle":["🤹"],"multitask":["🤹","🤹‍♀","🤹‍♂"],"balance":["🤹","⚖","♎"],"skill":["🤹"],"juggling":["🤹‍♀","🤹‍♂"],"fencer":["🤺"],"fencing":["🤺"],"sword":["🤺"],"wrestler":["🤼"],"wrestle":["🤼","🤼‍♀","🤼‍♂"],"women":["🤼‍♀","👯‍♀"],"men":["🤼‍♂","👯‍♂"],"polo":["🤽"],"water":["🤽","🐃","🚿","🌊","🚰","🚾","🚱","♒"],"water polo":["🤽‍♀","🤽‍♂"],"handball":["🤾","🤾‍♀","🤾‍♂"],"ball":["🤾","🍙","🎊","⚽","⚾","🏀","🏈","🏉","🎾","🎱","🎳","🏌","⛹","⛹‍♀","⛹‍♂","🏏","🏐","🏑","🏓","🔮"],"flower":["🥀","💐","🌸","💮","🌹","🌺","🌻","🌼","🌷","🎴"],"wilted":["🥀"],"drum":["🥁","🛢"],"drumsticks":["🥁"],"music":["🥁","🎼","🎵","🎶","🎙","🎚","🎛","🎷","🎸","🎹","🎺","🎻"],"clink":["🥂","🍻"],"glass":["🥂","🥃","🥛","🍷","🍸","🔍","🔎"],"drink":["🥂","🥛","🍼","☕","🍵","🍶","🍾","🍷","🍸","🍹","🍺","🍻","🏺"],"celebrate":["🥂"],"tumbler":["🥃"],"whisky":["🥃"],"liquor":["🥃"],"shot":["🥃","💉"],"spoon":["🥄"],"tableware":["🥄"],"goal":["🥅"],"net":["🥅"],"first":["🥇"],"gold":["🥇"],"medal":["🥇","🥈","🥉","🎖","🏅"],"second":["🥈"],"silver":["🥈"],"bronze":["🥉"],"third":["🥉"],"boxing":["🥊"],"glove":["🥊"],"judo":["🥋"],"karate":["🥋"],"taekwondo":["🥋"],"martial arts":["🥋"],"uniform":["🥋"],"croissant":["🥐"],"crescent roll":["🥐"],"french":["🥐","🥖","🍟"],"food":["🥐","🥑","🥒","🥓","🥔","🥕","🥖","🥗","🥘","🥙","🥚","🥜","🥝","🥞","🦐","🦑"],"bread":["🥐","🥖"],"avocado":["🥑"],"fruit":["🥑","🥝","🍇","🍈","🍉","🍊","🍋","🍌","🍍","🍎","🍏","🍐","🍑","🍒","🍓","🍅"],"cucumber":["🥒"],"pickle":["🥒"],"vegetable":["🥒","🥔","🥕","🥜","🍅","🍆"],"bacon":["🥓"],"meat":["🥓","🍖"],"potato":["🥔","🍠"],"carrot":["🥕"],"baguette":["🥖"],"green":["🥗","💚","🍏","📗","🔰"],"salad":["🥗"],"paella":["🥘"],"casserole":["🥘"],"pan":["🥘","🍳"],"shallow":["🥘"],"kebab":["🥙","🍢"],"falafel":["🥙"],"gyro":["🥙"],"flatbread":["🥙"],"stuffed":["🥙"],"egg":["🥚","🍳"],"milk":["🥛","🍼"],"peanut":["🥜"],"nut":["🥜","🔩"],"kiwi":["🥝"],"hotcake":["🥞"],"crêpe":["🥞"],"pancake":["🥞"],"eagle":["🦅"],"bird":["🦅","🦆","🦉","🦃","🐔","🐓","🐣","🐤","🐥","🐦","🐧","🕊"],"duck":["🦆"],"bat":["🦇","🏏","🏓"],"vampire":["🦇"],"shark":["🦈"],"fish":["🦈","🐠","🐡","🍥","🎣","♓"],"owl":["🦉"],"wise":["🦉"],"fox":["🦊"],"butterfly":["🦋"],"insect":["🦋","🐛","🐜","🐝","🐞","🕷"],"pretty":["🦋"],"deer":["🦌"],"gorilla":["🦍"],"lizard":["🦎"],"reptile":["🦎"],"rhinoceros":["🦏"],"shrimp":["🦐","🍤"],"small":["🦐","🤪"],"shellfish":["🦐"],"squid":["🦑"],"molusc":["🦑"],"grin":["😀","😁","😸"],"eye":["😁","😄","😊","😎","😍","😙","😚","😜","😝","😸","😻","😽","👀","👁‍🗨","👓","🕶","🎯","🤪"],"smile":["😁","😃","😄","😅","😆","😊","😋","😎","😍","😙","☺","🙂","😇","😈","😺","😸","😻","😼"],"joy":["😂","😹"],"tear":["😂","😢","😭","😹","😿"],"mouth":["😃","😄","😆","😶","😮","🤐","🤑","😦","😰","😺"],"open":["😃","😄","😅","😆","😮","😦","😰","😺","👐","📖","📬","📭","📂","🔓"],"cold":["😅","😓","😷","😰","🏔","🌨","❄","☃","⛄","💧"],"sweat":["😅","😓","😰","💦","💧"],"satisfied":["😆"],"wink":["😉","😜"],"blush":["😊"],"delicious":["😋"],"savouring":["😋"],"um":["😋"],"yum":["😋"],"bright":["😎","☀","🌝","🌞","🔆"],"cool":["😎","🆒"],"eyewear":["😎","👓","🕶"],"glasses":["😎","🕶"],"sun":["😎","🌻","🌄","🌅","🌆","🌇","🌞","⛅","🌤","🌥","🌦","⛱"],"sunglasses":["😎"],"love":["😍","😻","💑","💕","💌","🏩"],"kiss":["😘","😗","😙","😚","😽","💋"],"closed":["😚","📕","📫","📪","🔒","🔐"],"outlined":["☺","❔","❕","🔳"],"relaxed":["☺"],"hug":["🤗"],"hugging":["🤗"],"angel":["😇","👼"],"fairy tale":["😇","😈","👿","👹","👺","💀","👻","👽","👾","👸","👼","🐲","🐉","🔮"],"fantasy":["😇","😈","👿","👹","👺","👻","👽","👾","👸","👼","🔮"],"halo":["😇"],"innocent":["😇"],"thinking":["🤔"],"deadpan":["😐"],"neutral":["😐"],"expressionless":["😑"],"inexpressive":["😑"],"unexpressive":["😑"],"quiet":["😶","🔇","🔕"],"silent":["😶","🔇","🔕"],"eyes":["🙄","🤩"],"smirk":["😏"],"persevere":["😣"],"disappointed":["😥","😞"],"relieved":["😥","😌"],"whew":["😥"],"sympathy":["😮"],"zipper":["🤐"],"hushed":["😯"],"stunned":["😯"],"surprised":["😯","🙀"],"sleep":["😪","😴","💤","🛌","🛏"],"tired":["😫","😩"],"zzz":["😴"],"geek":["🤓"],"nerd":["🤓"],"tongue":["😛","😜","😝"],"joke":["😜"],"horrible":["😝"],"taste":["😝"],"frown":["☹","🙁","😦","🙍"],"unamused":["😒"],"unhappy":["😒"],"dejected":["😔"],"pensive":["😔"],"confused":["😕"],"confounded":["😖"],"upside-down":["🙃"],"doctor":["😷","👨‍⚕","👩‍⚕","🏥","💉","💊"],"mask":["😷","🎭"],"sick":["😷","🤒","💉","💊","🤮"],"ill":["🤒"],"thermometer":["🤒"],"bandage":["🤕"],"hurt":["🤕"],"injury":["🤕"],"money":["🤑","💰","💴","💵","💶","💷","💸","💳","💹","💱","💲"],"astonished":["😲"],"shocked":["😲","🤯"],"totally":["😲"],"worried":["😟"],"triumph":["😤"],"won":["😤"],"cry":["😢","😭","😿"],"sad":["😢","😭","😿"],"sob":["😭"],"anguished":["😧"],"fear":["😨","😱"],"fearful":["😨","😱"],"scared":["😨","😱"],"weary":["😩","🙀"],"grimace":["😬"],"blue":["😰","💙","📘","🔷","🔹","🔵"],"rushed":["😰"],"munch":["😱"],"scream":["😱"],"dazed":["😳"],"flushed":["😳"],"dizzy":["😵","🌀"],"angry":["😡","😠","💢","🗯"],"mad":["😡","😠","💢","🗯"],"pouting":["😡","😾","🙎","🙎‍♀","🙎‍♂"],"rage":["😡"],"red":["😡","🍎","🀄","🏮","🔼","🔽","🔺","🔻","🔴"],"horns":["😈","🤘"],"demon":["👿"],"devil":["👿"],"imp":["👿"],"creature":["👹","👺","👻","👽","👾"],"monster":["👹","👺","💀","☠","👻","👽","👾","🤖","💩"],"death":["💀","☠","⚰","⚱"],"crossbones":["☠"],"skull":["☠"],"extraterrestrial":["👽","👾"],"ufo":["👽","👾"],"alien":["👾"],"robot":["🤖"],"comic":["💩","💪","💤","💢","💣","💥","💦","💨","💫","💬","💭","💧","💡","💠"],"dung":["💩"],"poo":["💩"],"poop":["💩"],"cat":["😺","😸","😹","😻","😼","😽","🙀","😿","😾","🐱"],"ironic":["😼"],"wry":["😼"],"oh":["🙀"],"forbidden":["🙈","🙉","🙊","🙅","🙅‍♀","🙅‍♂","🔕","⛔","🚫","🚳","🚭","🚯","🚷","📵","🔞"],"gesture":["🙈","🙉","🙊","🙍","🙍‍♀","🙍‍♂","🙎","🙎‍♀","🙎‍♂","🙅","🙅‍♀","🙅‍♂","🙆","🙆‍♀","🙆‍♂","🙋","🙋‍♀","🙋‍♂","🙇","🙇‍♀","🙇‍♂","🙌","🙏"],"monkey":["🙈","🙉","🙊","🐵","🐒"],"no":["🙈","🙉","🙊","🙅","🙅‍♀","🙅‍♂","🔕","⛔","🚫","🚳","🚭","🚯","🚷","📵","🔞"],"not":["🙈","🙉","🙊","🙅","🔕","⛔","🚫","🚳","🚭","🚯","🚷","📵","🔞"],"prohibited":["🙈","🙉","🙊","🙅","🙅‍♀","🙅‍♂","🔕","⛔","🚳","🚭","🚯","🚷","📵","🔞"],"see":["🙈"],"hear":["🙉"],"speak":["🙊","🗣"],"boy":["👦"],"young":["👦","👧","👶","🌱","🧒"],"Virgo":["👧"],"zodiac":["👧","👬","🦁","🐂","🐏","🐐","🐍","🐟","🦀","🦂","🏺","⚖","🏹","♈","♉","♊","♋","♌","♍","♎","♏","♐","♑","♒","♓","⛎"],"healthcare":["👨‍⚕","👩‍⚕"],"nurse":["👨‍⚕","👩‍⚕"],"therapist":["👨‍⚕","👩‍⚕"],"student":["👨‍🎓","👩‍🎓"],"graduate":["👨‍🎓","👩‍🎓"],"farmer":["👨‍🌾","👩‍🌾"],"rancher":["👨‍🌾","👩‍🌾"],"gardener":["👨‍🌾","👩‍🌾"],"cook":["👨‍🍳","👩‍🍳"],"chef":["👨‍🍳","👩‍🍳"],"professor":["👨‍🏫","👩‍🏫"],"instructor":["👨‍🏫","👩‍🏫"],"teacher":["👨‍🏫","👩‍🏫"],"industrial":["👨‍🏭","👩‍🏭"],"assembly":["👨‍🏭","👩‍🏭"],"factory":["👨‍🏭","👩‍🏭"],"worker":["👨‍🏭","👩‍🏭","👷","👷‍♀","👷‍♂"],"artist":["👨‍🎨","👩‍🎨"],"palette":["👨‍🎨","👩‍🎨","🎨"],"firefighter":["👨‍🚒","👩‍🚒"],"firetruck":["👨‍🚒","👩‍🚒"],"pilot":["👨‍✈","👩‍✈"],"plane":["👨‍✈","👩‍✈"],"astronaut":["👨‍🚀","👩‍🚀"],"rocket":["👨‍🚀","👩‍🚀"],"singer":["👨‍🎤","👩‍🎤"],"entertainer":["👨‍🎤","👩‍🎤"],"rock":["👨‍🎤","👩‍🎤"],"star":["👨‍🎤","👩‍🎤","💫","🌃","⭐","🌟","🌠","✨","✡","🔯","✴","🤩"],"actor":["👨‍🎤","👩‍🎤"],"technologist":["👨‍💻","👩‍💻"],"coder":["👨‍💻","👩‍💻"],"software":["👨‍💻","👩‍💻"],"developer":["👨‍💻","👩‍💻"],"inventor":["👨‍💻","👩‍💻"],"scientist":["👨‍🔬","👩‍🔬"],"engineer":["👨‍🔬","👩‍🔬"],"mathematician":["👨‍🔬","👩‍🔬"],"chemist":["👨‍🔬","👩‍🔬"],"physicist":["👨‍🔬","👩‍🔬"],"biologist":["👨‍🔬","👩‍🔬"],"office":["👨‍💼","👩‍💼"],"business":["👨‍💼","👩‍💼","🕴"],"manager":["👨‍💼","👩‍💼"],"architect":["👨‍💼","👩‍💼"],"white-collar":["👨‍💼","👩‍💼"],"tradesperson":["👨‍🔧","👩‍🔧"],"mechanic":["👨‍🔧","👩‍🔧"],"plumber":["👨‍🔧","👩‍🔧"],"electrician":["👨‍🔧","👩‍🔧"],"justice":["👨‍⚖","⚖","♎"],"scales":["👨‍⚖","👩‍⚖","⚖","♎"],"judge":["👩‍⚖"],"old":["👴","👵","🗝","🧓"],"baby":["👶","👼","🐣","🐤","🐥","🍼","🚼"],"blond":["👱","👱‍♂"],"blonde":["👱‍♀"],"cop":["👮","👮‍♀","👮‍♂"],"officer":["👮","👮‍♀","👮‍♂"],"police":["👮","👮‍♀","👮‍♂","🚓","🚔","🚨"],"gua pi mao":["👲"],"turban":["👳","👳‍♀","👳‍♂"],"construction":["👷","👷‍♀","👷‍♂","🏗"],"aid":["⛑"],"helmet":["⛑"],"guard":["💂","💂‍♀","💂‍♂"],"sleuth":["🕵","🕵‍♀","🕵‍♂"],"spy":["🕵","🕵‍♀","🕵‍♂"],"detective":["🕵","🕵‍♀","🕵‍♂"],"father":["🎅"],"santa":["🎅"],"bunny ear":["👯","👯‍♀","👯‍♂"],"dancer":["👯","👯‍♀","👯‍♂"],"partying":["👯","👯‍♀","👯‍♂"],"massage":["💆","💆‍♀","💆‍♂"],"salon":["💆"],"barber":["💇","💈"],"beauty":["💇"],"parlor":["💇"],"haircut":["💇","💇‍♀","💇‍♂","💈"],"bride":["👰"],"veil":["👰"],"wedding":["👰"],"frowning":["🙍‍♀","🙍‍♂"],"OK":["🙆","🙆‍♀","🙆‍♂","👌","🆗"],"tipping":["💁"],"help":["💁","🆘"],"information":["💁","ℹ"],"sassy":["💁","💁‍♀","💁‍♂"],"tipping hand":["💁‍♀","💁‍♂"],"happy":["🙋"],"raising hand":["🙋‍♀","🙋‍♂"],"apology":["🙇","🙇‍♀","🙇‍♂"],"bow":["🙇","🙏","🏹"],"sorry":["🙇","🙇‍♀","🙇‍♂"],"favor":["🙇‍♀","🙇‍♂"],"bowing":["🙇‍♀","🙇‍♂"],"hooray":["🙌"],"ask":["🙏"],"folded":["🙏"],"please":["🙏"],"pray":["🙏"],"thanks":["🙏"],"head":["🗣"],"silhouette":["🗣","👤","👥"],"speaking":["🗣"],"bust":["👤","👥"],"hike":["🚶","🚶‍♀","🚶‍♂"],"walk":["🚶","🚶‍♀","🚶‍♂"],"walking":["🚶"],"marathon":["🏃","🏃‍♀","🏃‍♂"],"running":["🏃","🏃‍♀","🏃‍♂","💨","🎽"],"racing":["🏃‍♀","🏃‍♂","🐎","🏇","🏎","🏍","🏁"],"dancing":["💃"],"suit":["🕴"],"couple":["💏","💑","👫","👬","👭"],"family":["👪"],"hold":["👫","👬","👭"],"Gemini":["👬"],"twins":["👬","♊"],"skin tone":["🏻","🏼","🏽","🏾","🏿"],"type 1–2":["🏻"],"type 3":["🏼"],"type 4":["🏽"],"type 5":["🏾"],"type 6":["🏿"],"biceps":["💪"],"flex":["💪"],"muscle":["💪"],"index":["👈","👉","☝","👆","👇","🗂","📇"],"point":["👈","👉","☝","👆","👇"],"up":["☝","👆","👍","🔝","🆙"],"down":["👇","👎","📩","📉","⬇","⤵","🔽","⏬","🔻"],"v":["✌"],"victory":["✌"],"spock":["🖖"],"vulcan":["🖖"],"rock-on":["🤘"],"splayed":["🖐"],"clenched":["✊","👊"],"punch":["✊","👊"],"+1":["👍"],"thumb":["👍","👎"],"-1":["👎"],"wave":["👋","🌊"],"waving":["👋","🏳","🏴"],"clap":["👏"],"write":["✍"],"care":["💅"],"cosmetics":["💅","💄"],"manicure":["💅"],"nail":["💅"],"polish":["💅"],"body":["👂","👃","👁","👅"],"clothing":["👣","👓","👔","👕","👖","👗","👘","👙","👚","👛","👜","👝","👞","👟","👠","👡","👢","👑","👒","🎩","🎓","📿","🌂","☂","☔"],"footprint":["👣"],"print":["👣","🐾"],"speech bubble":["👁‍🗨"],"witness":["👁‍🗨"],"lips":["👄","💋"],"arrow":["💘","📲","📩","🏹","⬆","↗","➡","↘","⬇","↙","⬅","↖","↕","↔","↩","↪","⤴","⤵","🔃","🔄","🔙","🔚","🔛","🔜","🔝","🔀","🔁","🔂","▶","⏩","⏭","⏯","◀","⏪","⏮","🔼","⏫","🔽","⏬"],"cupid":["💘"],"heart":["❤","💟","💌"],"beating":["💓"],"heartbeat":["💓"],"pulsating":["💓"],"break":["💔"],"broken":["💔"],"excited":["💖","💗"],"sparkle":["💖","🌟","🎇","✨","❇"],"growing":["💗"],"pulse":["💗"],"nervous":["💗"],"yellow":["💛","🔰"],"purple":["💜"],"ribbon":["💝","🎗"],"valentine":["💝"],"revolving":["💞","🚨"],"exclamation":["❣","‼","⁉","❕","❗"],"mark":["❣","📑","🔖","🔛","✅","✔","❌","❎","〽","‼","⁉","❓","❔","❕","❗","™","🆙"],"punctuation":["❣","‼","⁉","❓","❔","❕","❗","〰"],"letter":["💌","✉","📧","📨","📩","📤","📥"],"mail":["💌","📧","📨","📩","📤","📥","📫","📪","📬","📭","📮"],"boom":["💥"],"splashing":["💦"],"dash":["💨","〰"],"balloon":["💬","🗯","💭"],"bubble":["💬","🗯","💭"],"dialog":["💬","🗨"],"speech":["💬","🗨"],"thought":["💭"],"hole":["🕳","⛳"],"eyeglasses":["👓"],"dark":["🕶","🌑"],"shirt":["👕","🎽"],"tshirt":["👕"],"pants":["👖"],"trousers":["👖"],"swim":["👙","🏊","🏊‍♀","🏊‍♂"],"coin":["👛"],"bag":["👜","👝","🛍","🎒","💰"],"purse":["👜"],"pouch":["👝"],"hotel":["🛍","🏩","🛎","🛌","🛏","🛋"],"shopping":["🛍","🛒"],"satchel":["🎒"],"school":["🎒"],"shoe":["👞","👟","👠","👡","👢"],"athletic":["👟"],"sneaker":["👟"],"heel":["👠"],"sandal":["👡"],"boot":["👢"],"king":["👑"],"queen":["👑"],"top":["🎩","🔝"],"tophat":["🎩"],"cap":["🎓"],"graduation":["🎓"],"beads":["📿"],"necklace":["📿"],"prayer":["📿","🤲"],"religion":["📿","⛪","🕋","🕌","🕍","⛩","🛐","🕉","✡","☸","☯","✝","☦","☪","🕎"],"makeup":["💄"],"diamond":["💍","💎","🔶","🔷","🔸","🔹","💠"],"gem":["💎"],"jewel":["💎"],"dog":["🐶","🐩"],"pet":["🐶","🐕","🐱","🐈","🐹","🐰","🐇"],"wolf":["🐺"],"Leo":["🦁"],"lion":["🦁","♌"],"tiger":["🐯","🐅"],"leopard":["🐆"],"horse":["🐴","🎠","🏇"],"racehorse":["🐎","🏇"],"equestrian":["🐎"],"unicorn":["🦄"],"cow":["🐮","🐄"],"bull":["🐂","🎯","♉"],"Taurus":["🐂"],"buffalo":["🐃"],"pig":["🐷","🐗","🐽"],"sow":["🐖"],"nose":["🐽"],"Aries":["🐏"],"sheep":["🐏","🐑"],"male":["🐏"],"female":["🐑"],"Capricorn":["🐐"],"dromedary":["🐪"],"hump":["🐪","🐫"],"bactrian":["🐫"],"camel":["🐫"],"elephant":["🐘"],"mouse":["🐭","🐁"],"rat":["🐀"],"hamster":["🐹"],"bunny":["🐰","🐇"],"rabbit":["🐰"],"chipmunk":["🐿"],"bear":["🐻","🐨"],"panda":["🐼"],"feet":["🐾"],"paw":["🐾"],"turkey":["🦃"],"chicken":["🐔","🍗"],"rooster":["🐓"],"chick":["🐣","🐤","🐥"],"hatching":["🐣"],"penguin":["🐧"],"fly":["🕊","💸"],"peace":["🕊","☮"],"frog":["🐸"],"crocodile":["🐊"],"turtle":["🐢"],"tortoise":["🐢"],"terrapin":["🐢"],"bearer":["🐍","♒","⛎"],"Ophiuchus":["🐍"],"serpent":["🐍","⛎"],"dragon":["🐲"],"spouting":["🐳"],"whale":["🐳","🐋"],"flipper":["🐬"],"Pisces":["🐟"],"tropical":["🐠","🍹"],"octopus":["🐙"],"shell":["🐚"],"spiral":["🐚","🗒","🗓"],"Cancer":["🦀"],"snail":["🐌"],"bee":["🐝"],"beetle":["🐞"],"ladybird":["🐞"],"ladybug":["🐞"],"spider":["🕸"],"web":["🕸"],"scorpio":["🦂","♏"],"Scorpius":["🦂"],"blossom":["🌸"],"cherry":["🌸","🍒"],"plant":["🏵","☘","🌵","🌰"],"tree":["🌲","🌳","🌴","🎄","🎋"],"deciduous":["🌳"],"shedding":["🌳"],"ear":["🌾","🌽"],"rice":["🌾","🍘","🍙","🍚","🍛"],"grain":["🌾"],"leaf":["🌿","🍀","🍁","🍂","🍃","🔰"],"clover":["🍀"],"four":["🍀","🕓","🕟"],"falling":["🍁","🍂","🌠"],"maple":["🍁"],"blow":["🍃","🌬"],"flutter":["🍃"],"wind":["🍃","🌬","🎐"],"grape":["🍇"],"orange":["🍊","📙","🔶","🔸"],"citrus":["🍋"],"apple":["🍎","🍏"],"berry":["🍓"],"aubergine":["🍆"],"corn":["🌽"],"maize":["🌽"],"maze":["🌽"],"hot":["🌶","☕","♨"],"pepper":["🌶"],"toadstool":["🍄"],"loaf":["🍞"],"cheese":["🧀","🍕"],"bone":["🍖","🍗"],"leg":["🍗"],"poultry":["🍗"],"burger":["🍔"],"fries":["🍟"],"slice":["🍕","🍰"],"frankfurter":["🌭"],"hotdog":["🌭"],"sausage":["🌭"],"mexican":["🌮","🌯"],"wrap":["🌯"],"popcorn":["🍿"],"pot":["🍲","🍯"],"stew":["🍲"],"bento":["🍱"],"box":["🍱","🎁","📤","📥","📦","🗳","🗃","☑"],"cracker":["🍘"],"Japanese":["🍙","🍡","🏣","🏯","🎋","🎌","🎍","🎎","🎴","🔰","🈁","🈂","🈷","🈶","🈯","🉐","🈹","🈚","🈲","🉑","🈸","🈴","🈳","㊗","㊙","🈺","🈵"],"cooked":["🍚"],"curry":["🍛"],"bowl":["🍜"],"noodle":["🍜"],"ramen":["🍜"],"steaming":["🍜","☕","♨"],"pasta":["🍝"],"roasted":["🍠"],"sweet":["🍠","🍡","🍦","🍧","🍨","🍩","🍪","🎂","🍰","🍫","🍬","🍭","🍮","🍯"],"seafood":["🍢"],"skewer":["🍢","🍡"],"stick":["🍢","🍡","🏑","🏒"],"sushi":["🍣"],"fried":["🍤"],"prawn":["🍤"],"tempura":["🍤"],"cake":["🍥","🎂","🍰"],"pastry":["🍥","🎂","🍰"],"swirl":["🍥"],"dessert":["🍡","🍦","🍧","🍨","🍩","🍪","🎂","🍰","🍫","🍬","🍭","🍮"],"cream":["🍦","🍨"],"ice":["🍦","🍧","🍨","⛸","🏒"],"icecream":["🍦"],"soft":["🍦","🔈"],"shaved":["🍧"],"donut":["🍩"],"birthday":["🎂"],"bar":["🍫","🍶","🍾","🍷","🍸","🍹","🍺","🍻","🏮","📊","⏸","📶"],"chocolate":["🍫"],"candy":["🍭"],"pudding":["🍮"],"honey":["🍯"],"honeypot":["🍯"],"bottle":["🍼","🍶","🍾"],"beverage":["☕","🍵","🍶","🍷"],"coffee":["☕"],"tea":["☕","🍵"],"cup":["🍵","🍶"],"teacup":["🍵"],"cork":["🍾"],"popping":["🍾"],"wine":["🍷"],"cocktail":["🍸"],"beer":["🍺","🍻"],"mug":["🍺","🍻"],"cooking":["🍽","🍴","🏺","🔪"],"fork":["🍽","🍴"],"knife":["🍽","🍴","🗡","🔪"],"plate":["🍽"],"frying":["🍳"],"Aquarius":["🏺"],"jug":["🏺"],"tool":["🏺","⚓","🔥","🔍","🔎","🔬","🔭","🔦","✂","🔨","⛏","⚒","🛠","🔧","🔩","⚙","🗜","⚗","⚖","💉","🔪","🔫","🏹","🔮","🔰","🔱"],"weapon":["🏺","🗡","🔪","⚔","🔫","🛡","🏹"],"Africa":["🌍"],"earth":["🌍","🌎","🌏","🌐"],"Europe":["🌍"],"globe":["🌍","🌎","🌏","🌐"],"world":["🌍","🌎","🌏","🌐","🗺"],"Americas":["🌎"],"Asia":["🌏"],"Australia":["🌏"],"meridians":["🌐"],"map":["🗺","🗾"],"mountain":["🏔","⛰","🌋","🗻","🌄","🚞","🚠","🚵","🚵‍♀","🚵‍♂"],"snow":["🏔","🌨","❄","☃","⛄","🎿","⛷","🏂"],"eruption":["🌋"],"fuji":["🗻"],"camping":["🏕","⛺"],"beach":["🏖"],"umbrella":["🏖","🌂","☔","⛱"],"desert":["🏜","🏝"],"island":["🏝"],"park":["🏞"],"stadium":["🏟"],"classical":["🏛"],"house":["🏘","🏚","🏠","🏡"],"city":["🏙","🌆"],"derelict":["🏚"],"home":["🏠","🏡"],"garden":["🏡"],"Christian":["⛪","✝","☦"],"islam":["🕋","🕌","☪"],"Muslim":["🕋","🕌","☪"],"Jew":["🕍","✡"],"Jewish":["🕍","✡"],"temple":["🕍"],"shinto":["⛩"],"shrine":["⛩"],"building":["🏢","🏦","🏨","🏫","🏭"],"post":["🏣","🏤","📯","🚩"],"European":["🏤","🏰"],"convenience":["🏪"],"store":["🏪","🏬"],"department":["🏬"],"castle":["🏯"],"chapel":["💒"],"romance":["💒"],"Tokyo":["🗼"],"tower":["🗼"],"liberty":["🗽"],"statue":["🗽","🗿"],"Japan":["🗾"],"fountain":["⛲","🖋"],"fog":["🌁"],"night":["🌃","🌉"],"morning":["🌄","🌅"],"sunrise":["🌄"],"dusk":["🌆","🌇"],"evening":["🌆"],"landscape":["🌆"],"sunset":["🌆"],"bridge":["🌉"],"hotsprings":["♨"],"springs":["♨"],"space":["🌌","🚀","🛰","☄"],"carousel":["🎠"],"amusement park":["🎡","🎢"],"ferris":["🎡"],"wheel":["🎡","☸"],"coaster":["🎢"],"roller":["🎢"],"pole":["💈","🎣"],"circus":["🎪"],"tent":["🎪"],"art":["🎭","🖼","🎨"],"performing":["🎭"],"theater":["🎭"],"theatre":["🎭"],"frame":["🖼"],"museum":["🖼","🎨"],"painting":["🖼","🎨","🖌"],"picture":["🖼"],"game":["🎰","🎱","🎳","🏏","🏐","🏑","🏒","🏓","🏸","🎯","🎮","🕹","🎲","♠","♥","♦","♣","🃏","🀄","🎴"],"slot":["🎰"],"engine":["🚂","🚒"],"railway":["🚂","🚃","🚄","🚅","🚆","🚈","🚉","🚞","🛤","🚟"],"steam":["🚂"],"train":["🚂","🚃","🚄","🚅","🚉","🛤"],"car":["🚃","🚞","🚋","🚓","🚔","🚗","🚘","🚨","🚡","🏎"],"electric":["🚃","⚡","🔌","💡","🔦"],"tram":["🚃","🚋","🚎"],"trolleybus":["🚃","🚊","🚋"],"shinkansen":["🚄","🚅"],"speed":["🚄","🚅"],"bullet":["🚅"],"subway":["🚇"],"vehicle":["🚝","🚌","🚑","🚕","🚜","🚁"],"bus":["🚍","🚎","🚏","🚐"],"oncoming":["🚍","🚔","🚖","🚘"],"trolley":["🚎","🛒"],"busstop":["🚏"],"stop":["🚏","⏹","🛑"],"fire":["🚒"],"truck":["🚒","🚚","🚛"],"patrol":["🚓"],"taxi":["🚖"],"automobile":["🚘"],"recreational":["🚙"],"sport utility":["🚙"],"delivery":["🚚"],"lorry":["🚛"],"semi":["🚛"],"bike":["🚲","🚵","🚵‍♀","🚵‍♂","🚳"],"fuel":["⛽"],"fuelpump":["⛽"],"gas":["⛽"],"pump":["⛽"],"station":["⛽"],"highway":["🛣"],"road":["🛣"],"beacon":["🚨"],"light":["🚨","🚥","🚦","🕯","💡","🔦","🏮"],"signal":["🚥","🚦","📶"],"traffic":["🚥","🚦","🚸","⛔"],"barrier":["🚧"],"ship":["⚓","🛳","🔱"],"boat":["⛵","🚣","🚣‍♀","🚣‍♂","🚤","⛴","🛥","🚢","🛶"],"resort":["⛵"],"sea":["⛵"],"yacht":["⛵"],"rowboat":["🚣","🚣‍♀","🚣‍♂"],"passenger":["🛳","⛴","🚢"],"motorboat":["🛥"],"aeroplane":["✈","🛩","🛫","🛬"],"airplane":["✈","🛩","🛫","🛬"],"check-in":["🛫"],"departure":["🛫"],"departures":["🛫"],"arrivals":["🛬"],"arriving":["🛬"],"landing":["🛬"],"chair":["💺"],"suspension":["🚟"],"cable":["🚠","🚡"],"gondola":["🚠","🚡"],"aerial":["🚡"],"tramway":["🚡"],"bell":["🛎","🎐","🔔","🔕"],"bellhop":["🛎"],"door":["🚪"],"couch":["🛋"],"lamp":["🛋"],"toilet":["🚽"],"bathtub":["🛀"],"bath":["🛀","🛁"],"sand":["⌛","⏳"],"timer":["⌛","⏳","⏲"],"hourglass":["⏳"],"clock":["⌚","⏰","⏱","⏲","🕰","🕛","🕧","🕐","🕜","🕑","🕝","🕒","🕞","🕓","🕟","🕔","🕠","🕕","🕡","🕖","🕢","🕗","🕣","🕘","🕤","🕙","🕥","🕚","🕦"],"alarm":["⏰"],"00":["🕛","🕐","🕑","🕒","🕓","🕔","🕕","🕖","🕗","🕘","🕙","🕚"],"12:00":["🕛"],"o’clock":["🕛","🕐","🕑","🕒","🕓","🕔","🕕","🕖","🕗","🕘","🕙","🕚"],"twelve":["🕛","🕧"],"12:30":["🕧"],"thirty":["🕧","🕜","🕝","🕞","🕟","🕠","🕡","🕢","🕣","🕤","🕥","🕦"],"1:00":["🕐"],"one":["🕐","🕜"],"1:30":["🕜"],"2:00":["🕑"],"two":["🕑","🕝"],"2:30":["🕝"],"3:00":["🕒"],"three":["🕒","🕞"],"3:30":["🕞"],"4:00":["🕓"],"4:30":["🕟"],"5:00":["🕔"],"five":["🕔","🕠"],"5:30":["🕠"],"6:00":["🕕"],"six":["🕕","🕡"],"6:30":["🕡"],"7:00":["🕖"],"seven":["🕖","🕢"],"7:30":["🕢"],"8:00":["🕗"],"eight":["🕗","🕣","🎱"],"8:30":["🕣"],"9:00":["🕘"],"nine":["🕘","🕤"],"9:30":["🕤"],"10:00":["🕙"],"ten":["🕙","🕥"],"10:30":["🕥"],"11:00":["🕚"],"eleven":["🕚","🕦"],"11:30":["🕦"],"moon":["🌑","🌒","🌓","🌔","🌕","🌖","🌗","🌘","🌙","🌚","🌛","🌜","🌝","🎑"],"crescent":["🌒","🌘","🌙"],"waxing":["🌒","🌔"],"quarter":["🌓","🌗","🌛","🌜"],"gibbous":["🌔","🌖"],"full":["🌕","🌝","💯"],"waning":["🌖","🌘"],"weather":["🌡","☁"],"rays":["☀"],"sunny":["☀"],"glittery":["🌟"],"glow":["🌟"],"shining":["🌟"],"shooting":["🌠"],"cloud":["⛅","⛈","🌤","🌥","🌦","🌧","🌨","🌩","🌪","🌫","🌬"],"rain":["⛈","🌦","🌧","🌈","🌂","☂","☔","⛱"],"thunder":["⛈"],"lightning":["🌩","⚡"],"whirlwind":["🌪"],"twister":["🌀"],"typhoon":["🌀"],"drop":["☔","💧"],"danger":["⚡"],"electricity":["⚡","🔌"],"voltage":["⚡"],"zap":["⚡"],"snowman":["⛄"],"flame":["🔥"],"ocean":["🌊"],"halloween":["🎃"],"jack":["🎃"],"lantern":["🎃","🏮"],"fireworks":["🎇"],"party":["🎉"],"popper":["🎉"],"tada":["🎉"],"confetti":["🎊"],"banner":["🎋"],"crossed":["🎌","⚔","🔀"],"bamboo":["🎍"],"pine":["🎍"],"doll":["🎎"],"festival":["🎎"],"carp":["🎏"],"streamer":["🎏"],"chime":["🎐"],"ceremony":["🎑"],"gift":["🎁"],"present":["🎁"],"wrapped":["🎁"],"military":["🎖"],"reminder":["🎗"],"cinema":["🎞","🎥","📽"],"film":["🎞","📽","🎦"],"frames":["🎞"],"movie":["🎞","🎥","🎬","📽","🎦"],"admission":["🎟","🎫"],"ticket":["🎟"],"label":["🏷"],"soccer":["⚽"],"football":["⚽","🏈","🏉"],"hoop":["🏀"],"american":["🏈"],"rugby":["🏉"],"racquet":["🎾","🏸"],"8 ball":["🎱"],"billiard":["🎱"],"golf":["⛳","🏌","🏌‍♀","🏌‍♂"],"skate":["⛸"],"sash":["🎽"],"athletics":["🎽"],"ski":["🎿","⛷","🏂"],"snowboard":["🏂"],"surfing":["🏄","🏄‍♀","🏄‍♂"],"jockey":["🏇"],"lifter":["🏋","🏋"],"weight":["🏋","⚖"],"weight lifter":["🏋‍♀","🏋‍♂"],"bicycle":["🚴","🚴‍♀","🚴‍♂","🚵","🚵‍♀","🚵‍♂","🚳"],"biking":["🚴","🚴‍♀","🚴‍♂","🚵‍♀"],"cyclist":["🚴","🚴‍♀","🚴‍♂","🚵","🚵‍♀","🚵‍♂"],"bicyclist":["🚵"],"prize":["🏆"],"field":["🏑"],"hockey":["🏑","🏒"],"puck":["🏒"],"paddle":["🏓"],"table tennis":["🏓"],"ping pong":["🏓"],"birdie":["🏸"],"shuttlecock":["🏸"],"bullseye":["🎯"],"dart":["🎯"],"hit":["🎯"],"target":["🎯"],"controller":["🎮"],"video game":["🕹"],"dice":["🎲"],"die":["🎲"],"card":["♠","♥","♦","♣","🃏","🎴","💳","🗂","📇","🗃"],"wildcard":["🃏"],"mahjong":["🀄"],"playing":["🎴"],"mute":["🔇","🔕"],"speaker":["🔇"],"medium":["🔉"],"loud":["🔊","📢"],"public address":["📢"],"cheering":["📣"],"horn":["📯"],"postal":["📯"],"score":["🎼","💯"],"note":["🎵","🎶","💴","💵","💶","💷","💸","🗒"],"notes":["🎶"],"mic":["🎙","🎤"],"microphone":["🎙"],"studio":["🎙"],"level":["🎚"],"slider":["🎚"],"control":["🎛","🛂"],"knobs":["🎛"],"karaoke":["🎤"],"earbud":["🎧"],"instrument":["🎷","🎸","🎹","🎺","🎻"],"sax":["🎷"],"keyboard":["🎹"],"piano":["🎹"],"video":["📻","📽","📺","📷","📸","📹","📼"],"cell":["📱","📲","📶","📵","📳","📴"],"mobile":["📱","📲","📶","📵","📳","📴"],"telephone":["📱","📲","📞","📶","📵","📳","📴"],"receive":["📲","📨","📥"],"receiver":["📞"],"pager":["📟"],"fax":["📠"],"battery":["🔋"],"plug":["🔌"],"computer":["💻","🖥","🖨","⌨","🖱","🖲","💽","💾","💿","📀"],"pc":["💻"],"personal":["💻"],"desktop":["🖥"],"disk":["💽","💾","💿","📀"],"optical":["💽","💿","📀"],"minidisk":["💽"],"floppy":["💾"],"cd":["💿"],"blu-ray":["📀"],"dvd":["📀"],"clapper":["🎬"],"projector":["📽"],"tv":["📺"],"flash":["📸"],"tape":["📼"],"vhs":["📼"],"magnifying":["🔍","🔎"],"search":["🔍","🔎"],"science":["🔬","🔭"],"antenna":["📡","📶"],"dish":["📡"],"satellite":["📡"],"bulb":["💡"],"idea":["💡"],"torch":["🔦"],"book":["📔","📕","📖","📗","📘","📙","📚"],"cover":["📔"],"decorated":["📔"],"notebook":["📔","📓","📒"],"curl":["📃","➰","➿"],"document":["📃","📄"],"page":["📃","📄"],"paper":["📜","📰","🗞"],"news":["📰","🗞"],"newspaper":["🗞"],"rolled":["🗞"],"bookmark":["📑"],"marker":["📑"],"tabs":["📑"],"dollar":["💰","💵","💸","💲"],"moneybag":["💰"],"bank":["💴","💵","💶","💷","💸","💳","💹","🏧","💱"],"banknote":["💴","💵","💶","💷","💸"],"bill":["💴","💵","💶","💷","💸"],"currency":["💴","💵","💶","💷","💹","💱","💲"],"yen":["💴","💹"],"euro":["💶"],"pound":["💷"],"wings":["💸"],"credit":["💳"],"chart":["💹","📈","📉","📊"],"graph":["💹","📈","📉","📊"],"growth":["💹","📈"],"market":["💹"],"rise":["💹"],"trend":["💹","📈","📉"],"upward":["💹","📈"],"email":["✉","📧","📨","📩"],"e-mail":["📨","📩"],"envelope":["📨","📩"],"incoming":["📨"],"outgoing":["📩"],"sent":["📩","📤"],"outbox":["📤"],"tray":["📤","📥"],"inbox":["📥"],"parcel":["📦"],"mailbox":["📫","📪","📬","📭","📮"],"postbox":["📫","📪","📬","📭"],"lowered":["📪","📭"],"ballot":["🗳","☑"],"pencil":["✏","📝"],"nib":["✒","🔏"],"pen":["✒","🖋","🔏"],"ballpoint":["🖊"],"crayon":["🖍"],"briefcase":["💼"],"file":["📁","📂","🗃","🗄"],"folder":["📁","📂"],"dividers":["🗂"],"date":["📅"],"calendar":["📆","🗓"],"pad":["🗒","🗓"],"rolodex":["📇"],"clipboard":["📋"],"pin":["📌","📍"],"pushpin":["📍"],"paperclip":["📎","🖇"],"link":["🖇","🔗"],"ruler":["📏","📐"],"straight edge":["📏"],"set":["📐"],"triangle":["📐","▶","⏭","⏯","◀","⏮"],"cutting":["✂"],"cabinet":["🗄"],"filing":["🗄"],"wastebasket":["🗑"],"lock":["🔓","🔏","🔐","🔑","🗝"],"unlock":["🔓"],"ink":["🔏"],"privacy":["🔏"],"key":["🔐","🗝"],"secure":["🔐"],"password":["🔑"],"clue":["🗝"],"mining":["⛏"],"hammer":["⚒","🛠"],"pick":["⚒"],"wrench":["🛠","🔧"],"spanner":["🛠","🔧"],"bolt":["🔩"],"vice":["🗜"],"compress":["🗜"],"chemistry":["⚗"],"Libra":["⚖"],"chain":["⛓"],"needle":["💉"],"hocho":["🔪"],"swords":["⚔"],"gun":["🔫"],"handgun":["🔫"],"revolver":["🔫"],"archer":["🏹","♐"],"archery":["🏹"],"Sagittarius":["🏹"],"checkered":["🏁"],"chequered":["🏁"],"rainbow":["🏳‍🌈"],"smoking":["🚬","🚭"],"funeral":["⚱"],"urn":["⚱"],"ashes":["⚱"],"moyai":["🗿"],"oil":["🛢"],"crystal":["🔮"],"fortune":["🔮","🔯"],"atm":["🏧"],"automated":["🏧"],"teller":["🏧"],"litter":["🚮","🚯"],"litter bin":["🚮"],"drinking":["🚰"],"potable":["🚰"],"access":["♿"],"lavatory":["🚹","🚺","🚻","🚾"],"restroom":["🚹","🚺","🚻","🚾"],"wc":["🚹","🚺","🚾"],"WC":["🚻"],"changing":["🚼"],"closet":["🚾"],"passport":["🛂"],"customs":["🛃"],"baggage":["🛄","🛅"],"claim":["🛄"],"locker":["🛅"],"luggage":["🛅"],"warning":["⚠"],"child":["🚸"],"crossing":["🚸"],"pedestrian":["🚸","🚷"],"entry":["⛔","🚫"],"non-potable":["🚱"],"non-drinking":["🚱"],"radioactive":["☢"],"sign":["☢","☣","🛑"],"biohazard":["☣"],"cardinal":["⬆","➡","⬇","⬅"],"direction":["⬆","↗","➡","↘","⬇","↙","⬅","↖"],"north":["⬆"],"intercardinal":["↗","↘","↙","↖"],"northeast":["↗"],"east":["➡"],"southeast":["↘"],"south":["⬇"],"southwest":["↙"],"west":["⬅"],"northwest":["↖"],"clockwise":["🔃","🔁","🔂"],"reload":["🔃"],"anticlockwise":["🔄"],"counterclockwise":["🔄"],"withershins":["🔄"],"back":["🔙"],"end":["🔚"],"on":["🔛"],"soon":["🔜"],"worship":["🛐"],"atheist":["⚛"],"atom":["⚛"],"Hindu":["🕉"],"David":["✡"],"Buddhist":["☸"],"dharma":["☸"],"tao":["☯"],"taoist":["☯"],"yang":["☯"],"yin":["☯"],"candelabrum":["🕎"],"candlestick":["🕎"],"recycle":["♻"],"badge":["📛"],"name":["📛"],"fleur-de-lis":["⚜"],"beginner":["🔰"],"chevron":["🔰"],"anchor":["🔱"],"emblem":["🔱"],"trident":["🔱"],"circle":["⭕","⏺","Ⓜ","⚪","⚫","🔴","🔵"],"o":["⭕","🅾"],"check":["✅","☑","✔"],"cancel":["✖","❌"],"multiplication":["✖","❌"],"multiply":["✖","❌"],"x":["✖","❌"],"square":["❎","⏹","▪","▫","◻","◼","◽","◾","⬛","⬜","🔲","🔳"],"math":["➕","➖","➗"],"plus":["➕"],"minus":["➖"],"division":["➗"],"loop":["➰","➿"],"double":["➿","⏩","⏪","⏫","⏬","⏸"],"part":["〽"],"asterisk":["✳"],"exchange":["💱"],"bangbang":["‼"],"interrobang":["⁉"],"question":["⁉","❓","❔"],"wavy":["〰"],"copyright":["©"],"registered":["®"],"tm":["™"],"trademark":["™"],"ram":["♈"],"ox":["♉"],"crab":["♋"],"scorpion":["♏"],"goat":["♑"],"snake":["⛎"],"repeat":["🔁"],"once":["🔂"],"play":["▶","⏯"],"right":["▶","⏯"],"fast":["⏩"],"forward":["⏩"],"next scene":["⏭"],"next track":["⏭"],"pause":["⏯","⏸"],"left":["◀"],"reverse":["◀"],"rewind":["⏪"],"previous scene":["⏮"],"previous track":["⏮"],"button":["🔼","🔽","🔘","🔲","🔳"],"vertical":["⏸"],"record":["⏺"],"eject":["⏏"],"brightness":["🔅","🔆"],"dim":["🔅"],"low":["🔅"],"mode":["📳"],"vibration":["📳"],"off":["📴"],"keycap 10":["🔟"],"hundred":["💯"],"age restriction":["🔞"],"eighteen":["🔞"],"underage":["🔞"],"ABCD":["🔠"],"input":["🔠","🔡","🔢","🔣","🔤"],"latin":["🔠","🔡","🔤"],"letters":["🔠","🔡","🔤"],"uppercase":["🔠"],"abcd":["🔡"],"lowercase":["🔡"],"numbers":["🔢"],"〒♪&%":["🔣"],"abc":["🔤"],"alphabet":["🔤"],"a":["🅰"],"blood type":["🅰","🆎","🅱","🅾"],"ab":["🆎"],"b":["🅱"],"cl":["🆑"],"free":["🆓"],"i":["ℹ"],"id":["🆔"],"identity":["🆔"],"m":["Ⓜ"],"new":["🆕"],"ng":["🆖"],"parking":["🅿"],"sos":["🆘"],"versus":["🆚"],"vs":["🆚"],"katakana":["🈁","🈂"],"ココ":["🈁"],"“here”":["🈁"],"サ":["🈂"],"“service charge”":["🈂"],"ideograph":["🈷","🈶","🈯","🉐","🈹","🈚","🈲","🉑","🈸","🈴","🈳","㊗","㊙","🈺","🈵"],"月":["🈷"],"“monthly amount”":["🈷"],"有":["🈶"],"“not free of charge”":["🈶"],"指":["🈯"],"“reserved”":["🈯"],"得":["🉐"],"“bargain”":["🉐"],"割":["🈹"],"“discount”":["🈹"],"無":["🈚"],"“free of charge”":["🈚"],"禁":["🈲"],"“prohibited”":["🈲"],"可":["🉑"],"“acceptable”":["🉑"],"申":["🈸"],"“application”":["🈸"],"合":["🈴"],"“passing grade”":["🈴"],"空":["🈳"],"“vacancy”":["🈳"],"祝":["㊗"],"“congratulations”":["㊗"],"秘":["㊙"],"“secret”":["㊙"],"営":["🈺"],"“open for business”":["🈺"],"満":["🈵"],"“no vacancy”":["🈵"],"geometric":["▪","▫","◻","◼","◽","◾","⬛","⬜","🔶","🔷","🔸","🔹","🔺","🔻","💠","🔘","🔲","🔳","⚪","⚫","🔴","🔵"],"inside":["💠"],"radio":["🔘"],"octagonal":["🛑"],"cart":["🛒"],"scooter":["🛴","🛵"],"kick":["🛴"],"motor":["🛵"],"canoe":["🛶"],"skeptic":["🤨"],"distrust":["🤨"],"grinning":["🤩"],"large":["🤪"],"whoops":["🤭"],"stuffy":["🧐"],"gender-neutral":["🧒","🧑","🧓"],"headscarf":["🧕"],"hijab":["🧕"],"tichel":["🧕"],"mantilla":["🧕"],"wizard":["🧙","🧙‍♂️"],"witch":["🧙","🧙‍♀️"],"sorcerer":["🧙","🧙‍♂️"],"sorceress":["🧙","🧙‍♀️"],"Titania":["🧚","🧚‍♀️"],"Puck":["🧚","🧚‍♂️"],"Oberon":["🧚","🧚‍♂️"],"Dracula":["🧛","🧛‍♂️"],"undead":["🧛","🧛‍♀️","🧛‍♂️","🧟","🧟‍♀️","🧟‍♂️"],"mermaid":["🧜"],"merman":["🧜"],"merwoman":["🧜","🧜‍♀️"],"djinn":["🧞","🧞‍♀️","🧞‍♂️"],"walking dead":["🧟","🧟‍♀️","🧟‍♂️"],"sauna":["🧖","🧖‍♀️","🧖‍♂️"],"steam room":["🧖","🧖‍♀️","🧖‍♂️"],"yoga":["🧘","🧘‍♀️","🧘‍♂️"],"meditation":["🧘","🧘‍♀️","🧘‍♂️"],"ILY":["🤟"],"intelligent":["🧠"],"neck":["🧣"],"jacket":["🧥"],"baseball cap":["🧢"],"brontosaurus":["🦕"],"diplodocus":["🦕"],"brachiosaurus":["🦕"],"Tyrannosaurus Rex":["🦖"],"breakfast":["🥣"],"cereal":["🥣"],"congee":["🥣"],"twisted":["🥨"],"porkchop":["🥩"],"lambchop":["🥩"],"chop":["🥩"],"steak":["🥩"],"can":["🥫"],"potsticker":["🥟"],"gyōza":["🥟"],"jiaozi":["🥟"],"pierogi":["🥟"],"empanada":["🥟"],"oyster pail":["🥡"],"soda":["🥤"],"juice":["🥤"],"hashi":["🥢"],"UFO":["🛸"],"sledge":["🛷"],"sleigh":["🛷"]}}}
},{}],2:[function(require,module,exports){
(function (__dirname){
;(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define('Az', factory) :
  global.Az = factory()
}(this, function () { 'use strict';
  /** @namespace Az **/
  if (typeof require != 'undefined' && typeof exports === 'object' && typeof module !== 'undefined') {
    var fs = require('fs');
  }

  var Az = {
    load: function(url, responseType, callback) {
      if (fs) {
        fs.readFile(url, { encoding: responseType == 'json' ? 'utf8' : null }, function (err, data) {
          if (err) {
            callback(err);
            return;
          }

          if (responseType == 'json') {
            callback(null, JSON.parse(data));
          } else
          if (responseType == 'arraybuffer') {
            if (data.buffer) {
              callback(null, data.buffer);
            } else {
              var ab = new ArrayBuffer(data.length);
              var view = new Uint8Array(ab);
              for (var i = 0; i < data.length; ++i) {
                  view[i] = data[i];
              }
              callback(null, ab);
            }
          } else {
            callback(new Error('Unknown responseType'));
          }
        });
        return;
      }

      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, true);
      xhr.responseType = responseType;

      xhr.onload = function (e) {
        if (xhr.response) {
          callback && callback(null, xhr.response);
        }
      };

      xhr.send(null);
    },
    extend: function() {
      var result = {};
      for (var i = 0; i < arguments.length; i++) {
        for (var key in arguments[i]) {
          result[key] = arguments[i][key];
        }
      }
      return result;
    }
  };

  return Az;
}));

;(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? (module.exports = module.exports || {}) && (module.exports.DAWG = factory(module.exports)) :
  typeof define === 'function' && define.amd ? define('Az.DAWG', ['Az'], factory) :
  (global.Az = global.Az || {}) && (global.Az.DAWG = factory(global.Az))
}(this, function (Az) { 'use strict';
  var ROOT = 0,
      MISSING = -1,
      PRECISION_MASK = 0xFFFFFFFF,
      HAS_LEAF_BIT = 1 << 8,
      EXTENSION_BIT = 1 << 9,
      OFFSET_MAX = 1 << 21,
      IS_LEAF_BIT = 1 << 31;

  var CP1251 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12, 13: 13, 14: 14, 15: 15, 16: 16,
    17: 17, 18: 18, 19: 19, 20: 20, 21: 21, 22: 22, 23: 23, 24: 24, 25: 25, 26: 26, 27: 27, 28: 28, 29: 29, 30: 30, 31: 31, 32: 32,
    33: 33, 34: 34, 35: 35, 36: 36, 37: 37, 38: 38, 39: 39, 40: 40, 41: 41, 42: 42, 43: 43, 44: 44, 45: 45, 46: 46, 47: 47, 48: 48,
    49: 49, 50: 50, 51: 51, 52: 52, 53: 53, 54: 54, 55: 55, 56: 56, 57: 57, 58: 58, 59: 59, 60: 60, 61: 61, 62: 62, 63: 63, 64: 64,
    65: 65, 66: 66, 67: 67, 68: 68, 69: 69, 70: 70, 71: 71, 72: 72, 73: 73, 74: 74, 75: 75, 76: 76, 77: 77, 78: 78, 79: 79, 80: 80,
    81: 81, 82: 82, 83: 83, 84: 84, 85: 85, 86: 86, 87: 87, 88: 88, 89: 89, 90: 90, 91: 91, 92: 92, 93: 93, 94: 94, 95: 95, 96: 96,
    97: 97, 98: 98, 99: 99, 100: 100, 101: 101, 102: 102, 103: 103, 104: 104, 105: 105, 106: 106, 107: 107, 108: 108, 109: 109, 110: 110, 111: 111, 112: 112,
    113: 113, 114: 114, 115: 115, 116: 116, 117: 117, 118: 118, 119: 119, 120: 120, 121: 121, 122: 122, 123: 123, 124: 124, 125: 125, 126: 126, 127: 127,
    1027: 129, 8225: 135, 1046: 198, 8222: 132, 1047: 199, 1168: 165, 1048: 200, 1113: 154, 1049: 201, 1045: 197, 1050: 202, 1028: 170, 160: 160, 1040: 192,
    1051: 203, 164: 164, 166: 166, 167: 167, 169: 169, 171: 171, 172: 172, 173: 173, 174: 174, 1053: 205, 176: 176, 177: 177, 1114: 156, 181: 181, 182: 182,
    183: 183, 8221: 148, 187: 187, 1029: 189, 1056: 208, 1057: 209, 1058: 210, 8364: 136, 1112: 188, 1115: 158, 1059: 211, 1060: 212, 1030: 178, 1061: 213,
    1062: 214, 1063: 215, 1116: 157, 1064: 216, 1065: 217, 1031: 175, 1066: 218, 1067: 219, 1068: 220, 1069: 221, 1070: 222, 1032: 163, 8226: 149, 1071: 223,
    1072: 224, 8482: 153, 1073: 225, 8240: 137, 1118: 162, 1074: 226, 1110: 179, 8230: 133, 1075: 227, 1033: 138, 1076: 228, 1077: 229, 8211: 150, 1078: 230,
    1119: 159, 1079: 231, 1042: 194, 1080: 232, 1034: 140, 1025: 168, 1081: 233, 1082: 234, 8212: 151, 1083: 235, 1169: 180, 1084: 236, 1052: 204, 1085: 237,
    1035: 142, 1086: 238, 1087: 239, 1088: 240, 1089: 241, 1090: 242, 1036: 141, 1041: 193, 1091: 243, 1092: 244, 8224: 134, 1093: 245, 8470: 185, 1094: 246,
    1054: 206, 1095: 247, 1096: 248, 8249: 139, 1097: 249, 1098: 250, 1044: 196, 1099: 251, 1111: 191, 1055: 207, 1100: 252, 1038: 161, 8220: 147, 1101: 253,
    8250: 155, 1102: 254, 8216: 145, 1103: 255, 1043: 195, 1105: 184, 1039: 143, 1026: 128, 1106: 144, 8218: 130, 1107: 131, 8217: 146, 1108: 186, 1109: 190};

  var UCS2 = {};
  for (var k in CP1251) {
    UCS2[CP1251[k]] = String.fromCharCode(k);
    delete UCS2[0];
    delete UCS2[1];
  }

  // Based on all common ЙЦУКЕН-keyboards (both Windows and Apple variations)
  var COMMON_TYPOS = {
    'й': 'ёцыф', 'ц': 'йфыву', 'у': 'цывак', 'к': 'увапе', 'е': 'капрн', 'н': 'епрог', 'г': 'нролш', 'ш': 'голдщ', 'щ': 'шлджз', 'з': 'щджэх-', 'х': 'зжэъ-', 'ъ': 'хэ-ё',
    'ф': 'йцычяё', 'ы': 'йцувсчяф', 'в': 'цукамсчы', 'а': 'укепимсв', 'п': 'кенртима', 'р': 'енгоьтип', 'о': 'нгшлбьтр', 'л': 'гшщдюбьо', 'д': 'шщзжюбл', 'ж': 'щзхэюд', 'э': 'зхъжё',
    'ё': 'йфяъэ', 'я': 'ёфыч', 'ч': 'яфывс', 'с': 'чывам', 'м': 'свапи', 'и': 'мапрт', 'т': 'ипроь', 'ь': 'тролб', 'б': 'ьолдю', 'ю': 'блдж',
    '1': 'ёйц', '2': 'йцу', '3': 'цук', '4': 'уке', '5': 'кен', '6': 'енг', '7': 'нгш', '8': 'гшщ', '9': 'шщз', '0': 'щзх-', '-': 'зхъ', '=': '-хъ', '\\': 'ъэ', '.': 'южэ'
  };

  function offset(base) {
    return ((base >> 10) << ((base & EXTENSION_BIT) >> 6)) & PRECISION_MASK;
  }

  function label(base) {
    return base & (IS_LEAF_BIT | 0xFF) & PRECISION_MASK;
  }

  function hasLeaf(base) {
    return (base & HAS_LEAF_BIT & PRECISION_MASK) != 0;
  }

  function value(base) {
    return base & ~IS_LEAF_BIT & PRECISION_MASK;
  }

  var DAWG = function(units, guide, format) {
    this.units = units;
    this.guide = guide;
    this.format = format;
  }

  DAWG.fromArrayBuffer = function(data, format) {
    var dv = new DataView(data),
        unitsLength = dv.getUint32(0, true),
        guideLength = dv.getUint32(unitsLength * 4 + 4, true);
    return new DAWG(
      new Uint32Array(data, 4, unitsLength),
      new Uint8Array(data, unitsLength * 4 + 8, guideLength * 2),
      format);
  }

  DAWG.load = function(url, format, callback) {
    Az.load(url, 'arraybuffer', function(err, data) {
      callback(err, err ? null : DAWG.fromArrayBuffer(data, format));
    });
  }

  DAWG.prototype.followByte = function(c, index) {
    var o = offset(this.units[index]);
    var nextIndex = (index ^ o ^ (c & 0xFF)) & PRECISION_MASK;

    if (label(this.units[nextIndex]) != (c & 0xFF)) {
      return MISSING;
    }

    return nextIndex;
  }

  DAWG.prototype.followString = function(str, index) {
    index = index || ROOT;
    for (var i = 0; i < str.length; i++) {
      var code = str.charCodeAt(i);
      if (!(code in CP1251)) {
        return MISSING;
      }
      index = this.followByte(CP1251[code], index);
      if (index == MISSING) {
        return MISSING;
      }
    }
    return index;
  }

  DAWG.prototype.hasValue = function(index) {
    return hasLeaf(this.units[index]);
  }

  DAWG.prototype.value = function(index) {
    var o = offset(this.units[index]);
    var valueIndex = (index ^ o) & PRECISION_MASK;
    return value(this.units[valueIndex]);
  }

  DAWG.prototype.find = function(str) {
    var index = this.followString(str);
    if (index == MISSING) {
        return MISSING;
    }
    if (!this.hasValue(index)) {
        return MISSING;
    }
    return this.value(index);
  }

  DAWG.prototype.iterateAll = function(index) {
    var results = [];
    var stack = [index];
    var key = [];
    var last = ROOT;
    var label;

    while (true) {
      index = stack[stack.length - 1];

      if (last != ROOT) {
        label = this.guide[index << 1];
        if (label) {
          index = this.followByte(label, index);
          if (index == MISSING) {
            return results;
          }
          key.push(label);
          stack.push(index);
        } else {
          do {
            label = this.guide[(index << 1) + 1];
            key.pop();
            stack.pop();
            if (!stack.length) {
              return results;
            }
            index = stack[stack.length - 1];
            if (label) {
              index = this.followByte(label, index);
              if (index == MISSING) {
                return results;
              }
              key.push(label);
              stack.push(index);
            }
          } while (!label);
        }
      }

      while (!this.hasValue(index)) {
        var label = this.guide[index << 1];
        index = this.followByte(label, index);
        if (index == MISSING) {
          return results;
        }
        key.push(label);
        stack.push(index);
      }

      // Only three formats supported
      if (this.format == 'words') {
        results.push([
          ((key[0] ^ 1) << 6) + (key[1] >> 1),
          ((key[2] ^ 1) << 6) + (key[3] >> 1)
        ]);
      } else
      if (this.format == 'probs') {
        results.push([
          ((key[0] ^ 1) << 6) + (key[1] >> 1),
          ((key[2] ^ 1) << 6) + (key[3] >> 1),
          ((key[4] ^ 1) << 6) + (key[5] >> 1)
        ]);
      } else {
        // Raw bytes
        results.push(key.slice());
      }
      last = index;
    }
  }

  // Features:
  //  replaces (е -> ё) (DONE)
  //  stutter (ннет -> нет, гоол -> гол, д-да -> да)
  //  typos (count-limited):
  //    swaps (солво -> слово)
  //    extra letters (свлово -> слово)
  //    missing letters (сово -> слово)
  //    wrong letters (сково -> слово)
  DAWG.prototype.findAll = function(str, replaces, mstutter, mtypos) {
    mtypos = mtypos || 0;
    mstutter = mstutter || 0;
    var results = [],
        prefixes = [['', 0, 0, 0, ROOT]],
        prefix, index, len, code, cur, typos, stutter;

    while (prefixes.length) {
      prefix = prefixes.pop();
      index = prefix[4], stutter = prefix[3], typos = prefix[2], len = prefix[1], prefix = prefix[0];

      // Done
      if (len == str.length) {
        if (typos < mtypos && !stutter) {
          // Allow missing letter(s) at the very end
          var label = this.guide[index << 1]; // First child
          do {
            cur = this.followByte(label, index);
            if ((cur != MISSING) && (label in UCS2)) {
              prefixes.push([ prefix + UCS2[label], len, typos + 1, stutter, cur ]);
            }
            label = this.guide[(cur << 1) + 1]; // Next child
          } while (cur != MISSING);
        }

        if (this.format == 'int') {
          if (this.hasValue(index)) {
            results.push([prefix, this.value(index)]);
          }
          continue;
        }
        // Find all payloads
        if (this.format == 'words' || this.format == 'probs') {
          index = this.followByte(1, index); // separator
          if (index == MISSING) {
            continue;
          }
        }
        results.push([prefix, this.iterateAll(index), stutter, typos]);
        continue;
      }

      // Follow a replacement path
      if (replaces && str[len] in replaces) {
        code = replaces[str[len]].charCodeAt(0);
        if (code in CP1251) {
          cur = this.followByte(CP1251[code], index);
          if (cur != MISSING) {
            prefixes.push([ prefix + replaces[str[len]], len + 1, typos, stutter, cur ]);
          }
        }
      }

      // Follow typos path (if not over limit)
      if (typos < mtypos && !stutter) {
        // Skip a letter entirely (extra letter)
        prefixes.push([ prefix, len + 1, typos + 1, stutter, index ]);

        // Add a letter (missing)
        // TODO: iterate all childs?
        var label = this.guide[index << 1]; // First child
        do {
          cur = this.followByte(label, index);
          if ((cur != MISSING) && (label in UCS2)) {
            prefixes.push([ prefix + UCS2[label], len, typos + 1, stutter, cur ]);
          }
          label = this.guide[(cur << 1) + 1]; // Next child
        } while (cur != MISSING);

        // Replace a letter
        // Now it checks only most probable typos (located near to each other on keyboards)
        var possible = COMMON_TYPOS[str[len]];
        if (possible) {
          for (var i = 0; i < possible.length; i++) {
            code = possible.charCodeAt(i);
            if (code in CP1251) {
              cur = this.followByte(CP1251[code], index);
              if (cur != MISSING) {
                // for missing letter we need to iterate all childs, not only COMMON_TYPOS
                // prefixes.push([ prefix + possible[i], len, typos + 1, stutter, cur ]);
                prefixes.push([ prefix + possible[i], len + 1, typos + 1, stutter, cur ]);
              }
            }
          }
        }

        // Swapped two letters
        // TODO: support for replacements?
        if (len < str.length - 1) {
          code = str.charCodeAt(len + 1);
          if (code in CP1251) {
            cur = this.followByte(CP1251[code], index);
            if (cur != MISSING) {
              code = str.charCodeAt(len);
              if (code in CP1251) {
                cur = this.followByte(CP1251[code], cur);
                if (cur != MISSING) {
                  prefixes.push([ prefix + str[len + 1] + str[len], len + 2, typos + 1, stutter, cur ]);
                }
              }
            }
          }
        }
      }

      // Follow base path
      code = str.charCodeAt(len);
      if (code in CP1251) {
        cur = this.followByte(CP1251[code], index);
        if (cur != MISSING) {
          prefixes.push([ prefix + str[len], len + 1, typos, stutter, cur ]);

          while (stutter < mstutter && !typos && len < str.length - 1) {
            // Follow a simple stutter path (merge two equal letters into one)
            if (str[len] == str[len + 1]) {
              prefixes.push([ prefix + str[len], len + 2, typos, stutter + 1, cur ]);
              len++;
            } else
            // Follow a stutter with a dash (д-да)
            if (len < str.length - 2 && str[len + 1] == '-' && str[len] == str[len + 2]) {
              prefixes.push([ prefix + str[len], len + 3, typos, stutter + 1, cur ]);
              len += 2;
            } else {
              break;
            }
            stutter++;
          }
        }
      }
    }
    return results;
  }

  return DAWG;
}));
;(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? (module.exports = module.exports || {}) && (module.exports.Morph = factory(module.exports)) :
  typeof define === 'function' && define.amd ? define('Az.Morph', ['Az', 'Az.DAWG'], factory) :
  (global.Az = global.Az || {}) && (global.Az.Morph = factory(global.Az))
}(this, function (Az) { 'use strict';
  /** @namespace Az **/
  var words,
      probabilities,
      predictionSuffixes = new Array(3),
      prefixes = [ '', 'по', 'наи' ],
      suffixes,
      grammemes,
      paradigms,
      tags,
      defaults = {
        ignoreCase: false,
        replacements: { 'е': 'ё' },
        stutter: Infinity,
        typos: 0,
        parsers: [
          // Словарные слова + инициалы
          'Dictionary?', 'AbbrName?', 'AbbrPatronymic',
          // Числа, пунктуация, латиница (по-хорошему, токенизатор не должен эту ерунду сюда пускать)
          'IntNumber', 'RealNumber', 'Punctuation', 'RomanNumber?', 'Latin',
          // Слова с дефисами
          'HyphenParticle', 'HyphenAdverb', 'HyphenWords',
          // Предсказатели по префиксам/суффиксам
          'PrefixKnown', 'PrefixUnknown?', 'SuffixKnown?', 'Abbr'
        ],
        forceParse: false,
        normalizeScore: true
      },
      initials = 'АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЭЮЯ',
      particles = ['-то', '-ка', '-таки', '-де', '-тко', '-тка', '-с', '-ста'],
      knownPrefixes = [
        'авиа', 'авто', 'аква', 'анти', 'анти-', 'антропо', 'архи', 'арт', 'арт-', 'астро', 'аудио', 'аэро',
        'без', 'бес', 'био', 'вело', 'взаимо', 'вне', 'внутри', 'видео', 'вице-', 'вперед', 'впереди',
        'гекто', 'гелио', 'гео', 'гетеро', 'гига', 'гигро', 'гипер', 'гипо', 'гомо',
        'дву', 'двух', 'де', 'дез', 'дека', 'деци', 'дис', 'до', 'евро', 'за', 'зоо', 'интер', 'инфра',
        'квази', 'квази-', 'кило', 'кино', 'контр', 'контр-', 'космо', 'космо-', 'крипто', 'лейб-', 'лже', 'лже-',
        'макро', 'макси', 'макси-', 'мало', 'меж', 'медиа', 'медиа-', 'мега', 'мета', 'мета-', 'метео', 'метро', 'микро',
        'милли', 'мини', 'мини-', 'моно', 'мото', 'много', 'мульти',
        'нано', 'нарко', 'не', 'небез', 'недо', 'нейро', 'нео', 'низко', 'обер-', 'обще', 'одно', 'около', 'орто',
        'палео', 'пан', 'пара', 'пента', 'пере', 'пиро', 'поли', 'полу', 'после', 'пост', 'пост-',
        'порно', 'пра', 'пра-', 'пред', 'пресс-', 'противо', 'противо-', 'прото', 'псевдо', 'псевдо-',
        'радио', 'разно', 'ре', 'ретро', 'ретро-', 'само', 'санти', 'сверх', 'сверх-', 'спец', 'суб', 'супер', 'супер-', 'супра',
        'теле', 'тетра', 'топ-', 'транс', 'транс-', 'ультра', 'унтер-', 'штаб-',
        'экзо', 'эко', 'эндо', 'эконом-', 'экс', 'экс-', 'экстра', 'экстра-', 'электро', 'энерго', 'этно'
      ],
      autoTypos = [4, 9],
      UNKN,
      __init = [],
      initialized = false;

  // Взято из https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze
  function deepFreeze(obj) {
    if (!('freeze' in Object)) {
      return;
    }

    var propNames = Object.getOwnPropertyNames(obj);
    propNames.forEach(function(name) {
      var prop = obj[name];

      if (typeof prop == 'object' && prop !== null)
        deepFreeze(prop);
    });

    return Object.freeze(obj);
  }

  /**
   * Тег. Содержит в себе информацию о конкретной форме слова, но при этом
   * к конкретному слову не привязан. Всевозможные значения тегов переиспользуются
   * для всех разборов слов.
   *
   * Все граммемы навешаны на тег как поля. Если какая-то граммема содержит в себе
   * дочерние граммемы, то значением поля является именно название дочерней
   * граммемы (например, tag.GNdr == 'masc'). В то же время для дочерних граммем
   * значением является просто true (т.е. условие можно писать и просто как
   * if (tag.masc) ...).
   *
   * @property {string[]} stat Полный список неизменяемых граммем.
   * @property {string[]} flex Полный список изменяемых граммем.
   * @property {Tag} ext Копия тега с русскими обозначениями (по версии OpenCorpora).
   */
  var Tag = function(str) {
    var par, pair = str.split(' ');
    this.stat = pair[0].split(',');
    this.flex = pair[1] ? pair[1].split(',') : [];
    for (var j = 0; j < 2; j++) {
      var grams = this[['stat', 'flex'][j]];
      for (var i = 0; i < grams.length; i++) {
        var gram = grams[i];
        this[gram] = true;
        // loc2 -> loct -> CAse
        while (grammemes[gram] && (par = grammemes[gram].parent)) {
          this[par] = gram;
          gram = par;
        }
      }
    }
    if ('POST' in this) {
      this.POS = this.POST;
    }
  }

  /**
   * Возвращает текстовое представление тега.
   *
   * @returns {string} Список неизменяемых граммем через запятую, пробел,
   *  и список изменяемых граммем через запятую.
   */
  Tag.prototype.toString = function() {
    return (this.stat.join(',') + ' ' + this.flex.join(',')).trim();
  }

  /**
   * Проверяет согласованность с конкретными значениями граммем либо со списком
   * граммем из другого тега (или слова).
   *
   * @param {Tag|Parse} [tag] Тег или разбор слова, с которым следует
   *  проверить согласованность.
   * @param {Array|Object} grammemes Граммемы, по которым нужно проверить
   *  согласованность.
   *
   *  Если указан тег (или разбор), то grammemes должен быть массивом тех
   *  граммем, которые у обоих тегов должны совпадать. Например:
   *  tag.matches(otherTag, ['POS', 'GNdr'])
   *
   *  Если тег не указан, а указан массив граммем, то проверяется просто их
   *  наличие. Например, аналог выражения (tag.NOUN && tag.masc):
   *  tag.matches([ 'NOUN', 'masc' ])
   *
   *  Если тег не указан, а указан объект, то ключи в нем — названия граммем,
   *  значения — дочерние граммемы, массивы граммем, либо true/false:
   *  tag.matches({ 'POS' : 'NOUN', 'GNdr': ['masc', 'neut'] })
   * @returns {boolean} Является ли текущий тег согласованным с указанным.
   */
  // TODO: научиться понимать, что некоторые граммемы можно считать эквивалентными при сравнении двух тегов (вариации падежей и т.п.)
  Tag.prototype.matches = function(tag, grammemes) {
    if (!grammemes) {
      if (Object.prototype.toString.call(tag) === '[object Array]') {
        for (var i = 0; i < tag.length; i++) {
          if (!this[tag[i]]) {
            return false;
          }
        }
        return true;
      } else
      // Match to map
      for (var k in tag) {
        if (Object.prototype.toString.call(tag[k]) === '[object Array]') {
          if (!tag[k].indexOf(this[k])) {
            return false;
          }
        } else {
          if (tag[k] != this[k]) {
            return false;
          }
        }
      }
      return true;
    }

    if (tag instanceof Parse) {
      tag = tag.tag;
    }

    // Match to another tag
    for (var i = 0; i < grammemes.length; i++) {
      if (tag[grammemes[i]] != this[grammemes[i]]) {
        // Special case: tag.CAse
        return false;
      }
    }
    return true;
  }

  Tag.prototype.isProductive = function() {
    return !(this.NUMR || this.NPRO || this.PRED || this.PREP ||
      this.CONJ || this.PRCL || this.INTJ || this.Apro ||
      this.NUMB || this.ROMN || this.LATN || this.PNCT ||
      this.UNKN);
  }

  Tag.prototype.isCapitalized = function() {
    return this.Name || this.Surn || this.Patr || this.Geox || this.Init;
  }

  function makeTag(tagInt, tagExt) {
    var tag = new Tag(tagInt);
    tag.ext = new Tag(tagExt);
    return deepFreeze(tag);
  }

  /**
   * Производит морфологический анализ слова. Возвращает возможные варианты
   * разбора по убыванию их правдоподобности.
   *
   * @playground
   * var Az = require('az');
   * Az.Morph.init(function() {
   *   console.log(Az.Morph('стали'));
   * });
   * @param {string} word Слово, которое следует разобрать.
   * @param {Object} [config] Опции разбора.
   * @param {boolean} [config.ignoreCase=False] Следует ли игнорировать
   *  регистр слов (в основном это означает возможность написания имен собственных и
   *  инициалов с маленькой буквы).
   * @param {Object} [config.replacements={ 'е': 'ё' }] Допустимые замены букв
   *  при поиске слов в словаре. Ключи объекта — заменяемые буквы в разбираемом
   *  слове, соответствующие им значения — буквы в словарных словах, которым
   *  допустимо встречаться вместо заменяемых. По умолчанию буква «е» может
   *  соответствовать букве «ё» в словарных словах.
   * @param {number} [config.stutter=Infinity] «Заикание». Устраняет повторения букв
   *  (как с дефисом - «не-е-ет», так и без - «нееет»).
   *
   *  Infinity не ограничивает максимальное число повторений (суммарно во всем слове).
   *
   *  0 или false чтобы отключить.
   * @param {number|'auto'} [config.typos=0] Опечатки. Максимальное количество
   * опечаток в слове.
   *
   *  Опечаткой считается:
   *  - лишняя буква в слове
   *  - пропущенная буква в слове (TODO: самый медленный тип опечаток, стоит сделать опциональным)
   *  - не та буква в слове (если правильная буква стоит рядом на клавиатуре)
   *  - переставленные местами соседние буквы
   *
   *  0 или false чтобы отключить.
   *
   *  'auto':
   *  - 0, если слово короче 5 букв
   *  - 1, если слово короче 10 букв (но только если не нашлось варианта разбора без опечаток)
   *  - 2 в противном случае (но только если не нашлось варианта разбора без опечаток или с 1 опечаткой)
   * @param {string[]} [config.parsers] Список применяемых парсеров (см. поля
   *  объекта Az.Morph.Parsers) в порядке применения (т.е. стоящие в начале
   *  имеют наивысший приоритет).
   *
   *  Вопросительный знак означает, что данный парсер не терминальный, то есть
   *  варианты собираются до первого терминального парсера. Иными словами, если
   *  мы дошли до какого-то парсера, значит все стоящие перед ним терминальные
   *  парсеры либо не дали результата совсем, либо дали только с опечатками.
   *
   *  (парсер в терминологии pymorphy2 — анализатор)
   * @param {boolean} [config.forceParse=False] Всегда возвращать хотя бы один вариант
   *  разбора (как это делает pymorphy2), даже если совсем ничего не получилось.
   * @returns {Parse[]} Варианты разбора.
   * @memberof Az
   */
  var Morph = function(word, config) {
    if (!initialized) {
      throw new Error('Please call Az.Morph.init() before using this module.');
    }

    config = config ? Az.extend(defaults, config) : defaults;

    var parses = [];
    var matched = false;
    for (var i = 0; i < config.parsers.length; i++) {
      var name = config.parsers[i];
      var terminal = name[name.length - 1] != '?';
      name = terminal ? name : name.slice(0, -1);
      if (name in Morph.Parsers) {
        var vars = Morph.Parsers[name](word, config);
        for (var j = 0; j < vars.length; j++) {
          vars[j].parser = name;
          if (!vars[j].stutterCnt && !vars[j].typosCnt) {
            matched = true;
          }
        }

        parses = parses.concat(vars);
        if (matched && terminal) {
          break;
        }
      } else {
        console.warn('Parser "' + name + '" is not found. Skipping');
      }
    }

    if (!parses.length && config.forceParse) {
      parses.push(new Parse(word.toLocaleLowerCase(), UNKN));
    }

    var total = 0;
    for (var i = 0; i < parses.length; i++) {
      if (parses[i].parser == 'Dictionary') {
        var res = probabilities.findAll(parses[i] + ':' + parses[i].tag);
        if (res && res[0]) {
          parses[i].score = (res[0][1] / 1000000) * getDictionaryScore(parses[i].stutterCnt, parses[i].typosCnt);
          total += parses[i].score;
        }
      }
    }

    // Normalize Dictionary & non-Dictionary scores separately
    if (config.normalizeScore) {
      if (total > 0) {
        for (var i = 0; i < parses.length; i++) {
          if (parses[i].parser == 'Dictionary') {
            parses[i].score /= total;
          }
        }
      }

      total = 0;
      for (var i = 0; i < parses.length; i++) {
        if (parses[i].parser != 'Dictionary') {
          total += parses[i].score;
        }
      }
      if (total > 0) {
        for (var i = 0; i < parses.length; i++) {
          if (parses[i].parser != 'Dictionary') {
            parses[i].score /= total;
          }
        }
      }
    }

    parses.sort(function(e1, e2) {
      return e2.score - e1.score;
    });

    return parses;
  }

  // TODO: вынести парсеры в отдельный файл(ы)?

  Morph.Parsers = {}

  /**
   * Один из возможных вариантов морфологического разбора.
   *
   * @property {string} word Слово в текущей форме (с исправленными ошибками,
   *  если они были)
   * @property {Tag} tag Тег, описывающий текущую форму слова.
   * @property {number} score Число от 0 до 1, соответствующее «уверенности»
   *  в данном разборе (чем оно выше, тем вероятнее данный вариант).
   * @property {number} stutterCnt Число «заиканий», исправленных в слове.
   * @property {number} typosCnt Число опечаток, исправленных в слове.
   */
  var Parse = function(word, tag, score, stutterCnt, typosCnt) {
    this.word = word;
    this.tag = tag;
    this.stutterCnt = stutterCnt || 0;
    this.typosCnt = typosCnt || 0;
    this.score = score || 0;
  }

  /**
   * Приводит слово к его начальной форме.
   *
   * @param {boolean} keepPOS Не менять часть речи при нормализации (например,
   *  не делать из причастия инфинитив).
   * @returns {Parse} Разбор, соответствующий начальной форме или False,
   *  если произвести нормализацию не удалось.
   */
  // TODO: некоторые смены частей речи, возможно, стоит делать в любом случае (т.к., например, компаративы, краткие формы причастий и прилагательных разделены, инфинитив отделен от глагола)
  Parse.prototype.normalize = function(keepPOS) {
    return this.inflect(keepPOS ? { POS: this.tag.POS } : 0);
  }

  /**
   * Приводит слово к указанной форме.
   *
   * @param {Tag|Parse} [tag] Тег или другой разбор слова, с которым следует
   *  согласовать данный.
   * @param {Array|Object} grammemes Граммемы, по которым нужно согласовать слово.
   * @returns {Parse|False} Разбор, соответствующий указанной форме или False,
   *  если произвести согласование не удалось.
   * @see Tag.matches
   */
  Parse.prototype.inflect = function(tag, grammemes) {
    return this;
  }

  /**
   * Приводит слово к форме, согласующейся с указанным числом.
   * Вместо конкретного числа можно указать категорию (согласно http://www.unicode.org/cldr/charts/29/supplemental/language_plural_rules.html).
   *
   * @param {number|string} number Число, с которым нужно согласовать данное слово или категория, описывающая правило построения множественного числа.
   * @returns {Parse|False} Разбор, соответствующий указанному числу или False,
   *  если произвести согласование не удалось.
   */
  Parse.prototype.pluralize = function(number) {
    if (!this.tag.NOUN && !this.tag.ADJF && !this.tag.PRTF) {
      return this;
    }

    if (typeof number == 'number') {
      number = number % 100;
      if ((number % 10 == 0) || (number % 10 > 4) || (number > 4 && number < 21)) {
        number = 'many';
      } else
      if (number % 10 == 1) {
        number = 'one';
      } else {
        number = 'few';
      }
    }

    if (this.tag.NOUN && !this.tag.nomn && !this.tag.accs) {
      return this.inflect([number == 'one' ? 'sing' : 'plur', this.tag.CAse]);
    } else
    if (number == 'one') {
      return this.inflect(['sing', this.tag.nomn ? 'nomn' : 'accs'])
    } else
    if (this.tag.NOUN && (number == 'few')) {
      return this.inflect(['sing', 'gent']);
    } else
    if ((this.tag.ADJF || this.tag.PRTF) && this.tag.femn && (number == 'few')) {
      return this.inflect(['plur', 'nomn']);
    } else {
      return this.inflect(['plur', 'gent']);
    }
  }

  /**
   * Проверяет, согласуется ли текущая форма слова с указанной.
   *
   * @param {Tag|Parse} [tag] Тег или другой разбор слова, с которым следует
   *  проверить согласованность.
   * @param {Array|Object} grammemes Граммемы, по которым нужно проверить
   *  согласованность.
   * @returns {boolean} Является ли текущая форма слова согласованной с указанной.
   * @see Tag.matches
   */
  Parse.prototype.matches = function(tag, grammemes) {
    return this.tag.matches(tag, grammemes);
  }

  /**
   * Возвращает текущую форму слова.
   *
   * @returns {String} Текущая форма слова.
   */
  Parse.prototype.toString = function() {
    return this.word;
  }

  // Выводит информацию о слове в консоль.
  Parse.prototype.log = function() {
    console.group(this.toString());
    console.log('Stutter?', this.stutterCnt, 'Typos?', this.typosCnt);
    console.log(this.tag.ext.toString());
    console.groupEnd();
  }

  function lookup(dawg, word, config) {
    var entries;
    if (config.typos == 'auto') {
      entries = dawg.findAll(word, config.replacements, config.stutter, 0);
      for (var i = 0; i < autoTypos.length && !entries.length && word.length > autoTypos[i]; i++) {
        entries = dawg.findAll(word, config.replacements, config.stutter, i + 1);
      }
    } else {
      entries = dawg.findAll(word, config.replacements, config.stutter, config.typos);
    }
    return entries;
  }

  function getDictionaryScore(stutterCnt, typosCnt) {
    // = 1.0 if no stutter/typos
    // = 0.3 if any number of stutter or 1 typo
    // = 0.09 if 2 typos
    // = 0.027 if 3 typos
    return Math.pow(0.3, Math.min(stutterCnt, 1) + typosCnt);
  }

  var DictionaryParse = function(word, paradigmIdx, formIdx, stutterCnt, typosCnt, prefix, suffix) {
    this.word = word;
    this.paradigmIdx = paradigmIdx;
    this.paradigm = paradigms[paradigmIdx];
    this.formIdx = formIdx;
    this.formCnt = this.paradigm.length / 3;
    this.tag = tags[this.paradigm[this.formCnt + formIdx]];
    this.stutterCnt = stutterCnt || 0;
    this.typosCnt = typosCnt || 0;
    this.score = getDictionaryScore(this.stutterCnt, this.typosCnt);
    this.prefix = prefix || '';
    this.suffix = suffix || '';
  }

  DictionaryParse.prototype = Object.create(Parse.prototype);
  DictionaryParse.prototype.constructor = DictionaryParse;

  // Возвращает основу слова
  DictionaryParse.prototype.base = function() {
    if (this._base) {
      return this._base;
    }
    return (this._base = this.word.substring(
      prefixes[this.paradigm[(this.formCnt << 1) + this.formIdx]].length,
      this.word.length - suffixes[this.paradigm[this.formIdx]].length)
    );
  }

  // Склоняет/спрягает слово так, чтобы оно соответствовало граммемам другого слова, тега или просто конкретным граммемам (подробнее см. Tag.prototype.matches).
  // Всегда выбирается первый подходящий вариант.
  DictionaryParse.prototype.inflect = function(tag, grammemes) {
    if (!grammemes && typeof tag === 'number') {
      // Inflect to specific formIdx
      return new DictionaryParse(
          prefixes[this.paradigm[(this.formCnt << 1) + tag]] +
          this.base() +
          suffixes[this.paradigm[tag]],
        this.paradigmIdx,
        tag, 0, 0, this.prefix, this.suffix
      );
    }

    for (var formIdx = 0; formIdx < this.formCnt; formIdx++) {
      if (tags[this.paradigm[this.formCnt + formIdx]].matches(tag, grammemes)) {
        return new DictionaryParse(
            prefixes[this.paradigm[(this.formCnt << 1) + formIdx]] +
            this.base() +
            suffixes[this.paradigm[formIdx]],
          this.paradigmIdx,
          formIdx, 0, 0, this.prefix, this.suffix
        );
      }
    }

    return false;
  }

  DictionaryParse.prototype.log = function() {
    console.group(this.toString());
    console.log('Stutter?', this.stutterCnt, 'Typos?', this.typosCnt);
    console.log(prefixes[this.paradigm[(this.formCnt << 1) + this.formIdx]] + '|' + this.base() + '|' + suffixes[this.paradigm[this.formIdx]]);
    console.log(this.tag.ext.toString());
    var norm = this.normalize();
    console.log('=> ', norm + ' (' + norm.tag.ext.toString() + ')');
    norm = this.normalize(true);
    console.log('=> ', norm + ' (' + norm.tag.ext.toString() + ')');
    console.groupCollapsed('Все формы: ' + this.formCnt);
    for (var formIdx = 0; formIdx < this.formCnt; formIdx++) {
      var form = this.inflect(formIdx);
      console.log(form + ' (' + form.tag.ext.toString() + ')');
    }
    console.groupEnd();
    console.groupEnd();
  }

  DictionaryParse.prototype.toString = function() {
    if (this.prefix) {
      var pref = prefixes[this.paradigm[(this.formCnt << 1) + this.formIdx]];
      return pref + this.prefix + this.word.substr(pref.length) + this.suffix;
    } else {
      return this.word + this.suffix;
    }
  }

  var CombinedParse = function(left, right) {
    this.left = left;
    this.right = right;
    this.tag = right.tag;
    this.score = left.score * right.score * 0.8;
    this.stutterCnt = left.stutterCnt + right.stutterCnt;
    this.typosCnt = left.typosCnt + right.typosCnt;
    if ('formCnt' in right) {
      this.formCnt = right.formCnt;
    }
  }

  CombinedParse.prototype = Object.create(Parse.prototype);
  CombinedParse.prototype.constructor = CombinedParse;

  CombinedParse.prototype.inflect = function(tag, grammemes) {
    var left, right;

    var right = this.right.inflect(tag, grammemes);
    if (!grammemes && typeof tag === 'number') {
      left = this.left.inflect(right.tag, ['POST', 'NMbr', 'CAse', 'PErs', 'TEns']);
    } else {
      left = this.left.inflect(tag, grammemes);
    }
    if (left && right) {
      return new CombinedParse(left, right);
    } else {
      return false;
    }
  }

  CombinedParse.prototype.toString = function() {
    return this.left.word + '-' + this.right.word;
  }

  __init.push(function() {
    Morph.Parsers.Dictionary = function(word, config) {
      var isCapitalized =
        !config.ignoreCase && word.length &&
        (word[0].toLocaleLowerCase() != word[0]) &&
        (word.substr(1).toLocaleUpperCase() != word.substr(1));
      word = word.toLocaleLowerCase();

      var opts = lookup(words, word, config);

      var vars = [];
      for (var i = 0; i < opts.length; i++) {
        for (var j = 0; j < opts[i][1].length; j++) {
          var w = new DictionaryParse(
            opts[i][0],
            opts[i][1][j][0],
            opts[i][1][j][1],
            opts[i][2],
            opts[i][3]);
          if (config.ignoreCase || !w.tag.isCapitalized() || isCapitalized) {
            vars.push(w);
          }
        }
      }
      return vars;
    }

    var abbrTags = [];
    for (var i = 0; i <= 2; i++) {
      for (var j = 0; j <= 5; j++) {
        for (var k = 0; k <= 1; k++) {
          abbrTags.push(makeTag(
            'NOUN,inan,' + ['masc', 'femn', 'neut'][i] + ',Fixd,Abbr ' + ['sing', 'plur'][k] + ',' + ['nomn', 'gent', 'datv', 'accs', 'ablt', 'loct'][j],
            'СУЩ,неод,' + ['мр', 'жр', 'ср'][i] + ',0,аббр ' + ['ед', 'мн'][k] + ',' + ['им', 'рд', 'дт', 'вн', 'тв', 'пр'][j]
          ));
        }
      }
    }

    // Произвольные аббревиатуры (несклоняемые)
    // ВК, ЖК, ССМО, ОАО, ЛенСпецСМУ
    Morph.Parsers.Abbr = function(word, config) {
      // Однобуквенные считаются инициалами и для них заведены отдельные парсеры
      if (word.length < 2) {
        return [];
      }
      // Дефисов в аббревиатуре быть не должно
      if (word.indexOf('-') > -1) {
        return [];
      }
      // Первая буква должна быть заглавной: сокращения с маленькой буквы (типа iOS) мало распространены
      // Последняя буква должна быть заглавной: иначе сокращение, вероятно, склоняется
      if ((initials.indexOf(word[0]) > -1) && (initials.indexOf(word[word.length - 1]) > -1)) {
        var caps = 0;
        for (var i = 0; i < word.length; i++) {
          if (initials.indexOf(word[i]) > -1) {
            caps++;
          }
        }
        if (caps <= 5) {
          var vars = [];
          for (var i = 0; i < abbrTags.length; i++) {
            var w = new Parse(word, abbrTags[i], 0.5);
            vars.push(w);
          }
          return vars;
        }
      }
      // При игнорировании регистра разбираем только короткие аббревиатуры
      // (и требуем, чтобы каждая буква была «инициалом», т.е. без мягких/твердых знаков)
      if (!config.ignoreCase || (word.length > 5)) {
        return [];
      }
      word = word.toLocaleUpperCase();
      for (var i = 0; i < word.length; i++) {
        if (initials.indexOf(word[i]) == -1) {
          return [];
        }
      }
      var vars = [];
      for (var i = 0; i < abbrTags.length; i++) {
        var w = new Parse(word, abbrTags[i], 0.2);
        vars.push(w);
      }
      return vars;
    }

    var InitialsParser = function(isPatronymic, score) {
      var initialsTags = [];
      for (var i = 0; i <= 1; i++) {
        for (var j = 0; j <= 5; j++) {
          initialsTags.push(makeTag(
            'NOUN,anim,' + ['masc', 'femn'][i] + ',Sgtm,Name,Fixd,Abbr,Init sing,' + ['nomn', 'gent', 'datv', 'accs', 'ablt', 'loct'][j],
            'СУЩ,од,' + ['мр', 'жр'][i] + ',sg,имя,0,аббр,иниц ед,' + ['им', 'рд', 'дт', 'вн', 'тв', 'пр'][j]
          ));
        }
      }
      return function(word, config) {
        if (word.length != 1) {
          return [];
        }
        if (config.ignoreCase) {
          word = word.toLocaleUpperCase();
        }
        if (initials.indexOf(word) == -1) {
          return [];
        }
        var vars = [];
        for (var i = 0; i < initialsTags.length; i++) {
          var w = new Parse(word, initialsTags[i], score);
          vars.push(w);
        }
        return vars;
      }
    }

    Morph.Parsers.AbbrName = InitialsParser(false, 0.1);
    Morph.Parsers.AbbrPatronymic = InitialsParser(true, 0.1);

    var RegexpParser = function(regexp, tag, score) {
      return function(word, config) {
        if (config.ignoreCase) {
          word = word.toLocaleUpperCase();
        }
        if (word.length && word.match(regexp)) {
          return [new Parse(word, tag)];
        } else {
          return [];
        }
      }
    }

    grammemes['NUMB'] = grammemes['ЧИСЛО'] =
    grammemes['ROMN'] = grammemes['РИМ'] =
    grammemes['LATN'] = grammemes['ЛАТ'] =
    grammemes['PNCT'] = grammemes['ЗПР'] =
    grammemes['UNKN'] = grammemes['НЕИЗВ'] =
     { parent: 'POST' };

    Morph.Parsers.IntNumber = RegexpParser(
      /^[−-]?[0-9]+$/,
      makeTag('NUMB,intg', 'ЧИСЛО,цел'), 0.9);

    Morph.Parsers.RealNumber = RegexpParser(
      /^[−-]?([0-9]*[.,][0-9]+)$/,
      makeTag('NUMB,real', 'ЧИСЛО,вещ'), 0.9);

    Morph.Parsers.Punctuation = RegexpParser(
      /^[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,\-.\/:;<=>?@\[\]^_`{|}~]+$/,
      makeTag('PNCT', 'ЗПР'), 0.9);

    Morph.Parsers.RomanNumber = RegexpParser(
      /^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$/,
      makeTag('ROMN', 'РИМ'), 0.9);

    Morph.Parsers.Latin = RegexpParser(
      /[A-Za-z\u00C0-\u00D6\u00D8-\u00f6\u00f8-\u024f]$/,
      makeTag('LATN', 'ЛАТ'), 0.9);

    // слово + частица
    // смотри-ка
    Morph.Parsers.HyphenParticle = function(word, config) {
      word = word.toLocaleLowerCase();

      var vars = [];
      for (var k = 0; k < particles.length; k++) {
        if (word.substr(word.length - particles[k].length) == particles[k]) {
          var base = word.slice(0, -particles[k].length);
          var opts = lookup(words, base, config);

          //console.log(opts);
          for (var i = 0; i < opts.length; i++) {
            for (var j = 0; j < opts[i][1].length; j++) {
              var w = new DictionaryParse(
                opts[i][0],
                opts[i][1][j][0],
                opts[i][1][j][1],
                opts[i][2],
                opts[i][3],
                '', particles[k]);
              w.score *= 0.9;
              vars.push(w);
            }
          }
        }
      }

      return vars;
    }

    var ADVB = makeTag('ADVB', 'Н');

    // 'по-' + прилагательное в дательном падеже
    // по-западному
    Morph.Parsers.HyphenAdverb = function(word, config) {
      word = word.toLocaleLowerCase();

      if ((word.length < 5) || (word.substr(0, 3) != 'по-')) {
        return [];
      }

      var opts = lookup(words, word.substr(3), config);

      var parses = [];
      var used = {};

      for (var i = 0; i < opts.length; i++) {
        if (!used[opts[i][0]]) {
          for (var j = 0; j < opts[i][1].length; j++) {
            var parse = new DictionaryParse(opts[i][0], opts[i][1][j][0], opts[i][1][j][1], opts[i][2], opts[i][3]);
            if (parse.matches(['ADJF', 'sing', 'datv'])) {
              used[opts[i][0]] = true;

              parse = new Parse('по-' + opts[i][0], ADVB, parse.score * 0.9, opts[i][2], opts[i][3]);
              parses.push(parse);
              break;
            }
          }
        }
      }
      return parses;
    }

    // слово + '-' + слово
    // интернет-магазин
    // компания-производитель
    Morph.Parsers.HyphenWords = function(word, config) {
      word = word.toLocaleLowerCase();
      for (var i = 0; i < knownPrefixes.length; i++) {
        if (knownPrefixes[i][knownPrefixes[i].length - 1] == '-' &&
            word.substr(0, knownPrefixes[i].length) == knownPrefixes[i]) {
          return [];
        }
      }
      var parses = [];
      var parts = word.split('-');
      if (parts.length != 2 || !parts[0].length || !parts[1].length) {
        if (parts.length > 2) {
          var end = parts[parts.length - 1];
          var right = Morph.Parsers.Dictionary(end, config);
          for (var j = 0; j < right.length; j++) {
            if (right[j] instanceof DictionaryParse) {
              right[j].score *= 0.2;
              right[j].prefix = word.substr(0, word.length - end.length - 1) + '-';
              parses.push(right[j]);
            }
          }
        }
        return parses;
      }
      var left = Morph.Parsers.Dictionary(parts[0], config);
      var right = Morph.Parsers.Dictionary(parts[1], config);


      // Variable
      for (var i = 0; i < left.length; i++) {
        if (left[i].tag.Abbr) {
          continue;
        }
        for (var j = 0; j < right.length; j++) {
          if (!left[i].matches(right[j], ['POST', 'NMbr', 'CAse', 'PErs', 'TEns'])) {
            continue;
          }
          if (left[i].stutterCnt + right[j].stutterCnt > config.stutter ||
              left[i].typosCnt + right[j].typosCnt > config.typos) {
            continue;
          }
          parses.push(new CombinedParse(left[i], right[j]));
        }
      }
      // Fixed
      for (var j = 0; j < right.length; j++) {
        if (right[j] instanceof DictionaryParse) {
          right[j].score *= 0.3;
          right[j].prefix = parts[0] + '-';
          parses.push(right[j]);
        }
      }

      return parses;
    }


    Morph.Parsers.PrefixKnown = function(word, config) {
      var isCapitalized =
        !config.ignoreCase && word.length &&
        (word[0].toLocaleLowerCase() != word[0]) &&
        (word.substr(1).toLocaleUpperCase() != word.substr(1));
      word = word.toLocaleLowerCase();
      var parses = [];
      for (var i = 0; i < knownPrefixes.length; i++) {
        if (word.length - knownPrefixes[i].length < 3) {
          continue;
        }

        if (word.substr(0, knownPrefixes[i].length) == knownPrefixes[i]) {
          var end = word.substr(knownPrefixes[i].length);
          var right = Morph.Parsers.Dictionary(end, config);
          for (var j = 0; j < right.length; j++) {
            if (!right[j].tag.isProductive()) {
              continue;
            }
            if (!config.ignoreCase && right[j].tag.isCapitalized() && !isCapitalized) {
              continue;
            }
            right[j].score *= 0.7;
            right[j].prefix = knownPrefixes[i];
            parses.push(right[j]);
          }
        }
      }
      return parses;
    }

    Morph.Parsers.PrefixUnknown = function(word, config) {
      var isCapitalized =
        !config.ignoreCase && word.length &&
        (word[0].toLocaleLowerCase() != word[0]) &&
        (word.substr(1).toLocaleUpperCase() != word.substr(1));
      word = word.toLocaleLowerCase();
      var parses = [];
      for (var len = 1; len <= 5; len++) {
        if (word.length - len < 3) {
          break;
        }
        var end = word.substr(len);
        var right = Morph.Parsers.Dictionary(end, config);
        for (var j = 0; j < right.length; j++) {
          if (!right[j].tag.isProductive()) {
            continue;
          }
          if (!config.ignoreCase && right[j].tag.isCapitalized() && !isCapitalized) {
            continue;
          }
          right[j].score *= 0.3;
          right[j].prefix = word.substr(0, len);
          parses.push(right[j]);
        }
      }
      return parses;
    }

    // Отличие от предсказателя по суффиксам в pymorphy2: найдя подходящий суффикс, проверяем ещё и тот, что на символ короче
    Morph.Parsers.SuffixKnown = function(word, config) {
      if (word.length < 4) {
        return [];
      }
      var isCapitalized =
        !config.ignoreCase && word.length &&
        (word[0].toLocaleLowerCase() != word[0]) &&
        (word.substr(1).toLocaleUpperCase() != word.substr(1));
      word = word.toLocaleLowerCase();
      var parses = [];
      var minlen = 1;
      var coeffs = [0, 0.2, 0.3, 0.4, 0.5, 0.6];
      var used = {};
      for (var i = 0; i < prefixes.length; i++) {
        if (prefixes[i].length && (word.substr(0, prefixes[i].length) != prefixes[i])) {
          continue;
        }
        var base = word.substr(prefixes[i].length);
        for (var len = 5; len >= minlen; len--) {
          if (len >= base.length) {
            continue;
          }
          var left = base.substr(0, base.length - len);
          var right = base.substr(base.length - len);
          var entries = predictionSuffixes[i].findAll(right, config.replacements, 0, 0);
          if (!entries) {
            continue;
          }

          var p = [];
          var max = 1;
          for (var j = 0; j < entries.length; j++) {
            var suffix = entries[j][0];
            var stats = entries[j][1];

            for (var k = 0; k < stats.length; k++) {
              var parse = new DictionaryParse(
                prefixes[i] + left + suffix,
                stats[k][1],
                stats[k][2]);
              // Why there is even non-productive forms in suffix DAWGs?
              if (!parse.tag.isProductive()) {
                continue;
              }
              if (!config.ignoreCase && parse.tag.isCapitalized() && !isCapitalized) {
                continue;
              }
              var key = parse.toString() + ':' + stats[k][1] + ':' + stats[k][2];
              if (key in used) {
                continue;
              }
              max = Math.max(max, stats[k][0]);
              parse.score = stats[k][0] * coeffs[len];
              p.push(parse);
              used[key] = true;
            }
          }
          if (p.length > 0) {
            for (var j = 0; j < p.length; j++) {
              p[j].score /= max;
            }
            parses = parses.concat(p);
            // Check also suffixes 1 letter shorter
            minlen = Math.max(len - 1, 1);
          }
        }
      }
      return parses;
    }

    UNKN = makeTag('UNKN', 'НЕИЗВ');
  });

  /**
   * Задает опции морфологического анализатора по умолчанию.
   *
   * @param {Object} config Опции анализатора.
   * @see Morph
   */
  Morph.setDefaults = function(config) {
    defaults = config;
  }

  /**
   * Инициализирует анализатор, загружая необходимые для работы словари из
   * указанной директории. Эту функцию необходимо вызвать (и дождаться
   * срабатывания коллбэка) до любых действий с модулем.
   *
   * @param {string} [path] Директория, содержащая файлы 'words.dawg',
   * 'grammemes.json' и т.д. По умолчанию директория 'dicts' в данном модуле.
   * @param {Function} callback Коллбэк, вызываемый после завершения загрузки
   *  всех словарей.
   */
  Morph.init = function(path, callback) {
    var loading = 0;
    var tagsInt, tagsExt;
    function loaded() {
      if (!--loading) {
        tags = Array(tagsInt.length);
        for (var i = 0; i < tagsInt.length; i++) {
          tags[i] = new Tag(tagsInt[i]);
          tags[i].ext = new Tag(tagsExt[i]);
        }
        tags = deepFreeze(tags);
        for (var i = 0; i < __init.length; i++) {
          __init[i]();
        }
        initialized = true;
        callback && callback(null, Morph);
      }
    }

    if (!callback && typeof path == 'function') {
      callback = path;
      if (typeof __dirname == 'string') {
        path = __dirname + '/../dicts';
      } else {
        path = 'dicts';
      }
    }

    loading++;
    Az.DAWG.load(path + '/words.dawg', 'words', function(err, dawg) {
      if (err) {
        callback(err);
        return;
      }
      words = dawg;
      loaded();
    });

    for (var prefix = 0; prefix < 3; prefix++) {
      (function(prefix) {
        loading++;
        Az.DAWG.load(path + '/prediction-suffixes-' + prefix + '.dawg', 'probs', function(err, dawg) {
          if (err) {
            callback(err);
            return;
          }
          predictionSuffixes[prefix] = dawg;
          loaded();
        });
      })(prefix);
    }

    loading++;
    Az.DAWG.load(path + '/p_t_given_w.intdawg', 'int', function(err, dawg) {
      if (err) {
        callback(err);
        return;
      }
      probabilities = dawg;
      loaded();
    });

    loading++;
    Az.load(path + '/grammemes.json', 'json', function(err, json) {
      if (err) {
        callback(err);
        return;
      }
      grammemes = {};
      for (var i = 0; i < json.length; i++) {
        grammemes[json[i][0]] = grammemes[json[i][2]] = {
          parent: json[i][1],
          internal: json[i][0],
          external: json[i][2],
          externalFull: json[i][3]
        }
      }
      loaded();
    });

    loading++;
    Az.load(path + '/gramtab-opencorpora-int.json', 'json', function(err, json) {
      if (err) {
        callback(err);
        return;
      }
      tagsInt = json;
      loaded();
    });

    loading++;
    Az.load(path + '/gramtab-opencorpora-ext.json', 'json', function(err, json) {
      if (err) {
        callback(err);
        return;
      }
      tagsExt = json;
      loaded();
    });

    loading++;
    Az.load(path + '/suffixes.json', 'json', function(err, json) {
      if (err) {
        callback(err);
        return;
      }
      suffixes = json;
      loaded();
    });

    loading++;
    Az.load(path + '/paradigms.array', 'arraybuffer', function(err, data) {
      if (err) {
        callback(err);
        return;
      }
      
      var list = new Uint16Array(data),
          count = list[0],
          pos = 1;

      paradigms = [];
      for (var i = 0; i < count; i++) {
        var size = list[pos++];
        paradigms.push(list.subarray(pos, pos + size));
        pos += size;
      }
      loaded();
    });
  }

  return Morph;
}));

;(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? (module.exports = module.exports || {}) && (module.exports.Syntax = factory(module.exports)) :
  typeof define === 'function' && define.amd ? define('Az.Syntax', ['Az'], factory) :
  (global.Az = global.Az || {}) && (global.Az.Syntax = factory(global.Az))
}(this, function (Az) { 'use strict';
  // TBD: Syntax analyzer
  var Syntax = function() {

  }

  return Syntax;
}));
;(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? (module.exports = module.exports || {}) && (module.exports.Tokens = factory()) :
  typeof define === 'function' && define.amd ? define('Az.Tokens', ['Az'], factory) :
  (global.Az = global.Az || {}) && (global.Az.Tokens = factory())
}(this, function () { 'use strict';
  /** @namespace Az **/
  var TLDs = 'ac|ad|ae|aero|af|ag|ai|al|am|ao|aq|ar|arpa|as|asia|at|au|aw|ax|az|ba|bb|be|bf|bg|bh|bi|biz|bj|bm|bo|br|bs|bt|bv|bw|by|bz|ca|cat|cc|cd|cf|cg|ch|ci|cl|cm|cn|co|com|coop|cr|cu|cv|cw|cx|cz|de|dj|dk|dm|do|dz|ec|edu|ee|eg|es|et|eu|fi|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gov|gp|gq|gr|gs|gt|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|info|int|io|iq|ir|is|it|je|jo|jobs|jp|kg|ki|km|kn|kp|kr|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mil|mk|ml|mn|mo|mobi|mp|mq|mr|ms|mt|mu|museum|mv|mw|mx|my|na|name|nc|ne|net|nf|ng|nl|no|nr|nu|nz|om|org|pa|pe|pf|ph|pk|pl|pm|pn|post|pr|pro|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sx|sy|sz|tc|td|tel|tf|tg|th|tj|tk|tl|tm|tn|to|tr|travel|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|yt|امارات|հայ|বাংলা|бел|中国|中國|الجزائر|مصر|ею|გე|ελ|香港|भारत|بھارت|భారత్|ભારત|ਭਾਰਤ|ভারত|இந்தியா|ایران|ايران|عراق|الاردن|한국|қаз|ලංකා|இலங்கை|المغرب|мкд|мон|澳門|澳门|مليسيا|عمان|پاکستان|پاكستان|فلسطين|срб|рф|قطر|السعودية|السعودیة|السعودیۃ|السعوديه|سودان|新加坡|சிங்கப்பூர்|سورية|سوريا|ไทย|تونس|台灣|台湾|臺灣|укр|اليمن|xxx|zm|aaa|aarp|abarth|abb|abbott|abbvie|abc|able|abogado|abudhabi|academy|accenture|accountant|accountants|aco|active|actor|adac|ads|adult|aeg|aetna|afamilycompany|afl|africa|africamagic|agakhan|agency|aig|aigo|airbus|airforce|airtel|akdn|alfaromeo|alibaba|alipay|allfinanz|allstate|ally|alsace|alstom|americanexpress|americanfamily|amex|amfam|amica|amsterdam|analytics|android|anquan|anz|aol|apartments|app|apple|aquarelle|arab|aramco|archi|army|art|arte|asda|associates|athleta|attorney|auction|audi|audible|audio|auspost|author|auto|autos|avianca|aws|axa|azure|baby|baidu|banamex|bananarepublic|band|bank|bar|barcelona|barclaycard|barclays|barefoot|bargains|baseball|basketball|bauhaus|bayern|bbc|bbt|bbva|bcg|bcn|beats|beauty|beer|bentley|berlin|best|bestbuy|bet|bharti|bible|bid|bike|bing|bingo|bio|black|blackfriday|blanco|blockbuster|blog|bloomberg|blue|bms|bmw|bnl|bnpparibas|boats|boehringer|bofa|bom|bond|boo|book|booking|boots|bosch|bostik|boston|bot|boutique|box|bradesco|bridgestone|broadway|broker|brother|brussels|budapest|bugatti|build|builders|business|buy|buzz|bzh|cab|cafe|cal|call|calvinklein|camera|camp|cancerresearch|canon|capetown|capital|capitalone|car|caravan|cards|care|career|careers|cars|cartier|casa|case|caseih|cash|casino|catering|catholic|cba|cbn|cbre|cbs|ceb|center|ceo|cern|cfa|cfd|chanel|channel|chase|chat|cheap|chintai|chloe|christmas|chrome|chrysler|church|cipriani|circle|cisco|citadel|citi|citic|city|cityeats|claims|cleaning|click|clinic|clinique|clothing|cloud|club|clubmed|coach|codes|coffee|college|cologne|comcast|commbank|community|company|compare|computer|comsec|condos|construction|consulting|contact|contractors|cooking|cookingchannel|cool|corsica|country|coupon|coupons|courses|credit|creditcard|creditunion|cricket|crown|crs|cruise|cruises|csc|cuisinella|cymru|cyou|dabur|dad|dance|date|dating|datsun|day|dclk|dds|deal|dealer|deals|degree|delivery|dell|deloitte|delta|democrat|dental|dentist|desi|design|dev|dhl|diamonds|diet|digital|direct|directory|discount|discover|dish|diy|dnp|docs|dodge|dog|doha|domains|dot|download|drive|dstv|dtv|dubai|duck|dunlop|duns|dupont|durban|dvag|dwg|earth|eat|edeka|education|email|emerck|emerson|energy|engineer|engineering|enterprises|epost|epson|equipment|ericsson|erni|esq|estate|esurance|etisalat|eurovision|eus|events|everbank|exchange|expert|exposed|express|extraspace|fage|fail|fairwinds|faith|family|fan|fans|farm|farmers|fashion|fast|fedex|feedback|ferrari|ferrero|fiat|fidelity|fido|film|final|finance|financial|fire|firestone|firmdale|fish|fishing|fit|fitness|flickr|flights|flir|florist|flowers|flsmidth|fly|foo|foodnetwork|football|ford|forex|forsale|forum|foundation|fox|free|fresenius|frl|frogans|frontdoor|frontier|ftr|fujitsu|fujixerox|fun|fund|furniture|futbol|fyi|gal|gallery|gallo|gallup|game|games|gap|garden|gbiz|gdn|gea|gent|genting|george|ggee|gift|gifts|gives|giving|glade|glass|gle|global|globo|gmail|gmbh|gmo|gmx|godaddy|gold|goldpoint|golf|goo|goodhands|goodyear|goog|google|gop|got|gotv|grainger|graphics|gratis|green|gripe|group|guardian|gucci|guge|guide|guitars|guru|hair|hamburg|hangout|haus|hbo|hdfc|hdfcbank|health|healthcare|help|helsinki|here|hermes|hgtv|hiphop|hisamitsu|hitachi|hiv|hkt|hockey|holdings|holiday|homedepot|homegoods|homes|homesense|honda|honeywell|horse|host|hosting|hot|hoteles|hotmail|house|how|hsbc|htc|hughes|hyatt|hyundai|ibm|icbc|ice|icu|ieee|ifm|iinet|ikano|imamat|imdb|immo|immobilien|industries|infiniti|ing|ink|institute|insurance|insure|intel|international|intuit|investments|ipiranga|irish|iselect|ismaili|ist|istanbul|itau|itv|iveco|iwc|jaguar|java|jcb|jcp|jeep|jetzt|jewelry|jio|jlc|jll|jmp|jnj|joburg|jot|joy|jpmorgan|jprs|juegos|juniper|kaufen|kddi|kerryhotels|kerrylogistics|kerryproperties|kfh|kia|kim|kinder|kindle|kitchen|kiwi|koeln|komatsu|kosher|kpmg|kpn|krd|kred|kuokgroup|kyknet|kyoto|lacaixa|ladbrokes|lamborghini|lamer|lancaster|lancia|lancome|land|landrover|lanxess|lasalle|lat|latino|latrobe|law|lawyer|lds|lease|leclerc|lefrak|legal|lego|lexus|lgbt|liaison|lidl|life|lifeinsurance|lifestyle|lighting|like|lilly|limited|limo|lincoln|linde|link|lipsy|live|living|lixil|loan|loans|locker|locus|loft|lol|london|lotte|lotto|love|lpl|lplfinancial|ltd|ltda|lundbeck|lupin|luxe|luxury|macys|madrid|maif|maison|makeup|man|management|mango|market|marketing|markets|marriott|marshalls|maserati|mattel|mba|mcd|mcdonalds|mckinsey|med|media|meet|melbourne|meme|memorial|men|menu|meo|metlife|miami|microsoft|mini|mint|mit|mitsubishi|mlb|mls|mma|mnet|mobily|moda|moe|moi|mom|monash|money|monster|montblanc|mopar|mormon|mortgage|moscow|moto|motorcycles|mov|movie|movistar|msd|mtn|mtpc|mtr|multichoice|mutual|mutuelle|mzansimagic|nab|nadex|nagoya|naspers|nationwide|natura|navy|nba|nec|netbank|netflix|network|neustar|new|newholland|news|next|nextdirect|nexus|nfl|ngo|nhk|nico|nike|nikon|ninja|nissan|nissay|nokia|northwesternmutual|norton|now|nowruz|nowtv|nra|nrw|ntt|nyc|obi|observer|off|office|okinawa|olayan|olayangroup|oldnavy|ollo|omega|one|ong|onl|online|onyourside|ooo|open|oracle|orange|organic|orientexpress|origins|osaka|otsuka|ott|ovh|page|pamperedchef|panasonic|panerai|paris|pars|partners|parts|party|passagens|pay|payu|pccw|pet|pfizer|pharmacy|philips|photo|photography|photos|physio|piaget|pics|pictet|pictures|pid|pin|ping|pink|pioneer|pizza|place|play|playstation|plumbing|plus|pnc|pohl|poker|politie|porn|pramerica|praxi|press|prime|prod|productions|prof|progressive|promo|properties|property|protection|pru|prudential|pub|pwc|qpon|quebec|quest|qvc|racing|raid|read|realestate|realtor|realty|recipes|red|redstone|redumbrella|rehab|reise|reisen|reit|reliance|ren|rent|rentals|repair|report|republican|rest|restaurant|review|reviews|rexroth|rich|richardli|ricoh|rightathome|ril|rio|rip|rmit|rocher|rocks|rodeo|rogers|room|rsvp|ruhr|run|rwe|ryukyu|saarland|safe|safety|sakura|sale|salon|samsclub|samsung|sandvik|sandvikcoromant|sanofi|sap|sapo|sarl|sas|save|saxo|sbi|sbs|sca|scb|schaeffler|schmidt|scholarships|school|schule|schwarz|science|scjohnson|scor|scot|seat|secure|security|seek|select|sener|services|ses|seven|sew|sex|sexy|sfr|shangrila|sharp|shaw|shell|shia|shiksha|shoes|shopping|shouji|show|showtime|shriram|silk|sina|singles|site|ski|skin|sky|skype|sling|smart|smile|sncf|soccer|social|softbank|software|sohu|solar|solutions|song|sony|soy|space|spiegel|spot|spreadbetting|srl|srt|stada|staples|star|starhub|statebank|statefarm|statoil|stc|stcgroup|stockholm|storage|store|stream|studio|study|style|sucks|supersport|supplies|supply|support|surf|surgery|suzuki|swatch|swiftcover|swiss|sydney|symantec|systems|tab|taipei|talk|taobao|target|tatamotors|tatar|tattoo|tax|taxi|tci|tdk|team|tech|technology|telecity|telefonica|temasek|tennis|teva|thd|theater|theatre|theguardian|tiaa|tickets|tienda|tiffany|tips|tires|tirol|tjmaxx|tjx|tkmaxx|tmall|today|tokyo|tools|top|toray|toshiba|total|tours|town|toyota|toys|trade|trading|training|travelchannel|travelers|travelersinsurance|trust|trv|tube|tui|tunes|tushu|tvs|ubank|ubs|uconnect|unicom|university|uno|uol|ups|vacations|vana|vanguard|vegas|ventures|verisign|versicherung|vet|viajes|video|vig|viking|villas|vin|vip|virgin|visa|vision|vista|vistaprint|viva|vivo|vlaanderen|vodka|volkswagen|volvo|vote|voting|voto|voyage|vuelos|wales|walmart|walter|wang|wanggou|warman|watch|watches|weather|weatherchannel|webcam|weber|website|wed|wedding|weibo|weir|whoswho|wien|wiki|williamhill|win|windows|wine|winners|wme|wolterskluwer|woodside|work|works|world|wow|wtc|wtf|xbox|xerox|xfinity|xihuan|xin|कॉम|セール|佛山|慈善|集团|在线|大众汽车|点看|คอม|八卦|موقع|一号店|公益|公司|香格里拉|网站|移动|我爱你|москва|католик|онлайн|сайт|联通|קום|时尚|微博|淡马锡|ファッション|орг|नेट|ストア|삼성|商标|商店|商城|дети|ポイント|新闻|工行|家電|كوم|中文网|中信|娱乐|谷歌|電訊盈科|购物|クラウド|通販|网店|संगठन|餐厅|网络|ком|诺基亚|食品|飞利浦|手表|手机|ارامكو|العليان|اتصالات|بازار|موبايلي|ابوظبي|كاثوليك|همراه|닷컴|政府|شبكة|بيتك|عرب|机构|组织机构|健康|рус|珠宝|大拿|みんな|グーグル|世界|書籍|网址|닷넷|コム|天主教|游戏|vermögensberater|vermögensberatung|企业|信息|嘉里大酒店|嘉里|广东|政务|xperia|xyz|yachts|yahoo|yamaxun|yandex|yodobashi|yoga|yokohama|you|youtube|yun|zappos|zara|zero|zip|zippo|zone|zuerich'.split('|');
  var defaults = {
    html: false,
    wiki: false,       // TODO: check all cases
    markdown: false,   // TODO: check all cases
    hashtags: true,
    mentions: true,
    emails: true,
    links: {
      protocols: true,
      www: false,
      tlds: {}
    }
  };
  /* TODO: add more named HTML entities */
  var HTML_ENTITIES = { nbsp: ' ', quot: '"', gt: '>', lt: '<', amp: '&', ndash: '–' };

  for (var i = 0; i < TLDs.length; i++) {
    defaults.links.tlds[TLDs[i]] = true;
  }

  /**
   * Токен, соответствующий некоторой подстроке в представленном на вход тексте.
   *
   * @constructor
   * @property {string} type Тип токена.
   * @property {string} subType Подтип токена.
   * @property {number} st Индекс первого символа, входящего в токен.
   * @property {number} en Индекс последнего символа, входящего в токен.
   * @property {number} length Длина токена.
   * @property {boolean} firstUpper True, если первый символ токена является заглавной буквой.
   * @property {boolean} allUpper True, если все символы в токене являются заглавными буквами.
   */
  var Token = function(source, st, length, index, firstUpper, allUpper, type, subType) {
    this.source = source;
    this.st = st;
    this.length = length;
    this.index = index;
    this.firstUpper = firstUpper;
    this.allUpper = allUpper;
    this.type = type;
    if (subType) {
      this.subType = subType;
    }
  }
  Token.prototype.toString = function() {
    return (('_str' in this) && (this._str.length == this.length)) ? this._str : (this._str = this.source.substr(this.st, this.length));
  }
  Token.prototype.indexOf = function(str) {
    if (str.length == 1) {
      for (var i = 0; i < this.length; i++) {
        if (this.source[this.st + i] == str) {
          return i;
        }
      }
      return -1;
    }
    return this.toString().indexOf(str);
  }
  Token.prototype.toLowerCase = function() {
    return this.toString().toLocaleLowerCase();
  }
  Token.prototype.isCapitalized = function() {
    return this.firstUpper && !this.allUpper;
  }
  Token.prototype.en = function() {
    return this.st + this.length - 1;
  }

  /**
   * Создает токенизатор текста с заданными опциями.
   *
   * @playground
   * var Az = require('az');
   * var tokens = Az.Tokens('Текст (от лат. textus — «ткань; сплетение, связь, паутина, сочетание») — зафиксированная на каком-либо материальном носителе человеческая мысль; в общем плане связная и полная последовательность символов.');
   * tokens.done();
   * @constructor
   * @param {string} [text] Строка для разбивки на токены.
   * @param {Object} [config] Опции, применяемые при разбивке.
   * @param {boolean} [config.html=False] Распознавать и выделять в отдельные
   *  токены (типа TAG) HTML-теги. Кроме того, содержимое тегов &lt;style&gt;
   *  и &lt;script&gt; будет размечено как единый токен типа CONTENT.
   * @param {boolean} [config.wiki=False] Распознавать и выделять в отдельные
   *  токены элементы вики-разметки.
   * @param {boolean} [config.markdown=False] Распознавать и выделять в отдельные
   *  токены элементы Markdown-разметки.
   * @param {boolean} [config.hashtags=True] Распознавать и выделять в отдельные
   *  токены хэштеги (строки, начинающиеся с символа «#»).
   * @param {boolean} [config.mentions=True] Распознавать и выделять в отдельные
   *  токены упоминания (строки, начинающиеся с символа «@»).
   * @param {boolean} [config.emails=True] Распознавать и выделять в отдельные
   *  токены е-мейлы (нет, распознавание всех корректных по RFC адресов не
   *  гарантируется).
   * @param {Object} [config.links] Настройки распознавания ссылок. False, чтобы
   *  не распознавать ссылки совсем.
   * @param {boolean} [config.links.protocols=True] Распознавать и выделять в отдельные
   *  токены ссылки с указанным протоколом (http://, https:// и вообще любым другим).
   * @param {boolean} [config.links.www=False] Распознавать и выделять в отдельные
   *  токены ссылки, начинающиеся с «www.».
   * @param {Object} [config.links.tlds] Объект, в котором ключами должны быть
   *  домены верхнего уровня, в которых будут распознаваться ссылки. По умолчанию
   *  текущий список всех таких доменов.
   * @memberof Az
   */
  var Tokens = function(text, config) {
    if (this instanceof Tokens) {
      this.tokens = [];
      this.source = '';
      if (typeof text == 'string') {
        this.config = config ? Az.extend(defaults, config) : defaults;
        this.append(text);
      } else {
        this.config = text ? Az.extend(defaults, text) : defaults;
      }
      this.index = -1;
    } else {
      return new Tokens(text, config);
    }
  }

  Tokens.WORD = new String('WORD');
  Tokens.NUMBER = new String('NUMBER');
  Tokens.OTHER = new String('OTHER');
  Tokens.DIGIT = new String('DIGIT');
  Tokens.CYRIL = new String('CYRIL');
  Tokens.LATIN = new String('LATIN');
  Tokens.MIXED = new String('MIXED');
  Tokens.PUNCT = new String('PUNCT');
  Tokens.SPACE = new String('SPACE');
  Tokens.MARKUP = new String('MARKUP');
  Tokens.NEWLINE = new String('NEWLINE');
  Tokens.EMAIL = new String('EMAIL');
  Tokens.LINK = new String('LINK');
  Tokens.HASHTAG = new String('HASHTAG');
  Tokens.MENTION = new String('MENTION');
  Tokens.TAG = new String('TAG');
  Tokens.CONTENT = new String('CONTENT');
  Tokens.SCRIPT = new String('SCRIPT');
  Tokens.STYLE = new String('STYLE');
  Tokens.COMMENT = new String('COMMENT');
  Tokens.CLOSING = new String('CLOSING');
  Tokens.TEMPLATE = new String('TEMPLATE');
  Tokens.RANGE = new String('RANGE');
  Tokens.ENTITY = new String('ENTITY');

  /**
   * Отправляет ещё один кусок текста на токенизацию. Таким образом вполне
   * допустимо обрабатывать большие документы частями, многократно вызывая этот
   * метод. При этом токен может начаться в одной части и продолжиться в
   * следующей (а закончиться в ещё одной).
   *
   * @param {string} text Строка для разбивки на токены.
   * @param {Object} [config] Опции, применяемые при разбивке. Перекрывают
   *  опции, заданные в конструкторе токенизатора.
   * @see Tokens
   */
  Tokens.prototype.append = function(text, config) {
    'use strict';
    // Для производительности:
    // - как можно меньше операций конкатенции/разбивки строк
    // - вместо сравнения всего токена, проверяем соответствующий ему символ в исходной строке
    // - типы токенов - константы в Tokens, формально это строки, но сравниваем через === (как объекты)
    config = config ? Az.extend(this.config, config) : this.config;
    if (config.links && (config.links.tlds === true)) {
      config.links.tlds = defaults.links.tlds;
    }

    var offs = this.source.length;
    this.source += text;
    
    var s = this.source, ts = this.tokens;
    for (var i = offs; i < s.length; i++) {
      var ch = s[i];
      var code = s.charCodeAt(i);

      var append = false;
      var last = ts.length - 1;
      var token = ts[last];
      var st = i;

      if (config.html && (ch == ';')) {
        // &nbsp;
        if ((last > 0) && 
            (token.type === Tokens.WORD) && 
            (ts[last - 1].length == 1) && 
            (s[ts[last - 1].st] == '&')) {
          var name = token.toLowerCase();
          if (name in HTML_ENTITIES) {
            ch = HTML_ENTITIES[name];
            code = ch.charCodeAt(0);

            last -= 2;
            token = ts[last];
            ts.length = last + 1;
          }
        } else
        // &x123AF5;
        // &1234;
        if ((last > 1) && 
            ((token.type === Tokens.NUMBER) || 
             ((token.type === Tokens.WORD) &&
              (s[token.st] == 'x'))) && 
            (ts[last - 1].length == 1) &&
            (s[ts[last - 1].st] == '#') && 
            (ts[last - 1].length == 1) &&
            (s[ts[last - 1].st] == '&')) {
          if (s[token.st] == 'x') {
            code = parseInt(token.toString().substr(1), 16);
          } else {
            code = parseInt(token.toString(), 10);
          }
          ch = String.fromCharCode(code);

          last -= 3;
          token = ts[last];
          ts.length = last + 1;
        }
      }

      var charType = Tokens.OTHER;
      var charUpper = (ch.toLocaleLowerCase() != ch);
      if (code >= 0x0400 && code <= 0x04FF) charType = Tokens.CYRIL;
      if ((code >= 0x0041 && code <= 0x005A) || (code >= 0x0061 && code <= 0x007A) || (code >= 0x00C0 && code <= 0x024F)) charType = Tokens.LATIN;
      if (code >= 0x0030 && code <= 0x0039) charType = Tokens.DIGIT;
      if ((code <= 0x0020) || (code >= 0x0080 && code <= 0x00A0)) charType = Tokens.SPACE;
      if ('‐-−‒–—―.…,:;?!¿¡()[]«»"\'’‘’“”/⁄'.indexOf(ch) > -1) charType = Tokens.PUNCT;

      var tokenType = charType;
      var tokenSubType = false;
      if (charType === Tokens.CYRIL || charType === Tokens.LATIN) {
        tokenType = Tokens.WORD;
        tokenSubType = charType;
      } else
      if (charType === Tokens.DIGIT) {
        tokenType = Tokens.NUMBER;
      }

      var lineStart = !token || (s[token.st + token.length - 1] == '\n');

      if (config.wiki) {
        if (lineStart) {
          if (':;*#~|'.indexOf(ch) > -1) {
            tokenType = Tokens.MARKUP;
            tokenSubType = Tokens.NEWLINE;
          }
        }
        if ('={[|]}'.indexOf(ch) > -1) {
          tokenType = Tokens.MARKUP;
        }
      }

      if (config.markdown) {
        if (lineStart) {
          if ('=-#>+-'.indexOf(ch) > -1) {
            tokenType = Tokens.MARKUP;
            tokenSubType = Tokens.NEWLINE;
          }
        }
        if ('[]*~_`\\'.indexOf(ch) > -1) {
          tokenType = Tokens.MARKUP;
        }
      }

      if (token) {
        if (config.wiki && 
            (ch != "'") && 
            (token.length == 1) &&
            (s[token.st] == "'") &&
            (last > 0) &&
            (ts[last - 1].type === Tokens.WORD) &&
            (ts[last - 1].subType === Tokens.LATIN)) {
          ts[last - 1].length += token.length;

          last -= 1;
          ts.length = last + 1;
          token = ts[last];
        }

        // Preprocess last token
        if (config.links && 
            config.links.tlds &&
            ((charType === Tokens.PUNCT) || 
             (charType === Tokens.SPACE)) &&
            (ts.length > 2) &&
            (ts[last - 2].type === Tokens.WORD) &&
            (ts[last - 1].length == 1) &&
            (s[ts[last - 1].st] == '.') &&
            (ts[last].type === Tokens.WORD) &&
            (token.toString() in config.links.tlds)) {

          // Merge all subdomains
          while ((last >= 2) &&
                 (ts[last - 2].type === Tokens.WORD) &&
                 (ts[last - 1].length == 1) &&
                 ((s[ts[last - 1].st] == '.') || 
                  (s[ts[last - 1].st] == '@') || 
                  (s[ts[last - 1].st] == ':'))) {
            last -= 2;
            token = ts[last];
            token.length += ts[last + 1].length + ts[last + 2].length;
            token.allUpper = token.allUpper && ts[last + 1].allUpper && ts[last + 2].allUpper;
          }

          if (config.emails && 
              (token.indexOf('@') > -1) && 
              (token.indexOf(':') == -1)) {
            // URL can contain a '@' but in that case it should be in form http://user@site.com or user:pass@site.com
            // So if URL has a '@' but no ':' in it, we assume it's a email
            token.type = Tokens.EMAIL;
          } else {
            token.type = Tokens.LINK;

            if (ch == '/') {
              append = true;
            }
          }
          ts.length = last + 1;
        } else

        // Process next char (start new token or append to the previous one)
        if (token.type === Tokens.LINK) {
          if ((ch == ')') && 
              (last >= 1) && 
              (ts[last - 1].type === Tokens.MARKUP) &&
              (ts[last - 1].length == 1) &&
              (s[ts[last - 1].st] == '(')) {
            tokenType = Tokens.MARKUP;
          } else
          if ((charType !== Tokens.SPACE) && (ch != ',') && (ch != '<')) {
            append = true;
          }
        } else
        if (token.type === Tokens.EMAIL) {
          if ((charType === Tokens.CYRIL) || (charType === Tokens.LATIN) || (ch == '.')) {
            append = true;
          }
        } else
        if ((token.type === Tokens.HASHTAG) || (token.type === Tokens.MENTION)) {
          if ((charType === Tokens.CYRIL) || 
              (charType == Tokens.LATIN) || 
              (charType == Tokens.DIGIT) || 
              (ch == '_') || ((ch == '@') && (token.indexOf('@') == -1))) {
            append = true;
          }
        } else
        if ((token.type === Tokens.TAG) && (token.quote || (s[token.en()] != '>'))) {
          append = true;
          if (token.quote) {
            if ((ch == token.quote) && (s[token.en()] != '\\')) {
              delete token.quote;
            }
          } else
          if ((ch == '"') || (ch == "'")) {
            token.quote = ch;
          }
        } else
        if (token.type === Tokens.CONTENT) {
          append = true;
          if (token.quote) {
            if ((ch == token.quote) && (s[token.en()] != '\\')) {
              delete token.quote;
            }
          } else
          if ((ch == '"') || (ch == "'")) {
            token.quote = ch;
          } else
          if (ch == '>') {
            if ((token.length >= 8) && (token.toString().substr(-8) == '</script')) {
              token.length -= 8;
              st -= 8;

              append = false;
              tokenType = Tokens.TAG;
              tokenSubType = Tokens.CLOSING;
            } else 
            if ((token.length >= 7) && (token.toString().substr(-7) == '</style')) {
              token.length -= 7;
              st -= 7;

              append = false;
              tokenType = Tokens.TAG;
              tokenSubType = Tokens.CLOSING;
            } 
          }
        } else
        if ((token.type === Tokens.TAG) && 
            (token.type !== Tokens.CLOSING) &&
            (token.length >= 8) &&
            (token.toLowerCase().substr(1, 6) == 'script')) {
          tokenType = Tokens.CONTENT;
          tokenSubType = Tokens.SCRIPT;
        } else
        if ((token.type === Tokens.TAG) && 
            (token.type !== Tokens.CLOSING) &&
            (token.length >= 7) && 
            (token.toLowerCase().substr(1, 5) == 'style')) {
          tokenType = Tokens.CONTENT;
          tokenSubType = Tokens.STYLE;
        } else
        if (config.html && 
            (token.length == 1) &&
            (s[token.st] == '<') && 
            ((charType === Tokens.LATIN) || (ch == '!') || (ch == '/'))) {
          append = true;
          token.type = Tokens.TAG;
          if (ch == '!') {
            token.subType = Tokens.COMMENT;
          } else
          if (ch == '/') {
            token.subType = Tokens.CLOSING;
          }
        } else
        if (token.type === Tokens.CONTENT) {
          append = true;
        } else
        if ((token.type === Tokens.MARKUP) && 
            (token.subType == Tokens.TEMPLATE) && 
            ((s[token.en()] != '}') || 
             (s[token.en() - 1] != '}'))) {
          append = true;
        } else
        if ((token.type === Tokens.MARKUP) && 
            (token.type === Tokens.LINK) && 
            (s[token.en()] != ')')) {
          append = true;
        } else
        if ((token.type === Tokens.MARKUP) && 
            (s[token.st] == '`') && 
            (token.subType === Tokens.NEWLINE) &&
            (charType === Tokens.LATIN)) {
          append = true;
        } else
        if ((charType === Tokens.CYRIL) || (charType === Tokens.LATIN)) {
          if (token.type === Tokens.WORD) {
            append = true;
            token.subType = (token.subType == charType) ? token.subType : Tokens.MIXED;
          } else
          if (token.type === Tokens.NUMBER) { // Digits + ending
            append = true;
            token.subType = (token.subType && token.subType != charType) ? Tokens.MIXED : charType;
          } else
          if (config.hashtags && (token.length == 1) && (s[token.st] == '#')) { // Hashtags
            append = true;
            token.type = Tokens.HASHTAG;
          } else
          if (config.mentions && 
              (token.length == 1) && 
              (s[token.st] == '@') && 
              ((last == 0) || (ts[last - 1].type === Tokens.SPACE))) { // Mentions
            append = true;
            token.type = Tokens.MENTION;
          } else
          if ((charType === Tokens.LATIN) && 
              (token.length == 1) && 
              ((s[token.st] == "'") || (s[token.st] == '’'))) {
            append = true;
            token.type = Tokens.WORD;
            token.subType = Tokens.LATIN;
          } else
          if ((token.length == 1) && (s[token.st] == '-')) { // -цать (?), 3-й
            append = true;

            if ((last > 0) && (ts[last - 1].type === Tokens.NUMBER)) {
              token = ts[last - 1];
              token.length += ts[last].length;

              ts.length -= 1;
            }

            token.type = Tokens.WORD;
            token.subType = charType;
          }
        } else
        if (charType === Tokens.DIGIT) {
          if (token.type === Tokens.WORD) {
            append = true;
            token.subType = Tokens.MIXED;
          } else
          if (token.type === Tokens.NUMBER) {
            append = true;
          } else
          if ((token.length == 1) &&
              ((s[token.st] == '+') || (s[token.st] == '-'))) {
            append = true;

            if ((last > 0) && (ts[last - 1].type === Tokens.NUMBER)) {
              token = ts[last - 1];
              token.length += ts[last].length;
              token.subType = Tokens.RANGE;

              ts.length -= 1;
            }

            token.type = Tokens.NUMBER;
          } else
          if ((token.length == 1) &&
              ((s[token.st] == ',') || (s[token.st] == '.')) && 
              (ts.length > 1) && 
              (ts[last - 1].type === Tokens.NUMBER)) {
            append = true;

            token = ts[last - 1];
            token.length += ts[last].length;

            ts.length -= 1;
          }
        } else
        if (charType === Tokens.SPACE) {
          if (token.type === Tokens.SPACE) {
            append = true;
          }
        } else
        if ((token.type === Tokens.MARKUP) && 
            (s[token.st] == ch) &&
            ('=-~:*#`\'>_'.indexOf(ch) > -1)) {
          append = true;
        } else
        if (ch == '.') {
          if (config.links && 
              config.links.www && 
              (token.length == 3) &&
              (token.toLowerCase() == 'www')) { // Links without protocol but with www
            append = true;
            token.type = Tokens.LINK;
          }
        } else
        if (config.wiki && (ch == "'") && (s[token.en()] == "'")) {
          if (token.length > 1) {
            token.length--;
            st--;
            tokenType = Tokens.MARKUP;
          } else {
            append = true;
            token.type = Tokens.MARKUP;
          }
        } else
        if ((ch == '-') || 
            ((token.subType == Tokens.LATIN) && 
             ((ch == '’') || (ch == "'")))) {
          if (token.type === Tokens.WORD) {
            append = true;
          }
        } else
        if (ch == '/') {
          if (config.links && 
              config.links.protocols &&
              (ts.length > 2) &&
              (ts[last - 2].type === Tokens.WORD) &&
              (ts[last - 2].subType == Tokens.LATIN) &&
              (ts[last - 1].length == 1) &&
              (s[ts[last - 1].st] == ':') &&
              (ts[last].length == 1) &&
              (s[ts[last].st] == '/')) { // Links (with protocols)
            append = true;

            token = ts[last - 2];
            token.length += ts[last - 1].length + ts[last].length;
            token.allUpper = token.allUpper && ts[last - 1].allUpper && ts[last].allUpper;
            token.type = Tokens.LINK;

            ts.length -= 2;
          }
        } else
        if (config.html && ch == ';') {
          if ((last > 0) && 
              (token.type === Tokens.WORD) && 
              (ts[last - 1].length == 1) &&
              (s[ts[last - 1].st] == '&')) {
            append = true;

            token = ts[last - 1];
            token.length += ts[last].length;
            token.allUpper = token.allUpper && ts[last - 1].allUpper;
            token.type = Tokens.ENTITY;

            ts.length -= 1;
          } else
          if ((last > 1) && 
              ((token.type === Tokens.WORD) || 
               (token.type === Tokens.NUMBER)) && 
              (ts[last - 1].length == 1) &&
              (s[ts[last - 1].st] == '#') && 
              (ts[last - 2].length == 1) &&
              (s[ts[last - 2].st] == '&')) {
            append = true;

            token = ts[last - 2];
            token.length += ts[last - 1].length + ts[last].length;
            token.allUpper = token.allUpper && ts[last - 1].allUpper && ts[last].allUpper;
            token.type = Tokens.ENTITY;

            ts.length -= 2;
          }
        } else
        if (config.markdown && 
            (ch == '[') && 
            (token.length == 1) &&
            (s[token.st] == '!')) {
          append = true;
          token.type = Tokens.MARKUP;
        } else
        if (config.markdown && 
            (ch == '(') &&
            (token.length == 1) &&
            (s[token.st] == ']')) {
          tokenType = Tokens.MARKUP;
          tokenSubType = Tokens.LINK;
        } else
        if (config.wiki && 
            (ch == '{') &&
            (token.length == 1) &&
            (s[token.st] == '{')) {
          append = true;
          token.type = Tokens.MARKUP;
          token.subType = Tokens.TEMPLATE;
        } else
        if (config.wiki && 
            (ch == '[') && 
            (token.length == 1) &&
            (s[token.st] == '[')) {
          append = true;
        } else
        if (config.wiki && 
            (ch == ']') && 
            (token.length == 1) &&
            (s[token.st] == ']')) {
          append = true;
        } else
        if (config.wiki && (ch == '|') && !lineStart) {
          var found = -1;
          for (var j = last - 1; j >= 0; j--) {
            if ((ts[j].length == 2) && 
                (s[ts[j].st] == '[') && 
                (s[ts[j].st + 1] == '[')) {
              found = j;
              break;
            }
            if (((ts[j].length == 1) && 
                 (s[ts[j].st] == '|')) || 
                ts[j].indexOf('\n') > -1) {
              break;
            }
          }
          if (found > -1) {
            append = true;
            for (var j = last - 1; j >= found; j--) {
              token = ts[j];
              token.length += ts[j + 1].length;
              token.allUpper = token.allUpper && ts[j + 1].allUpper;
            }
            last = found;
            ts.length = last + 1;
            token.subType = Tokens.LINK;
          }
        }
      }

      if (append) {
        token.length++;
        token.allUpper = token.allUpper && charUpper;
      } else {
        token = new Token(s, st, i + 1 - st, ts.length, charUpper, charUpper, tokenType, tokenSubType);
        ts.push(token);
      }
    }
    return this;
  }

  function alwaysTrue() {
    return true;
  }

  function getMatcher(filter, exclude) {
    if (!filter) {
      return alwaysTrue();
    }
    if (typeof filter == 'function') {
      return filter;
    }
    var types = filter;
    var exclusive;
    if ('length' in filter) {
      exclusive = !exclude;
      types = {};
      for (var i = 0; i < filter.length; i++) {
        types[filter[i]] = true;
      }
    } else {
      exclusive = exclude;
      exclude = false;
    }
    return function(token, index, array) {
      if (token.subType) {
        var sub = token.type + '.' + token.subType;
        if (sub in types) {
          return types[sub] != exclude;
        }
      }
      if (token.type in types) {
        return types[token.type] != exclude;
      } else {
        return !exclusive;
      }
    }
  }

  /**
   * Завершает токенизацию, возвращая список токенов.
   *
   * Эта и другие функции принимают последними параметрами filter и флаг exclude. Они
   * служат для фильтрации токенов (потому что часто удобнее получать не все токены, а
   * только определенную часть из них).
   *
   * Если в filter передана функция, то параметр exclude игнорируется, а filter вызывается
   * аналогично коллбэку в методе Array.prototype.filter: ей передаются параметры
   * token, index, array (текущий токен, его индекс и общий список токенов). Будут
   * возвращены только токены, для которых функция вернет истинное значение.
   *
   * Если в filter передан массив (или объект с полем length), то возвращаются токены, типы
   * которых либо входят в этот массив (exclude=false), либо не входят в него (exclude=true).
   * Вместо типов можно использовать строки вида 'WORD.LATIN' (тип, символ «точка» и подтип).
   *
   * Если в filter передать объект, то ключами в нём должны быть типы токенов, а значениями -
   * true или false в зависимости от того, включать такие токены в ответ или нет. Как и в случае случае
   * с массивом, в качестве ключей можно использовать строки вида 'WORD.LATIN'.
   * Здесь параметр exclude означает, следует ли ограничить выдачу только теми типами, которые
   * перечислены в filter.
   * Значения с указанием подтипа имеют больший приоритет, чем просто типы. Благодаря этому можно
   * делать такие странные вещи:
   *
   * ```
   * t.done({ 'WORD': false, 'WORD.LATIN': true }, false);
   * ```
   * (то есть вернуть все теги, кроме тегов с типом WORD, но включить теги с подтипом LATIN)
   *
   * @param {Function|String[]|Object} [filter] Типы токенов, по которым нужно
   *  отфильтровать результат (или функция для фильтрации).
   * @param {boolean} [exclude=False] Инвертирует фильтр, т.е. возвращаются
   *  токены со всеми типами, за исключением перечисленных в filter.
   * @returns {Token[]} Список токенов после фильтрации.
   */
  Tokens.prototype.done = function(filter, exclude) {
    // Finalize tokenizing, return list of tokens
    // For now it just returns tokens, in the future there could be some additional work
    if (!filter) {
      return this.tokens;
    }
    var matcher = getMatcher(filter, exclude);
    var list = [];
    for (var i = 0; i < this.tokens.length; i++) {
      if (matcher(this.tokens[i], i, this.tokens)) {
        list.push(this.tokens[i]);
      }
    }
    return list;
  }

  /**
   * Подсчитывает текущее количество токенов.
   *
   * @param {Function|String[]|Object} [filter] См. описание метода done.
   * @param {boolean} [exclude=False] См. описание метода done.
   * @returns {Number} Число токенов после фильтрации.
   */
  Tokens.prototype.count = function(filter, exclude) {
    if (!filter) {
      return this.tokens.length;
    }
    var matcher = getMatcher(filter, exclude);
    var count = 0;
    for (var i = 0; i < this.tokens.length; i++) {
      if (matcher(this.tokens[i], i, this.tokens)) {
        count++;
      }
    }
    return count;
  }

  /**
   * Получает следующий токен относительно текущей позиции.
   *
   * @param {boolean} moveIndex Следует ли переместить указатель к
   *  следующему токену (в противном случае следующий вызов nextToken вернет
   *  тот же результат)
   * @param {Function|String[]|Object} [filter] См. описание метода done.
   * @param {boolean} [exclude=False] См. описание метода done.
   * @returns {Token|null} Следующий токен или null, если подходящих токенов
   *  впереди нет.
   */
  Tokens.prototype.nextToken = function(moveIndex, filter, exclude) {
    var matcher = getMatcher(filter, exclude);
    var index = this.index;
    index++;
    while (index < this.tokens.length && matcher(this.tokens[index], index, this.tokens)) {
      index++;
    }
    if (index < this.tokens.length) {
      if (moveIndex) {
        this.index = index;
      }
      return this.tokens[index];
    }
    return null;
  }

  /**
   * Проверяет, является ли следующий (за исключением пробелов) токен знаком
   * препинания или нет.
   *
   * @returns {Token|False} False, если следующий токен не является знаком
   *  препинания, либо сам токен в противном случае.
   */
  Tokens.prototype.punctAhead = function() {
    var token = this.nextToken(false, ['SPACE'], true);
    return token && token.type == 'PUNCT' && token;
  }

  /**
   * Получает предыдущий токен относительно текущей позиции.
   *
   * @param {boolean} moveIndex Следует ли переместить указатель к
   *  предыдущему токену (в противном случае следующий вызов prevToken вернет
   *  тот же результат)
   * @param {Function|String[]|Object} [filter] См. описание метода done.
   * @param {boolean} [exclude=False] См. описание метода done.
   * @returns {Token|null} Предыдущий токен или null, если подходящих токенов
   *  позади нет.
   */
  Tokens.prototype.prevToken = function(moveIndex, filter, exclude) {
    var matcher = getMatcher(filter, exclude);
    var index = this.index;
    index--;
    while (index >= 0 && matcher(this.tokens[index], index, this.tokens)) {
      index--;
    }
    if (index >= 0) {
      if (moveIndex) {
        this.index = index;
      }
      return this.tokens[index];
    }
    return null;
  }

  /**
   * Проверяет, является ли предыдущий (за исключением пробелов) токен знаком
   * препинания или нет.
   *
   * @returns {Token|False} False, если предыдущий токен не является знаком
   *  препинания, либо сам токен в противном случае.
   */
  Tokens.prototype.punctBehind = function() {
    var token = this.prevToken(false, ['SPACE'], true);
    return token && token.type == 'PUNCT' && token;
  }

  /**
   * Проверяет, есть ли впереди текущей позиции токены, удовлетворяющие фильтру.
   *
   * @param {Function|String[]|Object} [filter] См. описание метода done.
   * @param {boolean} [exclude=False] См. описание метода done.
   * @returns {boolean} True если впереди есть хотя бы один подходящий токен,
   *  и False в противном случае.
   */
  Tokens.prototype.hasTokensAhead = function(filter, exclude) {
    return this.nextToken(false, filter, exclude) != null;
  }

  /**
   * Проверяет, есть ли позади текущей позиции токены, удовлетворяющие фильтру.
   *
   * @param {Function|String[]|Object} [filter] См. описание метода done.
   * @param {boolean} [exclude=False] См. описание метода done.
   * @returns {boolean} True если позади есть хотя бы один подходящий токен,
   *  и False в противном случае.
   */
  Tokens.prototype.hasTokensBehind = function(filter, exclude) {
    return this.prevToken(false, filter, exclude) != null;
  }

  return Tokens;
}));

}).call(this,"/node_modules\\az\\dist")
},{"fs":3}],3:[function(require,module,exports){

},{}],4:[function(require,module,exports){
'use strict';

module.exports = stemmer;

/* Character code for `y`. */
var CC_Y = 'y'.charCodeAt(0);

/* Standard suffix manipulations. */

var step2list = {
  ational: 'ate',
  tional: 'tion',
  enci: 'ence',
  anci: 'ance',
  izer: 'ize',
  bli: 'ble',
  alli: 'al',
  entli: 'ent',
  eli: 'e',
  ousli: 'ous',
  ization: 'ize',
  ation: 'ate',
  ator: 'ate',
  alism: 'al',
  iveness: 'ive',
  fulness: 'ful',
  ousness: 'ous',
  aliti: 'al',
  iviti: 'ive',
  biliti: 'ble',
  logi: 'log'
};

var step3list = {
  icate: 'ic',
  ative: '',
  alize: 'al',
  iciti: 'ic',
  ical: 'ic',
  ful: '',
  ness: ''
};

/* Consonant-vowel sequences. */

var consonant = '[^aeiou]';
var vowel = '[aeiouy]';
var consonantSequence = '(' + consonant + '[^aeiouy]*)';
var vowelSequence = '(' + vowel + '[aeiou]*)';

var MEASURE_GT_0 = new RegExp(
  '^' + consonantSequence + '?' + vowelSequence + consonantSequence
);

var MEASURE_EQ_1 = new RegExp(
  '^' + consonantSequence + '?' + vowelSequence + consonantSequence +
  vowelSequence + '?$'
);

var MEASURE_GT_1 = new RegExp(
  '^' + consonantSequence + '?' +
  '(' + vowelSequence + consonantSequence + '){2,}'
);

var VOWEL_IN_STEM = new RegExp(
  '^' + consonantSequence + '?' + vowel
);

var CONSONANT_LIKE = new RegExp(
  '^' + consonantSequence + vowel + '[^aeiouwxy]$'
);

/* Exception expressions. */

var SUFFIX_LL = /ll$/;
var SUFFIX_E = /^(.+?)e$/;
var SUFFIX_Y = /^(.+?)y$/;
var SUFFIX_ION = /^(.+?(s|t))(ion)$/;
var SUFFIX_ED_OR_ING = /^(.+?)(ed|ing)$/;
var SUFFIX_AT_OR_BL_OR_IZ = /(at|bl|iz)$/;
var SUFFIX_EED = /^(.+?)eed$/;
var SUFFIX_S = /^.+?[^s]s$/;
var SUFFIX_SSES_OR_IES = /^.+?(ss|i)es$/;
var SUFFIX_MULTI_CONSONANT_LIKE = /([^aeiouylsz])\1$/;
var STEP_2 = new RegExp(
  '^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|' +
  'ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|' +
  'biliti|logi)$'
);
var STEP_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;
var STEP_4 = new RegExp(
  '^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|' +
  'iti|ous|ive|ize)$'
);

/* Stem `value`. */
function stemmer(value) {
  var firstCharacterWasLowerCaseY;
  var match;

  value = String(value).toLowerCase();

  /* Exit early. */
  if (value.length < 3) {
    return value;
  }

  /* Detect initial `y`, make sure it never
   * matches. */
  if (value.charCodeAt(0) === CC_Y) {
    firstCharacterWasLowerCaseY = true;
    value = 'Y' + value.substr(1);
  }

  /* Step 1a. */
  if (SUFFIX_SSES_OR_IES.test(value)) {
    /* Remove last two characters. */
    value = value.substr(0, value.length - 2);
  } else if (SUFFIX_S.test(value)) {
    /* Remove last character. */
    value = value.substr(0, value.length - 1);
  }

  /* Step 1b. */
  if (match = SUFFIX_EED.exec(value)) {
    if (MEASURE_GT_0.test(match[1])) {
      /* Remove last character. */
      value = value.substr(0, value.length - 1);
    }
  } else if (
    (match = SUFFIX_ED_OR_ING.exec(value)) &&
    VOWEL_IN_STEM.test(match[1])
  ) {
    value = match[1];

    if (SUFFIX_AT_OR_BL_OR_IZ.test(value)) {
      /* Append `e`. */
      value += 'e';
    } else if (
      SUFFIX_MULTI_CONSONANT_LIKE.test(value)
    ) {
      /* Remove last character. */
      value = value.substr(0, value.length - 1);
    } else if (CONSONANT_LIKE.test(value)) {
      /* Append `e`. */
      value += 'e';
    }
  }

  /* Step 1c. */
  if ((match = SUFFIX_Y.exec(value)) && VOWEL_IN_STEM.test(match[1])) {
    /* Remove suffixing `y` and append `i`. */
    value = match[1] + 'i';
  }

  /* Step 2. */
  if ((match = STEP_2.exec(value)) && MEASURE_GT_0.test(match[1])) {
    value = match[1] + step2list[match[2]];
  }

  /* Step 3. */
  if ((match = STEP_3.exec(value)) && MEASURE_GT_0.test(match[1])) {
    value = match[1] + step3list[match[2]];
  }

  /* Step 4. */
  if (match = STEP_4.exec(value)) {
    if (MEASURE_GT_1.test(match[1])) {
      value = match[1];
    }
  } else if ((match = SUFFIX_ION.exec(value)) && MEASURE_GT_1.test(match[1])) {
    value = match[1];
  }

  /* Step 5. */
  if (
    (match = SUFFIX_E.exec(value)) &&
    (
      MEASURE_GT_1.test(match[1]) ||
      (MEASURE_EQ_1.test(match[1]) && !CONSONANT_LIKE.test(match[1]))
    )
  ) {
    value = match[1];
  }

  if (SUFFIX_LL.test(value) && MEASURE_GT_1.test(value)) {
    value = value.substr(0, value.length - 1);
  }

  /* Turn initial `Y` back to `y`. */
  if (firstCharacterWasLowerCaseY) {
    value = 'y' + value.substr(1);
  }

  return value;
}

},{}],5:[function(require,module,exports){
var Az = require('az');

// fix Az lib
Az.load = function(url, responseType, callback) {
  var xhr = new XMLHttpRequest();
  xhr.open('GET', url, true);
  xhr.responseType = responseType;

  xhr.onload = function (e) {
    if (xhr.response) {
      callback && callback(null, xhr.response);
    }
  };

  xhr.send(null);
}

module.exports = Az
},{"az":2}],6:[function(require,module,exports){
const LANG = {
  RU: 'ru',
  EN: 'en'
}

module.exports = LANG;
},{}],7:[function(require,module,exports){
var Az = require('./az'),
    stemmer = require('stemmer'),
    LANG = require('./lang');

module.exports = function(word, lang) {
  switch (lang) {
    case LANG.RU:
      word = Az.Morph(word)[0];

      if (word) { // случается, что предсказыватель ничего не предсказывает
        // приводим в начальную форму только существительные, глаголы и прилагательные
        if (word.tag.POS === 'NOUN' ||
            // word.tag.POS === 'ADVB' || // наречие
            word.tag.POS === 'INFN' ||
            word.tag.POS === 'ADJF') {
          word = word.normalize().word; // в русском только здесь эмоджи подставляем
        } else {
          word = null;
        }
      }

      break;
    case LANG.EN:
      if (word !== 'on' && word !== 'a' && word !== 'it' && word !== 'is') {
        word = stemmer(word);
      } else {
        word = null;
      }

      break;
  }

  return word;
}
},{"./az":5,"./lang":6,"stemmer":4}],8:[function(require,module,exports){
module.exports = function(text) {
  var specialSymbols = /(@|&|'|\(|\)|<|>|#)/g;

  return text.replace(specialSymbols, '').toLowerCase();
}
},{}],9:[function(require,module,exports){
var Az = require('./az');

module.exports = function(text) {
  return Az.Tokens(text).done();
}
},{"./az":5}],10:[function(require,module,exports){
var Az = require('./az'),
    LANG = require('./lang'),
    emojies = require('../converter/emojies.json'),
    prepareText = require('./prepareText'),
    tokenization = require('./tokenization'),
    normalizeWord = require('./normalizeWord'),
    wordToEmoji = require('./wordToEmoji');

module.exports = function(text) {
  var text = prepareText(text),
      tokens = tokenization(text),
      word,
      lang;

  for (let a = 0; a < tokens.length; a++) {
    if (tokens[a].type === Az.Tokens.WORD) {
      switch (tokens[a].subType) {
        case Az.Tokens.CYRIL:
          lang = LANG.RU;

          break;
        case Az.Tokens.LATIN:
          lang = LANG.EN;

          break;
      }

      word = normalizeWord(tokens[a].toString(), lang);

      if (word) { // отсекаем не существительные, глаголы или прилагательные
        let emoji = wordToEmoji(word, lang, emojies);

        if (emoji) {
          tokens[a] += ' ' + emoji;
        }
      }
    }
  }

  return tokens.join(' ');
}
},{"../converter/emojies.json":1,"./az":5,"./lang":6,"./normalizeWord":7,"./prepareText":8,"./tokenization":9,"./wordToEmoji":11}],11:[function(require,module,exports){
module.exports = function(word, lang, emojies) {
  console.log(emojies[lang]['names'][word]);

  if (emojies[lang]['names'][word]) {
    return emojies[lang]['names'][word];
  }

  if (emojies[lang]['keywords'][word]) {
    let keywords = emojies[lang]['keywords'][word];

    return keywords[Math.floor(Math.random() * keywords.length)];
  }
}
},{}],12:[function(require,module,exports){
var Az = require('./az'),
    translateText = require('./translateText'),
    isInit = false;

Az.Morph.init('../node_modules/az/dicts', function() {
  isInit = true;
});

onmessage = function(e) {
  if (isInit) {
    postMessage(translateText(e.data));    
  }
}
},{"./az":5,"./translateText":10}]},{},[12]);
